#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; BLENDINDICES             0   xyzw        3     NONE    uint   x   
; BLENDWEIGHT              0   xyzw        4     NONE   float   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: Compiled\SkinnedEffect_VSSkinnedVertexLightingOneBoneBn.pdb
; shader hash: 67503db35d605af849a13872b6cd8a10
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [3872 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 20, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 12, 16 }
;   output 1 depends on inputs: { 4, 5, 6, 12, 16 }
;   output 2 depends on inputs: { 4, 5, 6, 12, 16 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 16 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 16 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 16 }
;   output 7 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 13 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 14 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 15 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.alignment.legacy.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [72 x [3 x <4 x float>]] }

define void @VSSkinnedVertexLightingOneBoneBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = fmul fast float %6, 2.000000e+00
  %14 = fmul fast float %7, 2.000000e+00
  %15 = fmul fast float %8, 2.000000e+00
  %16 = fadd fast float %13, -1.000000e+00
  %17 = fadd fast float %14, -1.000000e+00
  %18 = fadd fast float %15, -1.000000e+00
  %19 = mul i32 %3, 3
  %20 = add i32 %19, 26
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %20)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = add i32 %19, 27
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %26)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = add i32 %19, 28
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %32)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.f32 %33, 2
  %37 = extractvalue %dx.types.CBufRet.f32 %33, 3
  %38 = fmul fast float %22, %2
  %39 = fmul fast float %28, %2
  %40 = fmul fast float %34, %2
  %41 = fmul fast float %23, %2
  %42 = fmul fast float %29, %2
  %43 = fmul fast float %35, %2
  %44 = fmul fast float %24, %2
  %45 = fmul fast float %30, %2
  %46 = fmul fast float %36, %2
  %47 = fmul fast float %25, %2
  %48 = fmul fast float %31, %2
  %49 = fmul fast float %37, %2
  %50 = fmul fast float %38, %9
  %51 = call float @dx.op.tertiary.f32(i32 46, float %10, float %41, float %50)  ; FMad(a,b,c)
  %52 = call float @dx.op.tertiary.f32(i32 46, float %11, float %44, float %51)  ; FMad(a,b,c)
  %53 = call float @dx.op.tertiary.f32(i32 46, float %12, float %47, float %52)  ; FMad(a,b,c)
  %54 = fmul fast float %39, %9
  %55 = call float @dx.op.tertiary.f32(i32 46, float %10, float %42, float %54)  ; FMad(a,b,c)
  %56 = call float @dx.op.tertiary.f32(i32 46, float %11, float %45, float %55)  ; FMad(a,b,c)
  %57 = call float @dx.op.tertiary.f32(i32 46, float %12, float %48, float %56)  ; FMad(a,b,c)
  %58 = fmul fast float %40, %9
  %59 = call float @dx.op.tertiary.f32(i32 46, float %10, float %43, float %58)  ; FMad(a,b,c)
  %60 = call float @dx.op.tertiary.f32(i32 46, float %11, float %46, float %59)  ; FMad(a,b,c)
  %61 = call float @dx.op.tertiary.f32(i32 46, float %12, float %49, float %60)  ; FMad(a,b,c)
  %62 = fmul fast float %38, %16
  %63 = call float @dx.op.tertiary.f32(i32 46, float %17, float %41, float %62)  ; FMad(a,b,c)
  %64 = call float @dx.op.tertiary.f32(i32 46, float %18, float %44, float %63)  ; FMad(a,b,c)
  %65 = fmul fast float %39, %16
  %66 = call float @dx.op.tertiary.f32(i32 46, float %17, float %42, float %65)  ; FMad(a,b,c)
  %67 = call float @dx.op.tertiary.f32(i32 46, float %18, float %45, float %66)  ; FMad(a,b,c)
  %68 = fmul fast float %40, %16
  %69 = call float @dx.op.tertiary.f32(i32 46, float %17, float %43, float %68)  ; FMad(a,b,c)
  %70 = call float @dx.op.tertiary.f32(i32 46, float %18, float %46, float %69)  ; FMad(a,b,c)
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = extractvalue %dx.types.CBufRet.f32 %71, 3
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = extractvalue %dx.types.CBufRet.f32 %76, 3
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.f32 %81, 1
  %84 = extractvalue %dx.types.CBufRet.f32 %81, 2
  %85 = extractvalue %dx.types.CBufRet.f32 %81, 3
  %86 = fmul fast float %72, %53
  %87 = call float @dx.op.tertiary.f32(i32 46, float %57, float %73, float %86)  ; FMad(a,b,c)
  %88 = call float @dx.op.tertiary.f32(i32 46, float %61, float %74, float %87)  ; FMad(a,b,c)
  %89 = call float @dx.op.tertiary.f32(i32 46, float %12, float %75, float %88)  ; FMad(a,b,c)
  %90 = fmul fast float %77, %53
  %91 = call float @dx.op.tertiary.f32(i32 46, float %57, float %78, float %90)  ; FMad(a,b,c)
  %92 = call float @dx.op.tertiary.f32(i32 46, float %61, float %79, float %91)  ; FMad(a,b,c)
  %93 = call float @dx.op.tertiary.f32(i32 46, float %12, float %80, float %92)  ; FMad(a,b,c)
  %94 = fmul fast float %82, %53
  %95 = call float @dx.op.tertiary.f32(i32 46, float %57, float %83, float %94)  ; FMad(a,b,c)
  %96 = call float @dx.op.tertiary.f32(i32 46, float %61, float %84, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %12, float %85, float %96)  ; FMad(a,b,c)
  %98 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.f32 %98, 0
  %100 = extractvalue %dx.types.CBufRet.f32 %98, 1
  %101 = extractvalue %dx.types.CBufRet.f32 %98, 2
  %102 = fsub fast float %99, %89
  %103 = fsub fast float %100, %93
  %104 = fsub fast float %101, %97
  %105 = call float @dx.op.dot3.f32(i32 55, float %102, float %103, float %104, float %102, float %103, float %104)  ; Dot3(ax,ay,az,bx,by,bz)
  %106 = call float @dx.op.unary.f32(i32 25, float %105)  ; Rsqrt(value)
  %107 = fmul fast float %102, %106
  %108 = fmul fast float %103, %106
  %109 = fmul fast float %104, %106
  %110 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.f32 %110, 0
  %112 = extractvalue %dx.types.CBufRet.f32 %110, 1
  %113 = extractvalue %dx.types.CBufRet.f32 %110, 2
  %114 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %115 = extractvalue %dx.types.CBufRet.f32 %114, 0
  %116 = extractvalue %dx.types.CBufRet.f32 %114, 1
  %117 = extractvalue %dx.types.CBufRet.f32 %114, 2
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %120 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %121 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %122 = fmul fast float %111, %64
  %123 = call float @dx.op.tertiary.f32(i32 46, float %67, float %112, float %122)  ; FMad(a,b,c)
  %124 = call float @dx.op.tertiary.f32(i32 46, float %70, float %113, float %123)  ; FMad(a,b,c)
  %125 = fmul fast float %115, %64
  %126 = call float @dx.op.tertiary.f32(i32 46, float %67, float %116, float %125)  ; FMad(a,b,c)
  %127 = call float @dx.op.tertiary.f32(i32 46, float %70, float %117, float %126)  ; FMad(a,b,c)
  %128 = fmul fast float %119, %64
  %129 = call float @dx.op.tertiary.f32(i32 46, float %67, float %120, float %128)  ; FMad(a,b,c)
  %130 = call float @dx.op.tertiary.f32(i32 46, float %70, float %121, float %129)  ; FMad(a,b,c)
  %131 = call float @dx.op.dot3.f32(i32 55, float %124, float %127, float %130, float %124, float %127, float %130)  ; Dot3(ax,ay,az,bx,by,bz)
  %132 = call float @dx.op.unary.f32(i32 25, float %131)  ; Rsqrt(value)
  %133 = fmul fast float %132, %124
  %134 = fmul fast float %132, %127
  %135 = fmul fast float %132, %130
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 0
  %138 = extractvalue %dx.types.CBufRet.f32 %136, 1
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %142 = extractvalue %dx.types.CBufRet.f32 %140, 1
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.f32 %144, 0
  %146 = extractvalue %dx.types.CBufRet.f32 %144, 1
  %147 = extractvalue %dx.types.CBufRet.f32 %144, 2
  %148 = fsub fast float %107, %137
  %149 = fsub fast float %108, %138
  %150 = fsub fast float %109, %139
  %151 = call float @dx.op.dot3.f32(i32 55, float %148, float %149, float %150, float %148, float %149, float %150)  ; Dot3(ax,ay,az,bx,by,bz)
  %152 = call float @dx.op.unary.f32(i32 25, float %151)  ; Rsqrt(value)
  %153 = fmul fast float %152, %149
  %154 = fmul fast float %152, %150
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 0
  %161 = extractvalue %dx.types.CBufRet.f32 %159, 1
  %162 = extractvalue %dx.types.CBufRet.f32 %159, 2
  %163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.f32 %163, 0
  %165 = extractvalue %dx.types.CBufRet.f32 %163, 1
  %166 = extractvalue %dx.types.CBufRet.f32 %163, 2
  %167 = fsub fast float %107, %156
  %168 = fsub fast float %108, %157
  %169 = fsub fast float %109, %158
  %170 = call float @dx.op.dot3.f32(i32 55, float %167, float %168, float %169, float %167, float %168, float %169)  ; Dot3(ax,ay,az,bx,by,bz)
  %171 = call float @dx.op.unary.f32(i32 25, float %170)  ; Rsqrt(value)
  %172 = fmul fast float %171, %168
  %173 = fmul fast float %171, %169
  %174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.f32 %174, 0
  %176 = extractvalue %dx.types.CBufRet.f32 %174, 1
  %177 = extractvalue %dx.types.CBufRet.f32 %174, 2
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 0
  %180 = extractvalue %dx.types.CBufRet.f32 %178, 1
  %181 = extractvalue %dx.types.CBufRet.f32 %178, 2
  %182 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %183 = extractvalue %dx.types.CBufRet.f32 %182, 0
  %184 = extractvalue %dx.types.CBufRet.f32 %182, 1
  %185 = extractvalue %dx.types.CBufRet.f32 %182, 2
  %186 = fsub fast float %107, %175
  %187 = fsub fast float %108, %176
  %188 = fsub fast float %109, %177
  %189 = call float @dx.op.dot3.f32(i32 55, float %186, float %187, float %188, float %186, float %187, float %188)  ; Dot3(ax,ay,az,bx,by,bz)
  %190 = call float @dx.op.unary.f32(i32 25, float %189)  ; Rsqrt(value)
  %191 = fmul fast float %190, %187
  %192 = fmul fast float %190, %188
  %193 = fsub fast float -0.000000e+00, %138
  %194 = fsub fast float -0.000000e+00, %139
  %195 = fsub fast float -0.000000e+00, %157
  %196 = fsub fast float -0.000000e+00, %158
  %197 = fsub fast float -0.000000e+00, %176
  %198 = fsub fast float -0.000000e+00, %177
  %199 = fmul fast float %133, %137
  %200 = fsub fast float -0.000000e+00, %199
  %201 = call float @dx.op.tertiary.f32(i32 46, float %193, float %134, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %194, float %135, float %201)  ; FMad(a,b,c)
  %203 = fmul fast float %133, %156
  %204 = fsub fast float -0.000000e+00, %203
  %205 = call float @dx.op.tertiary.f32(i32 46, float %195, float %134, float %204)  ; FMad(a,b,c)
  %206 = call float @dx.op.tertiary.f32(i32 46, float %196, float %135, float %205)  ; FMad(a,b,c)
  %207 = fmul fast float %133, %175
  %208 = fsub fast float -0.000000e+00, %207
  %209 = call float @dx.op.tertiary.f32(i32 46, float %197, float %134, float %208)  ; FMad(a,b,c)
  %210 = call float @dx.op.tertiary.f32(i32 46, float %198, float %135, float %209)  ; FMad(a,b,c)
  %211 = fmul fast float %148, %133
  %212 = fmul fast float %211, %152
  %213 = call float @dx.op.tertiary.f32(i32 46, float %153, float %134, float %212)  ; FMad(a,b,c)
  %214 = call float @dx.op.tertiary.f32(i32 46, float %154, float %135, float %213)  ; FMad(a,b,c)
  %215 = fmul fast float %167, %133
  %216 = fmul fast float %215, %171
  %217 = call float @dx.op.tertiary.f32(i32 46, float %172, float %134, float %216)  ; FMad(a,b,c)
  %218 = call float @dx.op.tertiary.f32(i32 46, float %173, float %135, float %217)  ; FMad(a,b,c)
  %219 = fmul fast float %186, %133
  %220 = fmul fast float %219, %190
  %221 = call float @dx.op.tertiary.f32(i32 46, float %191, float %134, float %220)  ; FMad(a,b,c)
  %222 = call float @dx.op.tertiary.f32(i32 46, float %192, float %135, float %221)  ; FMad(a,b,c)
  %223 = fcmp fast olt float %202, 0.000000e+00
  %224 = fcmp fast olt float %206, 0.000000e+00
  %225 = fcmp fast olt float %210, 0.000000e+00
  %226 = select i1 %223, float 0.000000e+00, float 1.000000e+00
  %227 = select i1 %224, float 0.000000e+00, float 1.000000e+00
  %228 = select i1 %225, float 0.000000e+00, float 1.000000e+00
  %229 = fmul fast float %226, %202
  %230 = fmul fast float %227, %206
  %231 = fmul fast float %228, %210
  %232 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %233 = extractvalue %dx.types.CBufRet.f32 %232, 3
  %234 = call float @dx.op.binary.f32(i32 35, float %214, float 0.000000e+00)  ; FMax(a,b)
  %235 = call float @dx.op.binary.f32(i32 35, float %218, float 0.000000e+00)  ; FMax(a,b)
  %236 = call float @dx.op.binary.f32(i32 35, float %222, float 0.000000e+00)  ; FMax(a,b)
  %237 = fmul fast float %234, %226
  %238 = fmul fast float %235, %227
  %239 = fmul fast float %236, %228
  %240 = call float @dx.op.unary.f32(i32 23, float %237)  ; Log(value)
  %241 = call float @dx.op.unary.f32(i32 23, float %238)  ; Log(value)
  %242 = call float @dx.op.unary.f32(i32 23, float %239)  ; Log(value)
  %243 = fmul fast float %240, %233
  %244 = fmul fast float %241, %233
  %245 = fmul fast float %242, %233
  %246 = call float @dx.op.unary.f32(i32 21, float %243)  ; Exp(value)
  %247 = call float @dx.op.unary.f32(i32 21, float %244)  ; Exp(value)
  %248 = call float @dx.op.unary.f32(i32 21, float %245)  ; Exp(value)
  %249 = fmul fast float %246, %202
  %250 = fmul fast float %247, %206
  %251 = fmul fast float %248, %210
  %252 = fmul fast float %229, %141
  %253 = call float @dx.op.tertiary.f32(i32 46, float %230, float %160, float %252)  ; FMad(a,b,c)
  %254 = call float @dx.op.tertiary.f32(i32 46, float %231, float %179, float %253)  ; FMad(a,b,c)
  %255 = fmul fast float %229, %142
  %256 = call float @dx.op.tertiary.f32(i32 46, float %230, float %161, float %255)  ; FMad(a,b,c)
  %257 = call float @dx.op.tertiary.f32(i32 46, float %231, float %180, float %256)  ; FMad(a,b,c)
  %258 = fmul fast float %229, %143
  %259 = call float @dx.op.tertiary.f32(i32 46, float %230, float %162, float %258)  ; FMad(a,b,c)
  %260 = call float @dx.op.tertiary.f32(i32 46, float %231, float %181, float %259)  ; FMad(a,b,c)
  %261 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %262 = extractvalue %dx.types.CBufRet.f32 %261, 0
  %263 = extractvalue %dx.types.CBufRet.f32 %261, 1
  %264 = extractvalue %dx.types.CBufRet.f32 %261, 2
  %265 = fmul fast float %262, %254
  %266 = fmul fast float %263, %257
  %267 = fmul fast float %264, %260
  %268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %269 = extractvalue %dx.types.CBufRet.f32 %268, 0
  %270 = extractvalue %dx.types.CBufRet.f32 %268, 1
  %271 = extractvalue %dx.types.CBufRet.f32 %268, 2
  %272 = fadd fast float %265, %269
  %273 = fadd fast float %266, %270
  %274 = fadd fast float %267, %271
  %275 = fmul fast float %249, %145
  %276 = call float @dx.op.tertiary.f32(i32 46, float %250, float %164, float %275)  ; FMad(a,b,c)
  %277 = call float @dx.op.tertiary.f32(i32 46, float %251, float %183, float %276)  ; FMad(a,b,c)
  %278 = fmul fast float %249, %146
  %279 = call float @dx.op.tertiary.f32(i32 46, float %250, float %165, float %278)  ; FMad(a,b,c)
  %280 = call float @dx.op.tertiary.f32(i32 46, float %251, float %184, float %279)  ; FMad(a,b,c)
  %281 = fmul fast float %249, %147
  %282 = call float @dx.op.tertiary.f32(i32 46, float %250, float %166, float %281)  ; FMad(a,b,c)
  %283 = call float @dx.op.tertiary.f32(i32 46, float %251, float %185, float %282)  ; FMad(a,b,c)
  %284 = extractvalue %dx.types.CBufRet.f32 %232, 0
  %285 = extractvalue %dx.types.CBufRet.f32 %232, 1
  %286 = extractvalue %dx.types.CBufRet.f32 %232, 2
  %287 = fmul fast float %284, %277
  %288 = fmul fast float %285, %280
  %289 = fmul fast float %286, %283
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 0
  %292 = extractvalue %dx.types.CBufRet.f32 %290, 1
  %293 = extractvalue %dx.types.CBufRet.f32 %290, 2
  %294 = extractvalue %dx.types.CBufRet.f32 %290, 3
  %295 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %296 = extractvalue %dx.types.CBufRet.f32 %295, 0
  %297 = extractvalue %dx.types.CBufRet.f32 %295, 1
  %298 = extractvalue %dx.types.CBufRet.f32 %295, 2
  %299 = extractvalue %dx.types.CBufRet.f32 %295, 3
  %300 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %301 = extractvalue %dx.types.CBufRet.f32 %300, 0
  %302 = extractvalue %dx.types.CBufRet.f32 %300, 1
  %303 = extractvalue %dx.types.CBufRet.f32 %300, 2
  %304 = extractvalue %dx.types.CBufRet.f32 %300, 3
  %305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %306 = extractvalue %dx.types.CBufRet.f32 %305, 0
  %307 = extractvalue %dx.types.CBufRet.f32 %305, 1
  %308 = extractvalue %dx.types.CBufRet.f32 %305, 2
  %309 = extractvalue %dx.types.CBufRet.f32 %305, 3
  %310 = fmul fast float %291, %53
  %311 = call float @dx.op.tertiary.f32(i32 46, float %57, float %292, float %310)  ; FMad(a,b,c)
  %312 = call float @dx.op.tertiary.f32(i32 46, float %61, float %293, float %311)  ; FMad(a,b,c)
  %313 = call float @dx.op.tertiary.f32(i32 46, float %12, float %294, float %312)  ; FMad(a,b,c)
  %314 = fmul fast float %296, %53
  %315 = call float @dx.op.tertiary.f32(i32 46, float %57, float %297, float %314)  ; FMad(a,b,c)
  %316 = call float @dx.op.tertiary.f32(i32 46, float %61, float %298, float %315)  ; FMad(a,b,c)
  %317 = call float @dx.op.tertiary.f32(i32 46, float %12, float %299, float %316)  ; FMad(a,b,c)
  %318 = fmul fast float %301, %53
  %319 = call float @dx.op.tertiary.f32(i32 46, float %57, float %302, float %318)  ; FMad(a,b,c)
  %320 = call float @dx.op.tertiary.f32(i32 46, float %61, float %303, float %319)  ; FMad(a,b,c)
  %321 = call float @dx.op.tertiary.f32(i32 46, float %12, float %304, float %320)  ; FMad(a,b,c)
  %322 = fmul fast float %306, %53
  %323 = call float @dx.op.tertiary.f32(i32 46, float %57, float %307, float %322)  ; FMad(a,b,c)
  %324 = call float @dx.op.tertiary.f32(i32 46, float %61, float %308, float %323)  ; FMad(a,b,c)
  %325 = call float @dx.op.tertiary.f32(i32 46, float %12, float %309, float %324)  ; FMad(a,b,c)
  %326 = extractvalue %dx.types.CBufRet.f32 %261, 3
  %327 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %328 = extractvalue %dx.types.CBufRet.f32 %327, 0
  %329 = extractvalue %dx.types.CBufRet.f32 %327, 1
  %330 = extractvalue %dx.types.CBufRet.f32 %327, 2
  %331 = extractvalue %dx.types.CBufRet.f32 %327, 3
  %332 = call float @dx.op.dot4.f32(i32 56, float %53, float %57, float %61, float %12, float %328, float %329, float %330, float %331)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %333 = call float @dx.op.unary.f32(i32 7, float %332)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %313)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %317)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %321)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %325)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %272)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %273)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %274)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %326)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %287)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %288)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %289)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %333)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %4)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %dx.alignment.legacy.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 3872, null}
!7 = !{[22 x i32] [i32 20, i32 16, i32 61680, i32 61680, i32 61680, i32 61680, i32 119, i32 119, i32 119, i32 0, i32 256, i32 512, i32 0, i32 0, i32 61687, i32 0, i32 0, i32 0, i32 61687, i32 0, i32 0, i32 0]}
!8 = !{void ()* @VSSkinnedVertexLightingOneBoneBn, !"VSSkinnedVertexLightingOneBoneBn", !9, !4, null}
!9 = !{!10, !21, null}
!10 = !{!11, !14, !16, !18, !20}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !12, i8 0, i32 1, i8 4, i32 3, i8 0, !19}
!19 = !{i32 3, i32 1}
!20 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 4, i8 0, !19}
!21 = !{!22, !23, !25, !26}
!22 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!23 = !{i32 1, !"COLOR", i8 9, i8 0, !24, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!24 = !{i32 1}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 2, i8 0, !17}
!26 = !{i32 3, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 3, i8 0, !13}

#endif

const unsigned char SkinnedEffect_VSSkinnedVertexLightingOneBoneBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x5d, 0xb5, 0xce, 0xb4, 0x11, 0xda, 0x6d, 0x50,
  0x34, 0x4a, 0x91, 0xe3, 0x24, 0x52, 0x13, 0xce, 0x01, 0x00, 0x00, 0x00,
  0x7e, 0x16, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00,
  0x6e, 0x03, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x46, 0x04, 0x00, 0x00,
  0x62, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xdd, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e,
  0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x4f, 0x53, 0x47,
  0x31, 0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73,
  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0x80, 0x01,
  0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x05, 0x04,
  0x00, 0x05, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x53,
  0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e,
  0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49,
  0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49,
  0x47, 0x48, 0x54, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
  0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x42, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0,
  0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x77, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3b, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x53,
  0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
  0x5f, 0x56, 0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x56, 0x65,
  0x72, 0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
  0x4f, 0x6e, 0x65, 0x42, 0x6f, 0x6e, 0x65, 0x42, 0x6e, 0x2e, 0x70, 0x64,
  0x62, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x67, 0x50, 0x3d, 0xb3, 0x5d, 0x60, 0x5a, 0xf8, 0x49, 0xa1,
  0x38, 0x72, 0xb6, 0xcd, 0x8a, 0x10, 0x44, 0x58, 0x49, 0x4c, 0x14, 0x12,
  0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0x85, 0x04, 0x00, 0x00, 0x44, 0x58,
  0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xfc, 0x11,
  0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x7c, 0x04,
  0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00,
  0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10,
  0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04,
  0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10,
  0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90,
  0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48,
  0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83,
  0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02,
  0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30,
  0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c,
  0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x35, 0x00,
  0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23,
  0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c,
  0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xa0, 0xc1, 0x08, 0x40, 0x09,
  0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6,
  0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x82, 0x20, 0x88, 0x82, 0x20,
  0xa4, 0x18, 0x00, 0x41, 0x10, 0xc5, 0x40, 0x4a, 0x41, 0x06, 0x62, 0x18,
  0x86, 0x61, 0x18, 0x88, 0x29, 0xc3, 0x40, 0x0c, 0xe4, 0x14, 0x62, 0x20,
  0x86, 0x81, 0xa0, 0xa2, 0x0c, 0xc4, 0x30, 0x0c, 0xc3, 0x30, 0x0c, 0x03,
  0x49, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15,
  0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18, 0x86, 0x81, 0x8a, 0x7b,
  0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10, 0x68, 0x86, 0x85, 0x40,
  0x41, 0x55, 0x08, 0x8a, 0xb0, 0x08, 0xba, 0x4a, 0x31, 0x10, 0xc3, 0x30,
  0x50, 0x36, 0x47, 0x10, 0x14, 0xc3, 0x22, 0x0a, 0x82, 0xd8, 0x88, 0x1b,
  0x08, 0x18, 0x46, 0x20, 0x86, 0x61, 0x84, 0x61, 0xc8, 0x01, 0x30, 0x09,
  0xbe, 0x1c, 0xf8, 0x12, 0x69, 0x3c, 0x6f, 0xb8, 0x7c, 0x60, 0x41, 0x8c,
  0x86, 0x21, 0x9a, 0xc9, 0x5f, 0x08, 0x03, 0x10, 0x30, 0x3f, 0x05, 0x22,
  0x80, 0x21, 0x26, 0x22, 0x92, 0x90, 0xf3, 0x81, 0xe0, 0x10, 0x86, 0x21,
  0x08, 0x7e, 0x62, 0x28, 0x92, 0x54, 0xa6, 0x05, 0x01, 0x00, 0x13, 0x14,
  0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03,
  0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50,
  0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0,
  0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x07, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x8f, 0x04, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x19, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x38, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00,
  0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09,
  0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x14, 0x8a,
  0xa1, 0x80, 0x79, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a, 0x81, 0x8a,
  0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x82, 0x52, 0x20, 0x73, 0x06,
  0x80, 0xce, 0xb1, 0x2c, 0x0a, 0x82, 0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0x80,
  0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0xb8, 0x87, 0x7b, 0xb8, 0x07, 0x00, 0x44,
  0x40, 0x08, 0x00, 0xee, 0x93, 0x0f, 0x00, 0x00, 0xb8, 0x4f, 0x3e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x81, 0x00,
  0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18,
  0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73,
  0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91,
  0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31,
  0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x62, 0x99,
  0x20, 0x10, 0xcc, 0x06, 0x61, 0x20, 0x26, 0x08, 0x44, 0xb3, 0x41, 0x18,
  0x0c, 0x0a, 0x76, 0x73, 0x13, 0x04, 0xc2, 0xd9, 0x30, 0x20, 0x09, 0x31,
  0x41, 0x30, 0x83, 0x8d, 0xc0, 0x04, 0x81, 0x78, 0x36, 0x20, 0xc4, 0xc2,
  0x10, 0xc4, 0xd0, 0x00, 0x1b, 0x02, 0x67, 0x03, 0x01, 0x00, 0x0f, 0x30,
  0x41, 0x38, 0x03, 0x6e, 0x43, 0x10, 0x4d, 0x10, 0x04, 0x80, 0x60, 0x60,
  0x35, 0x35, 0xb5, 0x96, 0xe6, 0xe6, 0x56, 0x46, 0x66, 0x55, 0x26, 0x47,
  0x57, 0x86, 0xc7, 0x94, 0x76, 0x86, 0x46, 0x97, 0xe6, 0x76, 0xf6, 0xe4,
  0x56, 0x26, 0xf4, 0xe6, 0x56, 0x26, 0xe4, 0xc6, 0x65, 0xca, 0xea, 0x0b,
  0xea, 0x6d, 0x2e, 0x8d, 0x2e, 0xed, 0xcd, 0x6d, 0x82, 0x50, 0x54, 0x13,
  0x84, 0xc2, 0xda, 0x10, 0x10, 0x13, 0x84, 0xe2, 0x9a, 0x20, 0x10, 0xd0,
  0x04, 0x81, 0x88, 0x36, 0x08, 0xda, 0xb6, 0x61, 0x21, 0x2a, 0xeb, 0xc2,
  0xae, 0x21, 0x23, 0x2e, 0x8e, 0x86, 0xd3, 0x93, 0x54, 0x53, 0x10, 0xd3,
  0x04, 0xa1, 0xc0, 0x26, 0x08, 0x84, 0xb4, 0x41, 0xd0, 0xc0, 0x60, 0xc3,
  0x32, 0x78, 0xd6, 0x85, 0x5d, 0xc3, 0x37, 0x5c, 0x61, 0x30, 0x41, 0x20,
  0x26, 0x22, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x13, 0x84,
  0x22, 0xdb, 0x20, 0x68, 0xda, 0x86, 0x65, 0x0c, 0xc8, 0xc0, 0xba, 0xb0,
  0x6b, 0x28, 0x83, 0x31, 0xb8, 0xcc, 0x80, 0x8c, 0x10, 0x53, 0x91, 0x13,
  0x51, 0x92, 0x13, 0x51, 0xd2, 0x50, 0xd1, 0xd4, 0x04, 0xa1, 0xd0, 0x36,
  0x08, 0xda, 0xb0, 0x61, 0xd1, 0xd0, 0x20, 0x0d, 0x2e, 0xec, 0x1a, 0x32,
  0xed, 0x52, 0x83, 0x09, 0x02, 0x41, 0x71, 0x11, 0x62, 0x2a, 0x72, 0x22,
  0xba, 0x2a, 0x4a, 0x3a, 0x42, 0xa2, 0xda, 0xb0, 0xb0, 0x41, 0x1b, 0x58,
  0x17, 0x76, 0x0d, 0x19, 0x1b, 0x5c, 0x6a, 0xb0, 0xa1, 0xe8, 0xc4, 0xe0,
  0x0c, 0xd6, 0xc0, 0x0d, 0x58, 0x0c, 0x3d, 0x31, 0x3d, 0x49, 0x6d, 0x58,
  0x08, 0x38, 0xb0, 0x2e, 0xac, 0x0c, 0x86, 0x8c, 0xb8, 0xb8, 0x0d, 0xc1,
  0xb0, 0x61, 0x19, 0xe0, 0xc0, 0xba, 0xe4, 0xa0, 0x0c, 0x86, 0x6c, 0xb8,
  0xb8, 0x0d, 0xcb, 0x18, 0x90, 0x81, 0x75, 0x61, 0x65, 0x30, 0x94, 0xc1,
  0x18, 0x5c, 0x66, 0xb0, 0x61, 0xd1, 0x2a, 0xeb, 0xc3, 0xb2, 0x21, 0xd3,
  0x2e, 0x6e, 0x03, 0x11, 0x07, 0x73, 0x40, 0x07, 0x75, 0xb0, 0x61, 0x78,
  0x03, 0x3b, 0x00, 0x36, 0x14, 0x13, 0x75, 0x07, 0x10, 0x50, 0x85, 0x8d,
  0xcd, 0xae, 0xcd, 0x25, 0x8d, 0xac, 0xcc, 0x8d, 0x6e, 0x4a, 0x10, 0x54,
  0x21, 0xc3, 0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x9b, 0x12,
  0x10, 0x4d, 0xc8, 0xf0, 0x5c, 0xec, 0xc2, 0xd8, 0xec, 0xca, 0xe4, 0xa6,
  0x04, 0x46, 0x1d, 0x32, 0x3c, 0x97, 0x39, 0xb4, 0x30, 0xb2, 0x32, 0xb9,
  0xa6, 0x37, 0xb2, 0x32, 0xb6, 0x29, 0x41, 0x52, 0x86, 0x0c, 0xcf, 0x45,
  0xae, 0x6c, 0xee, 0xad, 0x4e, 0x6e, 0xac, 0x6c, 0x6e, 0x4a, 0xf0, 0xd4,
  0x21, 0xc3, 0x73, 0xb1, 0x4b, 0x2b, 0xbb, 0x4b, 0x22, 0x9b, 0xa2, 0x0b,
  0xa3, 0x2b, 0x9b, 0x12, 0x44, 0x75, 0xc8, 0xf0, 0x5c, 0xca, 0xdc, 0xe8,
  0xe4, 0xf2, 0xa0, 0xde, 0xd2, 0xdc, 0xe8, 0xe6, 0xa6, 0x04, 0x77, 0x00,
  0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08,
  0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38,
  0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71,
  0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c,
  0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d,
  0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d,
  0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07,
  0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87,
  0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30,
  0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10,
  0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66,
  0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c,
  0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07,
  0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87,
  0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05,
  0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87,
  0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0,
  0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca,
  0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38,
  0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c,
  0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07,
  0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3,
  0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00,
  0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce,
  0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde,
  0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2f, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x06, 0x2f, 0xcb, 0x2a, 0x48, 0xd3, 0x10, 0xc3,
  0x4b, 0x44, 0x13, 0x71, 0x95, 0x88, 0x71, 0x4c, 0x48, 0x63, 0xa0, 0x0d,
  0xb1, 0x39, 0x0d, 0xb1, 0x35, 0x66, 0x00, 0x0d, 0x97, 0xef, 0x3c, 0x7e,
  0x80, 0x34, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x1b, 0xc2, 0x36, 0x5c, 0xbe,
  0xf3, 0xf8, 0x42, 0x40, 0x15, 0x05, 0x11, 0x95, 0x0e, 0x30, 0x94, 0x84,
  0x01, 0x08, 0x98, 0x5f, 0xdc, 0xb6, 0x29, 0x48, 0xc3, 0xe5, 0x3b, 0x8f,
  0x2f, 0x44, 0x04, 0x30, 0x11, 0x21, 0xd0, 0x0c, 0x0b, 0x61, 0x04, 0xce,
  0x70, 0xf9, 0xce, 0xe3, 0x0f, 0xce, 0x74, 0xfb, 0xc5, 0x6d, 0xdb, 0x81,
  0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xe1, 0x7e, 0x71, 0xdb, 0x16,
  0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83, 0xd8, 0x3c, 0xd4,
  0xe4, 0x17, 0xb7, 0x6d, 0x02, 0xd3, 0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e,
  0x30, 0x88, 0xcd, 0x43, 0x4d, 0x3e, 0x72, 0xdb, 0x36, 0x50, 0x0d, 0x97,
  0xef, 0x3c, 0xbe, 0x34, 0x39, 0x11, 0x81, 0x52, 0xd3, 0x43, 0x4d, 0x7e,
  0x71, 0xdb, 0x96, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x44, 0x44, 0x13,
  0x02, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x15, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f,
  0x4f, 0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00, 0x00, 0x61, 0x20,
  0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xb4, 0x8d, 0x00, 0x50, 0x51, 0x02,
  0x44, 0x14, 0x5c, 0x71, 0x14, 0x4c, 0x71, 0x95, 0xdd, 0x0c, 0x40, 0xc9,
  0x94, 0x5b, 0xa9, 0x94, 0x4b, 0x19, 0x95, 0x5c, 0xd1, 0x94, 0x4d, 0xe1,
  0x14, 0x48, 0x89, 0x14, 0x46, 0x99, 0x14, 0x4a, 0x49, 0x14, 0x45, 0x41,
  0x94, 0x45, 0xb1, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x63,
  0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82,
  0x60, 0x30, 0x02, 0x30, 0x46, 0x00, 0x82, 0x20, 0x08, 0x82, 0x02, 0x00,
  0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xc0, 0xcd, 0xc1, 0x44,
  0x06, 0x71, 0x10, 0x07, 0x60, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x46, 0x1f, 0xa8, 0x81, 0x1a, 0xc8, 0x01, 0x1a, 0x68, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x80, 0xf4, 0xc1, 0x1a, 0xbc, 0xc1, 0x1c, 0xa4, 0xc1,
  0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1f, 0xb0, 0x41, 0x1b,
  0xd0, 0x81, 0x1a, 0x70, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x80,
  0x42, 0x1b, 0xb8, 0x41, 0x1d, 0x8c, 0x41, 0x37, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x46, 0x28, 0xb8, 0xc1, 0x1d, 0xd8, 0x01, 0x1b, 0x78, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x88, 0xc2, 0x1b, 0xe0, 0xc1, 0x1d,
  0x94, 0xc1, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x28, 0xc0,
  0x41, 0x1e, 0xe0, 0xc1, 0x1a, 0x80, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20,
  0x18, 0x18, 0xa4, 0x10, 0x07, 0x79, 0x90, 0x07, 0x6f, 0x10, 0x06, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x94, 0x82, 0x1c, 0xe8, 0x81, 0x1e,
  0xa0, 0x81, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x61, 0x0a,
  0x73, 0xb0, 0x07, 0x7b, 0xe0, 0x06, 0x63, 0x30, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0xc6, 0x29, 0xd0, 0x01, 0x1f, 0xf0, 0x01, 0x1c, 0x90, 0x81,
  0x1d, 0x8f, 0x7c, 0xec, 0x80, 0xe4, 0x63, 0x47, 0x24, 0x1f, 0x1b, 0x26,
  0xf8, 0xd8, 0x40, 0xc1, 0xc7, 0x86, 0x0a, 0x3e, 0x05, 0xfd, 0x81, 0x54,
  0x50, 0x06, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x57, 0x2a, 0xb8,
  0x01, 0x15, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c,
  0xc2, 0x68, 0x02, 0x31, 0xd4, 0xa1, 0x06, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0xd7, 0x2b, 0xd0, 0x81, 0x16, 0x8c, 0x26, 0x04, 0xc0, 0x68,
  0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x54, 0xf3, 0x06,
  0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x57, 0x2d, 0xe8, 0x01, 0x18,
  0x04, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x9a, 0x40, 0x0c, 0x06, 0x91, 0x81, 0x7c, 0x6c, 0x29, 0x03, 0xf9, 0x98,
  0x61, 0x06, 0xf2, 0x31, 0xe9, 0x0c, 0xe4, 0x63, 0x0d, 0x1a, 0xc8, 0xc7,
  0x90, 0x34, 0x90, 0x8f, 0x51, 0x6a, 0x20, 0x1f, 0x7b, 0xd6, 0x40, 0x3e,
  0xa6, 0xb0, 0x81, 0x7c, 0xcc, 0x6a, 0x03, 0xf9, 0x58, 0xe4, 0x06, 0xf2,
  0x31, 0xe6, 0x0d, 0xe4, 0x63, 0x4c, 0x1a, 0xc8, 0x67, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x32, 0x73, 0x68, 0x85, 0x34, 0x50, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xc8, 0xce, 0xc1, 0x15, 0xd2, 0x00, 0x09, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0x43, 0x87, 0x57, 0x48, 0x03, 0x23,
  0xb0, 0xa7, 0x0d, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99,
  0x3a, 0xc4, 0x42, 0x1b, 0x34, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x64, 0xeb, 0x20, 0x0b, 0x6d, 0xb0, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x90, 0xb1, 0xc3, 0x2c, 0xb4, 0x41, 0x12, 0x98, 0x14, 0x07, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xcc, 0x1d, 0x6a, 0x21, 0x0e,
  0xa0, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2, 0x77, 0xb0, 0x85,
  0x38, 0x70, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xe0, 0xe1,
  0x16, 0xe2, 0x80, 0x09, 0x0c, 0x73, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x26, 0x0f, 0xb9, 0xe0, 0x06, 0x56, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xd9, 0x3c, 0xe8, 0x82, 0x1b, 0x50, 0x81, 0x69,
  0x71, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xea, 0x81,
  0x17, 0xe2, 0x00, 0x0b, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xb3,
  0x87, 0x5e, 0x88, 0x03, 0x2b, 0x30, 0x8e, 0x0e, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x19, 0x3e, 0xfc, 0x02, 0x1d, 0x68, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xf9, 0x00, 0x0e, 0x74, 0x80, 0x05,
  0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0xed, 0x03, 0x38, 0x98, 0x82,
  0x3c, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2,
  0x68, 0x02, 0x31, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x05, 0x12,
  0xe5, 0xb0, 0x0a, 0xba, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x57, 0x49, 0xa8, 0x03, 0x2c, 0xf8, 0xc2, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83, 0x39, 0x61,
  0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x54, 0x22, 0x1e,
  0x3c, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6c, 0x25, 0xe4,
  0x61, 0x73, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x58, 0x62,
  0x1e, 0x5a, 0xc1, 0x09, 0xac, 0x29, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0xe6, 0x12, 0xf5, 0x20, 0x06, 0x4d, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xd9, 0x4b, 0xd8, 0xc3, 0xd7, 0x04, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x90, 0xc1, 0xc4, 0x3d, 0xc4, 0x42, 0x13, 0x18,
  0x93, 0x06, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x4c, 0x26,
  0xf2, 0xc1, 0x0c, 0x98, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2,
  0x99, 0xd0, 0x87, 0x31, 0x60, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xc8, 0x68, 0x62, 0x1f, 0x6a, 0x81, 0x09, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0xe0, 0xb2, 0x89, 0x7d, 0x08, 0x07, 0x77, 0x18, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x1b, 0x9a, 0xf8, 0xd8, 0xa0,
  0xc4, 0xc7, 0x86, 0x23, 0x3e, 0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xc0,
  0x84, 0xc5, 0x3f, 0x0c, 0x42, 0x30, 0x08, 0xc1, 0x88, 0x81, 0x01, 0x80,
  0x20, 0x18, 0x38, 0x61, 0x11, 0x12, 0x81, 0x15, 0x81, 0x7c, 0xac, 0x10,
  0xe4, 0x63, 0xc5, 0x20, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8,
  0xc4, 0xe2, 0x24, 0xda, 0x21, 0x1f, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41,
  0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2e,
  0xb3, 0x58, 0x89, 0x78, 0xe0, 0x87, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4b,
  0x2d, 0x5e, 0xa2, 0x1e, 0x56, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x6c, 0xd1, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0xe6, 0x16, 0x35, 0x81, 0x07, 0x4b, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0xd9, 0x5b, 0xd8, 0x84, 0x1d, 0x2c, 0x81, 0x29,
  0x7d, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xe2, 0x02,
  0x27, 0xf6, 0x40, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0x93,
  0x8b, 0x9c, 0xc8, 0x03, 0x25, 0xb0, 0x04, 0x14, 0xe4, 0x33, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x19, 0x5d, 0xec, 0x84, 0x1f, 0x24, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x75, 0xc1, 0x13, 0x7c, 0x90, 0x04,
  0x23, 0x06, 0x0b, 0x00, 0x82, 0x60, 0xc0, 0xec, 0x45, 0x4e, 0x1c, 0x44,
  0x70, 0x10, 0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x38, 0x7b, 0xb1,
  0x13, 0x81, 0x05, 0x89, 0x7c, 0x4c, 0x38, 0xe4, 0x63, 0x43, 0x21, 0x9f,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0xf8, 0x22, 0x2c, 0x4e, 0x82,
  0x2e, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2e, 0xd0, 0x28, 0x8b, 0x95, 0xd0,
  0x8b, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x8b, 0x34, 0xd2, 0xe2, 0x25, 0x72,
  0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x2c,
  0x0d, 0x96, 0xf8, 0x58, 0x1a, 0x2c, 0xf1, 0xb1, 0x34, 0x58, 0xe2, 0x33,
  0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0xcc, 0x6b, 0xb4, 0xc5, 0x20, 0x04,
  0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0xf3, 0x1a, 0x6f,
  0x11, 0x58, 0x40, 0xc8, 0xc7, 0x04, 0x42, 0x3e, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x70, 0xbd, 0x06, 0x5d, 0xe8, 0xc4, 0x68, 0x8c, 0x26, 0x04,
  0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x5c, 0xb3, 0x81, 0x17, 0x3e, 0x91, 0x1a, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00, 0x20,
  0x08, 0x06, 0xd7, 0x6d, 0xf0, 0x85, 0x58, 0xac, 0xc5, 0x68, 0x42, 0x00,
  0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x18, 0x1f, 0x2c, 0xf1, 0x31,
  0x3e, 0x58, 0xe2, 0x63, 0x7c, 0xb0, 0xc4, 0x67, 0xc4, 0x60, 0x01, 0x40,
  0x10, 0x0c, 0x18, 0xf1, 0x00, 0x8d, 0x41, 0x08, 0x06, 0x21, 0x18, 0x31,
  0x30, 0x00, 0x10, 0x04, 0x03, 0x47, 0x3c, 0x44, 0x23, 0xb0, 0x80, 0x90,
  0x8f, 0x09, 0x84, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x12,
  0x8f, 0xd3, 0x68, 0x8b, 0xde, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21,
  0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0xcc,
  0x63, 0x35, 0xe2, 0x22, 0x2f, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2e, 0xf5,
  0x78, 0x8d, 0xba, 0xe0, 0x8b, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82,
  0xd1, 0x84, 0x41, 0xb0, 0x57, 0x58, 0xe2, 0x63, 0xaf, 0xb0, 0xc4, 0xc7,
  0x5e, 0x61, 0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x30, 0xf5,
  0x31, 0x1b, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08,
  0x06, 0x4e, 0x7d, 0xd4, 0x46, 0x60, 0x01, 0x21, 0x1f, 0x13, 0x08, 0xf9,
  0x58, 0x68, 0xdc, 0x41, 0x7c, 0x4c, 0x34, 0xee, 0x20, 0x3e, 0x36, 0x1a,
  0x66, 0x10, 0x1f, 0x23, 0x0d, 0x33, 0x88, 0x8f, 0x95, 0x46, 0x15, 0x1f,
  0x33, 0x8d, 0x2a, 0x3e, 0x26, 0x0a, 0x7e, 0x20, 0x1f, 0x43, 0x8d, 0x20,
  0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xf1, 0xc7, 0x78, 0x20,
  0xa3, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xd6, 0x1f, 0xe4,
  0x81, 0x8c, 0x42, 0x60, 0xa6, 0xf0, 0x06, 0xf2, 0x31, 0xd6, 0x08, 0xe2,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0x88, 0x9c, 0x87, 0x72,
  0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x21, 0x82, 0x1e,
  0xca, 0x29, 0x04, 0xa6, 0x0a, 0x60, 0x20, 0x1f, 0x83, 0x8d, 0x20, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0x91, 0xc8, 0x7a, 0x30, 0xab,
  0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x56, 0x22, 0xec, 0xc1,
  0xac, 0x42, 0x60, 0x7f, 0xe0, 0x0a, 0xf2, 0xb1, 0x80, 0x0f, 0xe4, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0x8a, 0xbc, 0x07, 0x1f, 0xbc,
  0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x59, 0x8a, 0xc0, 0x07,
  0x1f, 0xbc, 0x42, 0x60, 0x70, 0x20, 0x0b, 0xf2, 0xb1, 0xa0, 0x0d, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19, 0x8b, 0xcc, 0x47, 0x1b,
  0xcc, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x59, 0x8b, 0xd0,
  0x47, 0x1b, 0xcc, 0x42, 0x60, 0x61, 0x60, 0x0b, 0xf2, 0xb1, 0xc0, 0x93,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x30, 0x72, 0x1f, 0xde,
  0x2d, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xc5, 0x08, 0x7e,
  0x78, 0xb7, 0x10, 0x0c, 0x47, 0x54, 0xe0, 0x41, 0x7c, 0xc3, 0x11, 0x52,
  0x78, 0x10, 0xdf, 0x70, 0xc4, 0x23, 0x1e, 0xc4, 0x37, 0xdd, 0x30, 0x1e,
  0xe6, 0x31, 0x4c, 0x37, 0x90, 0xc7, 0x79, 0x0c, 0xd3, 0x0d, 0xe5, 0x81,
  0x1e, 0x83, 0x0d, 0x9b, 0x7c, 0x6c, 0xc0, 0xe4, 0x63, 0x43, 0x25, 0x9f,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0x78, 0x24, 0x44, 0xce, 0x23,
  0x46, 0x46, 0x13, 0x82, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x20,
  0x30, 0xe9, 0x0f, 0x6a, 0x3d, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0x00,
  0x0a, 0x13, 0xff, 0x88, 0xd8, 0x63, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0x20, 0x31, 0xf9, 0x0f, 0xa7, 0x3d, 0x6c, 0x58, 0xe4, 0x63, 0xc3, 0x22,
  0x1f, 0x1b, 0x16, 0xf9, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x73,
  0x26, 0x24, 0x32, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x83, 0x26,
  0x25, 0x32, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0x81, 0x93, 0x26, 0x26,
  0x32, 0xd8, 0xa0, 0xc8, 0xc7, 0x86, 0x45, 0x3e, 0x36, 0x30, 0xf2, 0x19,
  0x31, 0x30, 0x00, 0x10, 0x04, 0x03, 0xa7, 0x4d, 0x56, 0x64, 0x18, 0x31,
  0x30, 0x00, 0x10, 0x04, 0x03, 0xc7, 0x4d, 0x58, 0x64, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x03, 0xe7, 0x4d, 0x5a, 0x64, 0xb0, 0xe1, 0x0d, 0xe4,
  0x63, 0x03, 0x1b, 0xc8, 0xc7, 0x86, 0x34, 0x90, 0x8f, 0x5d, 0xef, 0x20,
  0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xe0, 0xe4, 0x46, 0xae,
  0x5e, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0x8b, 0x13, 0x1c,
  0xb9, 0x56, 0x21, 0x30, 0x2d, 0x1e, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xd9, 0x9c, 0xe8, 0x88, 0xf6, 0x0b, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x64, 0x74, 0xb2, 0x23, 0x5a, 0x2b, 0x04, 0xd6, 0xcd,
  0x83, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xb3, 0x93, 0x1e,
  0xe9, 0xc2, 0x21, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xec, 0x4e,
  0x7c, 0xa4, 0x7b, 0x85, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae,
  0x3c, 0xf1, 0x11, 0x12, 0xa9, 0x93, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0xb0, 0x61, 0x91, 0x8f, 0x0d, 0x89, 0x7c, 0x6c,
  0x38, 0xe4, 0x33, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x17, 0xa8, 0x94,
  0xc9, 0x8a, 0xf4, 0xc9, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0xd8, 0x31, 0xc0, 0xc7, 0x8e, 0x01, 0x3e, 0x76, 0x0c, 0xf0,
  0x31, 0x4d, 0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd9,
  0xa9, 0xb8, 0x89, 0x06, 0x0f, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x64, 0xa8, 0xf2, 0x26, 0x9a, 0x2f, 0x04, 0xd6, 0x91, 0x84, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0x53, 0x95, 0x38, 0xe9, 0xe4, 0x21,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6c, 0x55, 0xe4, 0xa4, 0x03,
  0x87, 0xc0, 0xc0, 0xc0, 0x24, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x59, 0xab, 0xd0, 0x09, 0x18, 0xd0, 0x43, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x99, 0xab, 0xd4, 0x09, 0x18, 0x88, 0x43, 0x30, 0x9a,
  0x40, 0x07, 0xc0, 0x68, 0x42, 0x1d, 0x04, 0xa3, 0x09, 0x76, 0x20, 0xd8,
  0xa0, 0xc8, 0xc7, 0x06, 0x44, 0x3e, 0x36, 0x18, 0xf2, 0x19, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0xcb, 0x56, 0xf6, 0x24, 0x4c, 0xce, 0x64, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88,
  0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0x5d, 0x01, 0x15, 0x33,
  0xd9, 0x93, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0x18, 0x4d, 0x20, 0x86, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0xc0,
  0xa5, 0x54, 0xd6, 0xe4, 0x54, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08,
  0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46, 0x0c, 0x0e, 0x00, 0x04,
  0xc1, 0xe0, 0x2a, 0x17, 0x55, 0x81, 0x13, 0x54, 0x19, 0x4d, 0x08, 0x80,
  0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0xb0, 0x29,
  0x44, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99, 0xba, 0xc4,
  0x8a, 0x7f, 0x4c, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xeb,
  0x22, 0x2b, 0xfb, 0x31, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90,
  0xb1, 0xcb, 0xac, 0xb4, 0xc9, 0x14, 0x98, 0x54, 0x22, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0xcc, 0x5d, 0x6a, 0x45, 0x44, 0xa4, 0x60,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2, 0x77, 0xb1, 0x95, 0xff, 0x90,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xe0, 0xe5, 0x56, 0xe2,
  0x44, 0x0a, 0x2c, 0x4a, 0x11, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x41, 0x26, 0x2f, 0xb9, 0x62, 0x22, 0x51, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0xd9, 0xbc, 0xe8, 0xca, 0x88, 0x44, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x64, 0xf4, 0xb2, 0x2b, 0x75, 0x12, 0x05, 0x06, 0xb5,
  0x88, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xb3, 0x97, 0x5e,
  0x51, 0x11, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xec, 0x5e,
  0x7c, 0xe5, 0x44, 0xa0, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x32,
  0x7c, 0xf9, 0x95, 0x3c, 0x81, 0x82, 0xd1, 0x84, 0x50, 0x18, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xe0, 0xda, 0x17, 0x70, 0x31, 0x95, 0x71, 0x19,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04,
  0x62, 0x18, 0x31, 0x68, 0x00, 0x10, 0x04, 0x03, 0x29, 0x64, 0xd2, 0xe5,
  0x46, 0x66, 0xe4, 0x45, 0x40, 0x85, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00,
  0x40, 0x10, 0x0c, 0x1c, 0x92, 0xb9, 0x97, 0x60, 0xc4, 0x20, 0x01, 0x40,
  0x10, 0x0c, 0x94, 0x93, 0xe9, 0x17, 0x7d, 0xf1, 0x17, 0x7a, 0xa9, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x39, 0x99, 0x7e, 0xd1, 0x17, 0x7f,
  0x61, 0x97, 0x68, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x94, 0x93, 0xe9,
  0x17, 0x7d, 0xf1, 0x97, 0x78, 0x69, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x40, 0x39, 0x99, 0x7e, 0xd1, 0x17, 0x7f, 0x91, 0x97, 0x64, 0xc4, 0x20,
  0x01, 0x40, 0x10, 0x0c, 0x94, 0x93, 0xe9, 0x17, 0x7f, 0xf1, 0x17, 0x7a,
  0xf1, 0x83, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x4e, 0xa6, 0x5f,
  0xfc, 0xc5, 0x5f, 0xd8, 0xa5, 0x0f, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x40, 0x39, 0x99, 0x7e, 0xf1, 0x17, 0x7f, 0x89, 0x17, 0x3e, 0x18, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0xe5, 0x64, 0xfa, 0xc5, 0x5f, 0xfc, 0x45,
  0x5e, 0x90, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x4e, 0xa6, 0x5f,
  0xfe, 0xc5, 0x5f, 0xe8, 0xe5, 0x0d, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x40, 0x39, 0x99, 0x7e, 0xf9, 0x17, 0x7f, 0x61, 0x17, 0x37, 0x18, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0xe5, 0x64, 0xfa, 0xe5, 0x5f, 0xfc, 0x25,
  0x5e, 0xda, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x94, 0x93, 0xe9,
  0x97, 0x7f, 0xf1, 0x17, 0x79, 0x09, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1,
  0x40, 0x39, 0x99, 0x7e, 0xb9, 0x17, 0x7f, 0xa1, 0x17, 0x55, 0x19, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0xe5, 0x64, 0xfa, 0xe5, 0x5e, 0xfc, 0x85,
  0x5d, 0x52, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
