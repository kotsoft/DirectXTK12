#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; BLENDINDICES             0   xyzw        3     NONE    uint   x   
; BLENDWEIGHT              0   xyzw        4     NONE   float   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
; SV_Position              0   xyzw        4      POS   float   xyzw
;
; shader debug name: Compiled\SkinnedEffect_VSSkinnedPixelLightingOneBoneBn.pdb
; shader hash: 08727fa14e6f32076d2f0fdb457ba317
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [3872 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 20, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 8 }
;   output 1 depends on inputs: { 9 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 7 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 8 depends on inputs: { 4, 5, 6, 12, 16 }
;   output 9 depends on inputs: { 4, 5, 6, 12, 16 }
;   output 10 depends on inputs: { 4, 5, 6, 12, 16 }
;   output 16 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 17 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 18 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;   output 19 depends on inputs: { 0, 1, 2, 3, 12, 16 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.alignment.legacy.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [72 x [3 x <4 x float>]] }

define void @VSSkinnedPixelLightingOneBoneBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = fmul fast float %6, 2.000000e+00
  %14 = fmul fast float %7, 2.000000e+00
  %15 = fmul fast float %8, 2.000000e+00
  %16 = fadd fast float %13, -1.000000e+00
  %17 = fadd fast float %14, -1.000000e+00
  %18 = fadd fast float %15, -1.000000e+00
  %19 = mul i32 %3, 3
  %20 = add i32 %19, 26
  %21 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %20)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.f32 %21, 0
  %23 = extractvalue %dx.types.CBufRet.f32 %21, 1
  %24 = extractvalue %dx.types.CBufRet.f32 %21, 2
  %25 = extractvalue %dx.types.CBufRet.f32 %21, 3
  %26 = add i32 %19, 27
  %27 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %26)  ; CBufferLoadLegacy(handle,regIndex)
  %28 = extractvalue %dx.types.CBufRet.f32 %27, 0
  %29 = extractvalue %dx.types.CBufRet.f32 %27, 1
  %30 = extractvalue %dx.types.CBufRet.f32 %27, 2
  %31 = extractvalue %dx.types.CBufRet.f32 %27, 3
  %32 = add i32 %19, 28
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %32)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %36 = extractvalue %dx.types.CBufRet.f32 %33, 2
  %37 = extractvalue %dx.types.CBufRet.f32 %33, 3
  %38 = fmul fast float %22, %2
  %39 = fmul fast float %28, %2
  %40 = fmul fast float %34, %2
  %41 = fmul fast float %23, %2
  %42 = fmul fast float %29, %2
  %43 = fmul fast float %35, %2
  %44 = fmul fast float %24, %2
  %45 = fmul fast float %30, %2
  %46 = fmul fast float %36, %2
  %47 = fmul fast float %25, %2
  %48 = fmul fast float %31, %2
  %49 = fmul fast float %37, %2
  %50 = fmul fast float %38, %9
  %51 = call float @dx.op.tertiary.f32(i32 46, float %10, float %41, float %50)  ; FMad(a,b,c)
  %52 = call float @dx.op.tertiary.f32(i32 46, float %11, float %44, float %51)  ; FMad(a,b,c)
  %53 = call float @dx.op.tertiary.f32(i32 46, float %12, float %47, float %52)  ; FMad(a,b,c)
  %54 = fmul fast float %39, %9
  %55 = call float @dx.op.tertiary.f32(i32 46, float %10, float %42, float %54)  ; FMad(a,b,c)
  %56 = call float @dx.op.tertiary.f32(i32 46, float %11, float %45, float %55)  ; FMad(a,b,c)
  %57 = call float @dx.op.tertiary.f32(i32 46, float %12, float %48, float %56)  ; FMad(a,b,c)
  %58 = fmul fast float %40, %9
  %59 = call float @dx.op.tertiary.f32(i32 46, float %10, float %43, float %58)  ; FMad(a,b,c)
  %60 = call float @dx.op.tertiary.f32(i32 46, float %11, float %46, float %59)  ; FMad(a,b,c)
  %61 = call float @dx.op.tertiary.f32(i32 46, float %12, float %49, float %60)  ; FMad(a,b,c)
  %62 = fmul fast float %38, %16
  %63 = call float @dx.op.tertiary.f32(i32 46, float %17, float %41, float %62)  ; FMad(a,b,c)
  %64 = call float @dx.op.tertiary.f32(i32 46, float %18, float %44, float %63)  ; FMad(a,b,c)
  %65 = fmul fast float %39, %16
  %66 = call float @dx.op.tertiary.f32(i32 46, float %17, float %42, float %65)  ; FMad(a,b,c)
  %67 = call float @dx.op.tertiary.f32(i32 46, float %18, float %45, float %66)  ; FMad(a,b,c)
  %68 = fmul fast float %40, %16
  %69 = call float @dx.op.tertiary.f32(i32 46, float %17, float %43, float %68)  ; FMad(a,b,c)
  %70 = call float @dx.op.tertiary.f32(i32 46, float %18, float %46, float %69)  ; FMad(a,b,c)
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %74 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %75 = extractvalue %dx.types.CBufRet.f32 %71, 3
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = extractvalue %dx.types.CBufRet.f32 %76, 3
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.f32 %81, 1
  %84 = extractvalue %dx.types.CBufRet.f32 %81, 2
  %85 = extractvalue %dx.types.CBufRet.f32 %81, 3
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = extractvalue %dx.types.CBufRet.f32 %86, 3
  %91 = fmul fast float %72, %53
  %92 = call float @dx.op.tertiary.f32(i32 46, float %57, float %73, float %91)  ; FMad(a,b,c)
  %93 = call float @dx.op.tertiary.f32(i32 46, float %61, float %74, float %92)  ; FMad(a,b,c)
  %94 = call float @dx.op.tertiary.f32(i32 46, float %12, float %75, float %93)  ; FMad(a,b,c)
  %95 = fmul fast float %77, %53
  %96 = call float @dx.op.tertiary.f32(i32 46, float %57, float %78, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %61, float %79, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %12, float %80, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %82, %53
  %100 = call float @dx.op.tertiary.f32(i32 46, float %57, float %83, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %61, float %84, float %100)  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %12, float %85, float %101)  ; FMad(a,b,c)
  %103 = fmul fast float %87, %53
  %104 = call float @dx.op.tertiary.f32(i32 46, float %57, float %88, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %61, float %89, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %12, float %90, float %105)  ; FMad(a,b,c)
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = extractvalue %dx.types.CBufRet.f32 %107, 2
  %111 = extractvalue %dx.types.CBufRet.f32 %107, 3
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %114 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %115 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %116 = extractvalue %dx.types.CBufRet.f32 %112, 3
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = extractvalue %dx.types.CBufRet.f32 %117, 3
  %122 = fmul fast float %108, %53
  %123 = call float @dx.op.tertiary.f32(i32 46, float %57, float %109, float %122)  ; FMad(a,b,c)
  %124 = call float @dx.op.tertiary.f32(i32 46, float %61, float %110, float %123)  ; FMad(a,b,c)
  %125 = call float @dx.op.tertiary.f32(i32 46, float %12, float %111, float %124)  ; FMad(a,b,c)
  %126 = fmul fast float %113, %53
  %127 = call float @dx.op.tertiary.f32(i32 46, float %57, float %114, float %126)  ; FMad(a,b,c)
  %128 = call float @dx.op.tertiary.f32(i32 46, float %61, float %115, float %127)  ; FMad(a,b,c)
  %129 = call float @dx.op.tertiary.f32(i32 46, float %12, float %116, float %128)  ; FMad(a,b,c)
  %130 = fmul fast float %118, %53
  %131 = call float @dx.op.tertiary.f32(i32 46, float %57, float %119, float %130)  ; FMad(a,b,c)
  %132 = call float @dx.op.tertiary.f32(i32 46, float %61, float %120, float %131)  ; FMad(a,b,c)
  %133 = call float @dx.op.tertiary.f32(i32 46, float %12, float %121, float %132)  ; FMad(a,b,c)
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 0
  %136 = extractvalue %dx.types.CBufRet.f32 %134, 1
  %137 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %139 = extractvalue %dx.types.CBufRet.f32 %138, 0
  %140 = extractvalue %dx.types.CBufRet.f32 %138, 1
  %141 = extractvalue %dx.types.CBufRet.f32 %138, 2
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 0
  %144 = extractvalue %dx.types.CBufRet.f32 %142, 1
  %145 = extractvalue %dx.types.CBufRet.f32 %142, 2
  %146 = fmul fast float %135, %64
  %147 = call float @dx.op.tertiary.f32(i32 46, float %67, float %136, float %146)  ; FMad(a,b,c)
  %148 = call float @dx.op.tertiary.f32(i32 46, float %70, float %137, float %147)  ; FMad(a,b,c)
  %149 = fmul fast float %139, %64
  %150 = call float @dx.op.tertiary.f32(i32 46, float %67, float %140, float %149)  ; FMad(a,b,c)
  %151 = call float @dx.op.tertiary.f32(i32 46, float %70, float %141, float %150)  ; FMad(a,b,c)
  %152 = fmul fast float %143, %64
  %153 = call float @dx.op.tertiary.f32(i32 46, float %67, float %144, float %152)  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %70, float %145, float %153)  ; FMad(a,b,c)
  %155 = call float @dx.op.dot3.f32(i32 55, float %148, float %151, float %154, float %148, float %151, float %154)  ; Dot3(ax,ay,az,bx,by,bz)
  %156 = call float @dx.op.unary.f32(i32 25, float %155)  ; Rsqrt(value)
  %157 = fmul fast float %156, %148
  %158 = fmul fast float %156, %151
  %159 = fmul fast float %156, %154
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = extractvalue %dx.types.CBufRet.f32 %160, 3
  %165 = call float @dx.op.dot4.f32(i32 56, float %53, float %57, float %61, float %12, float %161, float %162, float %163, float %164)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %166 = call float @dx.op.unary.f32(i32 7, float %165)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %94)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %98)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %102)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %106)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %125)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %129)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %133)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %166)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %157)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %158)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %159)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  %167 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %168 = extractvalue %dx.types.CBufRet.f32 %167, 3
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %168)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %4)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %5)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %dx.alignment.legacy.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 3872, null}
!7 = !{[22 x i32] [i32 20, i32 20, i32 983280, i32 983280, i32 983280, i32 983280, i32 1792, i32 1792, i32 1792, i32 0, i32 1, i32 2, i32 0, i32 0, i32 985072, i32 0, i32 0, i32 0, i32 985072, i32 0, i32 0, i32 0]}
!8 = !{void ()* @VSSkinnedPixelLightingOneBoneBn, !"VSSkinnedPixelLightingOneBoneBn", !9, !4, null}
!9 = !{!10, !21, null}
!10 = !{!11, !14, !16, !18, !20}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !12, i8 0, i32 1, i8 4, i32 3, i8 0, !19}
!19 = !{i32 3, i32 1}
!20 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 4, i8 0, !19}
!21 = !{!22, !23, !25, !27, !28}
!22 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 0, i8 0, !17}
!23 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !24, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!24 = !{i32 1}
!25 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !26, i8 2, i32 1, i8 3, i32 2, i8 0, !15}
!26 = !{i32 2}
!27 = !{i32 3, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 3, i8 0, !13}
!28 = !{i32 4, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 4, i8 0, !13}

#endif

const unsigned char SkinnedEffect_VSSkinnedPixelLightingOneBoneBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x20, 0xba, 0xf8, 0xf4, 0x4d, 0xd2, 0x66, 0x37,
  0x3d, 0x94, 0x44, 0xaa, 0xae, 0x72, 0x5b, 0x61, 0x01, 0x00, 0x00, 0x00,
  0x6a, 0x12, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00,
  0xba, 0x03, 0x00, 0x00, 0x4a, 0x04, 0x00, 0x00, 0x92, 0x04, 0x00, 0x00,
  0xae, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xdd, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e,
  0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x4f, 0x53, 0x47,
  0x31, 0xd5, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
  0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0xa0, 0x01, 0x00, 0x00, 0x24, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x05, 0x05, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f,
  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
  0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42,
  0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00,
  0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
  0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x48, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x04, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0xf0, 0x00,
  0x0f, 0x00, 0xf0, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0x0f, 0x00, 0xf0, 0x00,
  0x0f, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07,
  0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0x07, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x88, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1d, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
  0x65, 0x64, 0x5c, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x66,
  0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e,
  0x65, 0x64, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74,
  0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x65, 0x42, 0x6f, 0x6e, 0x65, 0x42, 0x6e,
  0x2e, 0x70, 0x64, 0x62, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x72, 0x7f, 0xa1, 0x4e, 0x6f,
  0x32, 0x07, 0x6d, 0x2f, 0x0f, 0xdb, 0x45, 0x7b, 0xa3, 0x17, 0x44, 0x58,
  0x49, 0x4c, 0xb4, 0x0d, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0x6d, 0x03,
  0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x9c, 0x0d, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c,
  0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8,
  0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05,
  0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92,
  0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32,
  0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19,
  0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51,
  0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff,
  0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff,
  0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09,
  0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82,
  0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20,
  0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64,
  0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1,
  0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x98,
  0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60,
  0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x82,
  0x20, 0x88, 0x82, 0x20, 0xa4, 0x18, 0x00, 0x41, 0x10, 0xc5, 0x40, 0x4a,
  0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x88, 0x29, 0xc3, 0x40, 0x0c,
  0xe4, 0x14, 0x65, 0x20, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x08, 0x3a,
  0x6a, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58, 0x89,
  0xc9, 0x2f, 0x6e, 0x1b, 0x11, 0xc3, 0x30, 0x0c, 0x54, 0xdc, 0x33, 0x5c,
  0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x87, 0x40, 0x33, 0x2c, 0x04, 0x0a, 0xa6,
  0x42, 0x48, 0x04, 0x45, 0x50, 0x55, 0x8a, 0x81, 0x18, 0x86, 0x81, 0xae,
  0x39, 0x82, 0xa0, 0x18, 0x14, 0x51, 0x10, 0x44, 0x46, 0xda, 0x40, 0xc0,
  0x30, 0x02, 0x31, 0x0c, 0x23, 0x0c, 0x43, 0x0e, 0x78, 0x49, 0xd0, 0xe5,
  0x40, 0x97, 0x48, 0xe1, 0x79, 0xc3, 0xe5, 0x03, 0x0b, 0x62, 0x34, 0x0c,
  0xd1, 0x4c, 0xfe, 0x42, 0x18, 0x80, 0x80, 0xf9, 0x29, 0x10, 0x01, 0x0c,
  0x31, 0x11, 0x91, 0x84, 0x9c, 0xce, 0xf3, 0x86, 0xef, 0xfb, 0x3c, 0xaf,
  0x03, 0x3f, 0x50, 0xa4, 0x31, 0x2d, 0x08, 0x00, 0x00, 0x00, 0x13, 0x14,
  0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03,
  0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50,
  0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0,
  0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x07, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x4f, 0x05, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x16, 0x00, 0x00, 0x00, 0x32, 0x1e,
  0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04,
  0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x14, 0x8a, 0xa1, 0x80, 0x79, 0xca,
  0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a, 0x81, 0x8a, 0x92, 0x18, 0x01, 0x28,
  0x84, 0x32, 0x28, 0x82, 0x52, 0x20, 0x72, 0x06, 0x80, 0xca, 0xb1, 0x2c,
  0x8a, 0x82, 0x4f, 0xd0, 0x83, 0x4f, 0xd0, 0x83, 0x4f, 0xd0, 0x83, 0x4f,
  0xd0, 0x03, 0xf1, 0x00, 0xc4, 0x03, 0x10, 0x0f, 0x80, 0x40, 0x00, 0x00,
  0xf8, 0x0f, 0x3d, 0x00, 0x00, 0xe0, 0x3f, 0xf4, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x1a, 0x03,
  0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b,
  0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9,
  0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a,
  0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63,
  0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x42, 0x99, 0x20, 0x10, 0xcb, 0x06,
  0x61, 0x20, 0x26, 0x08, 0x04, 0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73,
  0x13, 0x04, 0xa2, 0xd9, 0x30, 0x20, 0x09, 0x31, 0x41, 0x20, 0x03, 0x8d,
  0xc0, 0x04, 0x81, 0x70, 0x36, 0x20, 0xc4, 0xc2, 0x10, 0xc4, 0xd0, 0x00,
  0x1b, 0x02, 0x67, 0x03, 0x01, 0x00, 0x0f, 0x30, 0x41, 0x28, 0x83, 0x6d,
  0x43, 0x10, 0x4d, 0x10, 0x04, 0x80, 0x9f, 0xd5, 0xd4, 0xd4, 0x5a, 0x9a,
  0x9b, 0x5b, 0x19, 0x19, 0x54, 0x1a, 0x5e, 0x19, 0x1b, 0x53, 0xda, 0x19,
  0x1a, 0x5d, 0x9a, 0xdb, 0xd9, 0x93, 0x5b, 0x99, 0xd0, 0x9b, 0x5b, 0x99,
  0x90, 0x1b, 0x97, 0x29, 0xab, 0x2f, 0xa8, 0xb7, 0xb9, 0x34, 0xba, 0xb4,
  0x37, 0xb7, 0x09, 0x42, 0x41, 0x4d, 0x10, 0x8a, 0x6a, 0x43, 0x40, 0x4c,
  0x10, 0x0a, 0x6b, 0x82, 0x40, 0x3c, 0x13, 0x04, 0x02, 0xda, 0x20, 0x68,
  0xdb, 0x86, 0x85, 0xa8, 0xac, 0x0b, 0xbb, 0x86, 0x8c, 0xb8, 0x38, 0x1a,
  0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x13, 0x84, 0xe2, 0x9a, 0x20, 0x10,
  0xd1, 0x06, 0x41, 0x03, 0x83, 0x0d, 0xcb, 0xe0, 0x59, 0x17, 0x76, 0x0d,
  0xdf, 0x70, 0x85, 0xc1, 0x04, 0x81, 0x90, 0x88, 0x50, 0x15, 0x61, 0x0d,
  0x3d, 0x3d, 0x49, 0x11, 0x4d, 0x10, 0x0a, 0x6c, 0x83, 0xa0, 0x69, 0x1b,
  0x96, 0x31, 0x20, 0x03, 0xeb, 0xc2, 0xae, 0xa1, 0x0c, 0xc6, 0xe0, 0x32,
  0x03, 0x32, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49, 0x43,
  0x45, 0x53, 0x13, 0x84, 0x22, 0xdb, 0x20, 0x68, 0xc3, 0x86, 0x45, 0x43,
  0x83, 0x34, 0xb8, 0xb0, 0x6b, 0xc8, 0xb4, 0x4b, 0x0d, 0x26, 0x08, 0xc4,
  0xc4, 0x45, 0x88, 0xa9, 0xc8, 0x89, 0xe8, 0xaa, 0x28, 0xe9, 0x08, 0x89,
  0x6a, 0xc3, 0xc2, 0x06, 0x6d, 0x60, 0x5d, 0xd8, 0x35, 0x64, 0x6c, 0x70,
  0xa9, 0xc1, 0x86, 0xa2, 0x13, 0x83, 0x33, 0x58, 0x03, 0x37, 0xd8, 0xb0,
  0x10, 0x64, 0x60, 0x5d, 0x58, 0x19, 0x0c, 0x65, 0x40, 0x5c, 0x66, 0xb0,
  0x21, 0x18, 0x36, 0x2c, 0x03, 0x19, 0x58, 0x57, 0x1c, 0x94, 0xc1, 0x90,
  0x0d, 0x17, 0xb7, 0x21, 0x18, 0x83, 0x0d, 0xcb, 0x18, 0x90, 0x81, 0x75,
  0xcd, 0x41, 0x19, 0x0c, 0xdf, 0x18, 0x5c, 0x61, 0xc0, 0x62, 0xe8, 0x89,
  0xe9, 0x49, 0x6a, 0xc3, 0xa2, 0xd5, 0x81, 0x75, 0x61, 0x65, 0x30, 0x64,
  0xda, 0xc5, 0x6d, 0x58, 0xd8, 0xa0, 0xb2, 0x3e, 0x2c, 0x1b, 0x32, 0x36,
  0xb8, 0xb8, 0x0d, 0x05, 0x1c, 0xc8, 0x01, 0x1d, 0xd8, 0xc1, 0x1d, 0x6c,
  0x18, 0xde, 0x00, 0x0f, 0x80, 0x0d, 0xc5, 0x44, 0xe5, 0x01, 0x04, 0x54,
  0x61, 0x63, 0xb3, 0x6b, 0x73, 0x49, 0x23, 0x2b, 0x73, 0xa3, 0x9b, 0x12,
  0x04, 0x55, 0xc8, 0xf0, 0x5c, 0xec, 0xca, 0xe4, 0xe6, 0xd2, 0xde, 0xdc,
  0xa6, 0x04, 0x44, 0x13, 0x32, 0x3c, 0x17, 0xbb, 0x30, 0x36, 0xbb, 0x32,
  0xb9, 0x29, 0x81, 0x51, 0x87, 0x0c, 0xcf, 0x65, 0x0e, 0x2d, 0x8c, 0xac,
  0x4c, 0xae, 0xe9, 0x8d, 0xac, 0x8c, 0x6d, 0x4a, 0x90, 0x94, 0x21, 0xc3,
  0x73, 0x91, 0x2b, 0x9b, 0x7b, 0xab, 0x93, 0x1b, 0x2b, 0x9b, 0x9b, 0x12,
  0x3c, 0x75, 0xc8, 0xf0, 0x5c, 0xec, 0xd2, 0xca, 0xee, 0x92, 0xc8, 0xa6,
  0xe8, 0xc2, 0xe8, 0xca, 0xa6, 0x04, 0x51, 0x1d, 0x32, 0x3c, 0x97, 0x32,
  0x37, 0x3a, 0xb9, 0x3c, 0xa8, 0xb7, 0x34, 0x37, 0xba, 0xb9, 0x29, 0x41,
  0x1e, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08,
  0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38,
  0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71,
  0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c,
  0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d,
  0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d,
  0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07,
  0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87,
  0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30,
  0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10,
  0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66,
  0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c,
  0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07,
  0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87,
  0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05,
  0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87,
  0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0,
  0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca,
  0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38,
  0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c,
  0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07,
  0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3,
  0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00,
  0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce,
  0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde,
  0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2b, 0x00,
  0x00, 0x00, 0x06, 0xf0, 0xbd, 0x2c, 0xab, 0x20, 0x4d, 0x43, 0x0c, 0x29,
  0x72, 0x11, 0x4b, 0x89, 0x18, 0xc7, 0x84, 0x34, 0x06, 0xda, 0x10, 0x9b,
  0xd3, 0x10, 0x5b, 0x63, 0x07, 0xdb, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x01,
  0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50, 0x12, 0x06, 0x20, 0x60, 0x7e,
  0x71, 0xdb, 0x96, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x11, 0xc0,
  0x44, 0x84, 0x40, 0x33, 0x2c, 0x84, 0x11, 0x38, 0xc3, 0xe5, 0x3b, 0x8f,
  0x3f, 0x38, 0xd3, 0xed, 0x17, 0xb7, 0x6d, 0x06, 0xce, 0x70, 0xf9, 0xce,
  0xe3, 0x0f, 0xce, 0x84, 0xfb, 0xc5, 0x6d, 0x5b, 0xc0, 0x34, 0x5c, 0xbe,
  0xf3, 0xf8, 0x8b, 0x03, 0x0c, 0x62, 0xf3, 0x50, 0x93, 0x5f, 0xdc, 0xb6,
  0x09, 0x4c, 0xc3, 0xe5, 0x3b, 0x8f, 0xbf, 0x38, 0xc0, 0x20, 0x36, 0x0f,
  0x35, 0xf9, 0xc8, 0x6d, 0xdb, 0x40, 0x35, 0x5c, 0xbe, 0xf3, 0xf8, 0xd2,
  0xe4, 0x44, 0x04, 0x4a, 0x4d, 0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0x1b, 0x82,
  0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x13, 0x11, 0x4d, 0x08, 0x10, 0x61, 0x7e,
  0x71, 0xdb, 0x56, 0xf0, 0x0c, 0x97, 0xef, 0x3c, 0x3e, 0xd5, 0x00, 0x11,
  0xe6, 0x17, 0xb7, 0x0d, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0xa5, 0x01,
  0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x0f, 0x00,
  0x00, 0x00, 0x94, 0x8d, 0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x5c, 0x71,
  0x95, 0xdd, 0x0c, 0x40, 0xc9, 0x94, 0x5c, 0xd1, 0x94, 0x4d, 0xe1, 0x14,
  0x4b, 0xb9, 0x14, 0x4c, 0x81, 0x94, 0x48, 0x99, 0x14, 0x4a, 0xa9, 0x94,
  0x5b, 0x71, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x63, 0x04,
  0x20, 0x08, 0x82, 0xf8, 0x2f, 0x8c, 0x11, 0x80, 0x20, 0x08, 0x82, 0x60,
  0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0xa0, 0xad, 0x41, 0xc4,
  0xa5, 0x41, 0x1a, 0x60, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xd0,
  0x81, 0x18, 0x88, 0x81, 0x1a, 0x80, 0x01, 0x35, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0x08, 0x1d, 0x8c, 0xc1, 0x19, 0xac, 0x41, 0x18, 0x54, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xd8, 0x01, 0x19, 0x94, 0x01, 0x1b,
  0x88, 0x81, 0x35, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x1d, 0x94,
  0x81, 0x19, 0xb4, 0xc1, 0x76, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81,
  0x81, 0x07, 0x66, 0xf0, 0x06, 0x6e, 0x40, 0x06, 0xd8, 0x88, 0x41, 0x02,
  0x80, 0x20, 0x18, 0x18, 0x79, 0x70, 0x06, 0x70, 0xf0, 0x06, 0x5d, 0x36,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1e, 0xa0, 0x41, 0x1c, 0xc0,
  0xc1, 0x18, 0x68, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xec, 0x41,
  0x1a, 0xc4, 0x41, 0x1c, 0x9c, 0xc1, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0x06, 0x1f, 0xa8, 0x81, 0x1c, 0xc8, 0x01, 0x18, 0x70, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0x60, 0xf4, 0xc1, 0x1a, 0xcc, 0xc1, 0x1c, 0x98,
  0x41, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x86, 0x1f, 0xb0, 0x01,
  0x1d, 0xd0, 0x01, 0x1a, 0x78, 0x76, 0x34, 0xf2, 0xb1, 0xc3, 0x91, 0x8f,
  0x1d, 0x8f, 0x7c, 0x6c, 0x88, 0xe0, 0x63, 0x83, 0x04, 0x1f, 0x1b, 0x26,
  0xf8, 0x14, 0x74, 0x07, 0x52, 0xc1, 0x18, 0xc0, 0x88, 0xc1, 0x01, 0x80,
  0x20, 0x18, 0x54, 0xa1, 0x80, 0x06, 0x54, 0x30, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50, 0x07, 0x1a,
  0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0xa7, 0xe0, 0x06, 0x5a,
  0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3,
  0x09, 0xc4, 0x50, 0x4d, 0x1b, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x54, 0xad, 0x40, 0x07, 0x60, 0x10, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18, 0x44, 0x06, 0xf2,
  0xb1, 0xa5, 0x0c, 0xe4, 0x63, 0x86, 0x19, 0xc8, 0xc7, 0xa4, 0x33, 0x90,
  0x8f, 0x35, 0x68, 0x20, 0x1f, 0x43, 0xd2, 0x40, 0x3e, 0x46, 0xa9, 0x81,
  0x7c, 0xec, 0x59, 0x03, 0xf9, 0x98, 0xc2, 0x06, 0xf2, 0x31, 0xab, 0x0d,
  0xe4, 0x63, 0x91, 0x1b, 0xc8, 0xc7, 0x98, 0x37, 0x90, 0x8f, 0x31, 0x69,
  0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x7c, 0xe1, 0x14,
  0xd2, 0x40, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xfa, 0x05,
  0x54, 0x48, 0x03, 0x24, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x0b,
  0x1c, 0x52, 0x21, 0x0d, 0x8c, 0xc0, 0x9e, 0x36, 0x90, 0xcf, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x5c, 0xe2, 0xb0, 0x0a, 0x6d, 0xd0, 0x04, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0x8d, 0x03, 0x2b, 0xb4, 0xc1, 0x12,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x45, 0x0e, 0xad, 0xd0, 0x06,
  0x49, 0x60, 0x52, 0x1c, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c,
  0x2e, 0x73, 0x78, 0x85, 0x38, 0x80, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41,
  0x30, 0xb8, 0xce, 0x01, 0x16, 0xe2, 0xc0, 0x09, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0xe0, 0x42, 0x87, 0x58, 0x88, 0x03, 0x26, 0x30, 0xcc, 0x0d,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x3a, 0xcc, 0x82,
  0x1b, 0x58, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xeb, 0x40,
  0x0b, 0x6e, 0x40, 0x05, 0xa6, 0xc5, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0xe0, 0x6a, 0x07, 0x5b, 0x88, 0x03, 0x2c, 0x18, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0xcb, 0x1d, 0x6e, 0x21, 0x0e, 0xac, 0xc0, 0x38,
  0x3a, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xf0, 0x90,
  0x0b, 0x74, 0xa0, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xc5,
  0x83, 0x2e, 0xd0, 0x01, 0x16, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41,
  0x35, 0x0f, 0xba, 0x60, 0x0a, 0xb3, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x15, 0x3e, 0xfc, 0xc2, 0x2a, 0xdc, 0xc2, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0xfd, 0x40, 0x0e, 0xb0, 0xb0,
  0x0b, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30,
  0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0x89, 0x44,
  0x3a, 0xd4, 0xc2, 0x39, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c,
  0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0xd8, 0x64, 0x06, 0xf2, 0x19, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x24, 0xe0, 0x61, 0x0c, 0xa6, 0x60,
  0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x94, 0x88, 0x07, 0x30, 0x98,
  0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x52, 0x42, 0x1e, 0x64,
  0x61, 0x0a, 0x4c, 0x52, 0x03, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0xc1, 0xb5, 0x12, 0xf4, 0x70, 0x06, 0x52, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x17, 0x4b, 0xd4, 0x03, 0x19, 0x48, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x5c, 0x2d, 0x61, 0x0f, 0xb6, 0x20, 0x05, 0x16, 0xb9,
  0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x7a, 0x09, 0x7c,
  0x58, 0x83, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x0b, 0x26,
  0xf2, 0x01, 0x0d, 0xa2, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xae,
  0x98, 0xd0, 0x07, 0x5d, 0x88, 0x02, 0x83, 0xe4, 0x40, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x70, 0xcd, 0x04, 0x3f, 0xbc, 0x01, 0x14, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x45, 0x13, 0xfd, 0xc0, 0x06, 0x50,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x4d, 0xf8, 0x83, 0x2f,
  0x40, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0x37, 0xe1, 0x0f,
  0xea, 0xe0, 0x12, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50,
  0xf1, 0xc4, 0x48, 0xbc, 0x43, 0x3e, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x8c, 0x18, 0x1c, 0x00,
  0x08, 0x82, 0x41, 0x15, 0x16, 0x28, 0x41, 0x0f, 0xfd, 0x30, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60,
  0x4e, 0x29, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0xb3,
  0x78, 0x09, 0x51, 0x70, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8,
  0xce, 0x02, 0x26, 0xfe, 0xc0, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1,
  0xe0, 0x42, 0x8b, 0x98, 0x88, 0x07, 0x27, 0xb0, 0x26, 0x15, 0xe4, 0x33,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x5a, 0xcc, 0x84, 0x29, 0x34,
  0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x6b, 0x41, 0x13, 0xa3,
  0xd0, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xb1, 0x45, 0x4d,
  0xd4, 0x43, 0x13, 0x18, 0xd3, 0x0a, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10,
  0x04, 0x83, 0xcb, 0x2d, 0x6e, 0x42, 0x15, 0x98, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0xae, 0xb7, 0xc0, 0x89, 0x53, 0x60, 0x82, 0x11, 0x03,
  0x04, 0x00, 0x41, 0x30, 0xb8, 0xe0, 0x22, 0x27, 0xf2, 0x81, 0x09, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xa0, 0x92, 0x8b, 0x9c, 0x28, 0x89, 0x96,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xa8, 0xec, 0xa2, 0x27, 0x52, 0x02, 0x26,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0x2a, 0xbd, 0x08, 0x8b, 0x96, 0x98, 0x89,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x45,
  0x16, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x5f, 0x9c,
  0x05, 0x2c, 0x2c, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x7f,
  0x81, 0x16, 0xae, 0xb0, 0x04, 0xa6, 0xd4, 0x82, 0x7c, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0xe0, 0x0a, 0x0d, 0xb5, 0x98, 0x05, 0x25, 0x18, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0x4b, 0x34, 0xd6, 0x22, 0x16, 0x94, 0xc0,
  0x12, 0x5c, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0xa4,
  0xd1, 0x16, 0xb6, 0x90, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70,
  0x95, 0x86, 0x5b, 0xd0, 0x42, 0x12, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82,
  0x01, 0xa3, 0x1a, 0x3f, 0x71, 0x10, 0xc1, 0x41, 0x04, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xe0, 0xa8, 0x46, 0x5b, 0x04, 0x16, 0x24, 0xf2, 0x31,
  0xe1, 0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0xa0, 0x62, 0x8d, 0xb9, 0xf8, 0x89, 0xb1, 0x18, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04, 0x62, 0x18, 0x31, 0x68,
  0x00, 0x10, 0x04, 0x03, 0x48, 0x36, 0xf4, 0x02, 0x1e, 0xd8, 0x01, 0x1d,
  0x72, 0x82, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x1c,
  0xda, 0x40, 0x8d, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x94, 0xdb,
  0x70, 0x8d, 0xd3, 0x78, 0x8d, 0xd2, 0x48, 0x85, 0x11, 0x83, 0x04, 0x00,
  0x41, 0x30, 0x50, 0x6e, 0xc3, 0x35, 0x4e, 0xe3, 0x35, 0xfa, 0xa2, 0x14,
  0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0xb9, 0x0d, 0xd7, 0x38, 0x8d,
  0xd7, 0x10, 0x8d, 0x50, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xe5,
  0x36, 0x5c, 0xe3, 0x34, 0x5e, 0x63, 0x34, 0xfa, 0x60, 0xc4, 0x20, 0x01,
  0x40, 0x10, 0x0c, 0x94, 0xdb, 0x70, 0x0d, 0xd8, 0x78, 0x8d, 0xd2, 0x50,
  0x83, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x6e, 0xc3, 0x35, 0x60,
  0xe3, 0x35, 0xfa, 0xc2, 0x0c, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40,
  0xb9, 0x0d, 0xd7, 0x80, 0x8d, 0xd7, 0x10, 0x0d, 0x31, 0x18, 0x31, 0x48,
  0x00, 0x10, 0x04, 0x03, 0xe5, 0x36, 0x5c, 0x03, 0x36, 0x5e, 0x63, 0x34,
  0x82, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x6e, 0xc3, 0x35, 0x50,
  0xe3, 0x35, 0x4a, 0x43, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xe5,
  0x36, 0x5c, 0x03, 0x35, 0x5e, 0xa3, 0x2f, 0x92, 0x11, 0x83, 0x04, 0x00,
  0x41, 0x30, 0x50, 0x6e, 0xc3, 0x35, 0x50, 0xe3, 0x35, 0x44, 0x03, 0x19,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x6a, 0x36, 0xf4, 0xc2, 0x2c, 0x5e,
  0x63, 0x34, 0x21, 0x18, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0xc9,
  0x0d, 0xd8, 0x68, 0x8d, 0xd8, 0x38, 0x8d, 0xb5, 0x18, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0x25, 0x37, 0x60, 0xa3, 0x35, 0x62, 0xe3, 0x2f, 0xd6,
  0x62, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x94, 0xdc, 0x80, 0x8d, 0xd6,
  0x88, 0x0d, 0xd2, 0x58, 0x8b, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50,
  0x72, 0x03, 0x36, 0x5a, 0x23, 0x36, 0x4a, 0x23, 0x18, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0x25, 0x37, 0x60, 0x23, 0x36, 0x62, 0xe3, 0x34, 0xca,
  0x62, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x94, 0xdc, 0x80, 0x8d, 0xd8,
  0x88, 0x8d, 0xbf, 0x20, 0x0b, 0x04, 0x00, 0x00, 0x00, 0x00
};
