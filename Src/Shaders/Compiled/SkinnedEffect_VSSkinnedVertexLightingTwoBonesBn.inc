#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; BLENDINDICES             0   xyzw        3     NONE    uint   xy  
; BLENDWEIGHT              0   xyzw        4     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: Compiled\SkinnedEffect_VSSkinnedVertexLightingTwoBonesBn.pdb
; shader hash: 1cfa9cd4294a24427690a669afebddb5
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [3872 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 20, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 1 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 2 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 16, 17 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 16, 17 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 16, 17 }
;   output 7 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 13 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 14 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 15 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.alignment.legacy.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [72 x [3 x <4 x float>]] }

define void @VSSkinnedVertexLightingTwoBonesBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = fmul fast float %8, 2.000000e+00
  %16 = fmul fast float %9, 2.000000e+00
  %17 = fmul fast float %10, 2.000000e+00
  %18 = fadd fast float %15, -1.000000e+00
  %19 = fadd fast float %16, -1.000000e+00
  %20 = fadd fast float %17, -1.000000e+00
  %21 = mul i32 %4, 3
  %22 = add i32 %21, 26
  %23 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %22)  ; CBufferLoadLegacy(handle,regIndex)
  %24 = extractvalue %dx.types.CBufRet.f32 %23, 0
  %25 = extractvalue %dx.types.CBufRet.f32 %23, 1
  %26 = extractvalue %dx.types.CBufRet.f32 %23, 2
  %27 = extractvalue %dx.types.CBufRet.f32 %23, 3
  %28 = add i32 %21, 27
  %29 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %28)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.f32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.f32 %29, 1
  %32 = extractvalue %dx.types.CBufRet.f32 %29, 2
  %33 = extractvalue %dx.types.CBufRet.f32 %29, 3
  %34 = add i32 %21, 28
  %35 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %34)  ; CBufferLoadLegacy(handle,regIndex)
  %36 = extractvalue %dx.types.CBufRet.f32 %35, 0
  %37 = extractvalue %dx.types.CBufRet.f32 %35, 1
  %38 = extractvalue %dx.types.CBufRet.f32 %35, 2
  %39 = extractvalue %dx.types.CBufRet.f32 %35, 3
  %40 = fmul fast float %24, %2
  %41 = fmul fast float %30, %2
  %42 = fmul fast float %36, %2
  %43 = fmul fast float %25, %2
  %44 = fmul fast float %31, %2
  %45 = fmul fast float %37, %2
  %46 = fmul fast float %26, %2
  %47 = fmul fast float %32, %2
  %48 = fmul fast float %38, %2
  %49 = fmul fast float %27, %2
  %50 = fmul fast float %33, %2
  %51 = fmul fast float %39, %2
  %52 = mul i32 %5, 3
  %53 = add i32 %52, 26
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %53)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = extractvalue %dx.types.CBufRet.f32 %54, 3
  %59 = add i32 %52, 27
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %59)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %65 = add i32 %52, 28
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %65)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = extractvalue %dx.types.CBufRet.f32 %66, 3
  %71 = fmul fast float %55, %3
  %72 = fmul fast float %61, %3
  %73 = fmul fast float %67, %3
  %74 = fmul fast float %56, %3
  %75 = fmul fast float %62, %3
  %76 = fmul fast float %68, %3
  %77 = fmul fast float %57, %3
  %78 = fmul fast float %63, %3
  %79 = fmul fast float %69, %3
  %80 = fmul fast float %58, %3
  %81 = fmul fast float %64, %3
  %82 = fmul fast float %70, %3
  %83 = fadd fast float %71, %40
  %84 = fadd fast float %72, %41
  %85 = fadd fast float %73, %42
  %86 = fadd fast float %74, %43
  %87 = fadd fast float %75, %44
  %88 = fadd fast float %76, %45
  %89 = fadd fast float %77, %46
  %90 = fadd fast float %78, %47
  %91 = fadd fast float %79, %48
  %92 = fadd fast float %80, %49
  %93 = fadd fast float %81, %50
  %94 = fadd fast float %82, %51
  %95 = fmul fast float %83, %11
  %96 = call float @dx.op.tertiary.f32(i32 46, float %12, float %86, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %13, float %89, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %14, float %92, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %84, %11
  %100 = call float @dx.op.tertiary.f32(i32 46, float %12, float %87, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %13, float %90, float %100)  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %14, float %93, float %101)  ; FMad(a,b,c)
  %103 = fmul fast float %85, %11
  %104 = call float @dx.op.tertiary.f32(i32 46, float %12, float %88, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %13, float %91, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %14, float %94, float %105)  ; FMad(a,b,c)
  %107 = fmul fast float %83, %18
  %108 = call float @dx.op.tertiary.f32(i32 46, float %19, float %86, float %107)  ; FMad(a,b,c)
  %109 = call float @dx.op.tertiary.f32(i32 46, float %20, float %89, float %108)  ; FMad(a,b,c)
  %110 = fmul fast float %84, %18
  %111 = call float @dx.op.tertiary.f32(i32 46, float %19, float %87, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %20, float %90, float %111)  ; FMad(a,b,c)
  %113 = fmul fast float %85, %18
  %114 = call float @dx.op.tertiary.f32(i32 46, float %19, float %88, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %20, float %91, float %114)  ; FMad(a,b,c)
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = extractvalue %dx.types.CBufRet.f32 %116, 3
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = extractvalue %dx.types.CBufRet.f32 %121, 3
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %129 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %130 = extractvalue %dx.types.CBufRet.f32 %126, 3
  %131 = fmul fast float %117, %98
  %132 = call float @dx.op.tertiary.f32(i32 46, float %102, float %118, float %131)  ; FMad(a,b,c)
  %133 = call float @dx.op.tertiary.f32(i32 46, float %106, float %119, float %132)  ; FMad(a,b,c)
  %134 = call float @dx.op.tertiary.f32(i32 46, float %14, float %120, float %133)  ; FMad(a,b,c)
  %135 = fmul fast float %122, %98
  %136 = call float @dx.op.tertiary.f32(i32 46, float %102, float %123, float %135)  ; FMad(a,b,c)
  %137 = call float @dx.op.tertiary.f32(i32 46, float %106, float %124, float %136)  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %14, float %125, float %137)  ; FMad(a,b,c)
  %139 = fmul fast float %127, %98
  %140 = call float @dx.op.tertiary.f32(i32 46, float %102, float %128, float %139)  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %106, float %129, float %140)  ; FMad(a,b,c)
  %142 = call float @dx.op.tertiary.f32(i32 46, float %14, float %130, float %141)  ; FMad(a,b,c)
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %146 = extractvalue %dx.types.CBufRet.f32 %143, 2
  %147 = fsub fast float %144, %134
  %148 = fsub fast float %145, %138
  %149 = fsub fast float %146, %142
  %150 = call float @dx.op.dot3.f32(i32 55, float %147, float %148, float %149, float %147, float %148, float %149)  ; Dot3(ax,ay,az,bx,by,bz)
  %151 = call float @dx.op.unary.f32(i32 25, float %150)  ; Rsqrt(value)
  %152 = fmul fast float %147, %151
  %153 = fmul fast float %148, %151
  %154 = fmul fast float %149, %151
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 0
  %161 = extractvalue %dx.types.CBufRet.f32 %159, 1
  %162 = extractvalue %dx.types.CBufRet.f32 %159, 2
  %163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.f32 %163, 0
  %165 = extractvalue %dx.types.CBufRet.f32 %163, 1
  %166 = extractvalue %dx.types.CBufRet.f32 %163, 2
  %167 = fmul fast float %156, %109
  %168 = call float @dx.op.tertiary.f32(i32 46, float %112, float %157, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %115, float %158, float %168)  ; FMad(a,b,c)
  %170 = fmul fast float %160, %109
  %171 = call float @dx.op.tertiary.f32(i32 46, float %112, float %161, float %170)  ; FMad(a,b,c)
  %172 = call float @dx.op.tertiary.f32(i32 46, float %115, float %162, float %171)  ; FMad(a,b,c)
  %173 = fmul fast float %164, %109
  %174 = call float @dx.op.tertiary.f32(i32 46, float %112, float %165, float %173)  ; FMad(a,b,c)
  %175 = call float @dx.op.tertiary.f32(i32 46, float %115, float %166, float %174)  ; FMad(a,b,c)
  %176 = call float @dx.op.dot3.f32(i32 55, float %169, float %172, float %175, float %169, float %172, float %175)  ; Dot3(ax,ay,az,bx,by,bz)
  %177 = call float @dx.op.unary.f32(i32 25, float %176)  ; Rsqrt(value)
  %178 = fmul fast float %177, %169
  %179 = fmul fast float %177, %172
  %180 = fmul fast float %177, %175
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 0
  %183 = extractvalue %dx.types.CBufRet.f32 %181, 1
  %184 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %186 = extractvalue %dx.types.CBufRet.f32 %185, 0
  %187 = extractvalue %dx.types.CBufRet.f32 %185, 1
  %188 = extractvalue %dx.types.CBufRet.f32 %185, 2
  %189 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %190 = extractvalue %dx.types.CBufRet.f32 %189, 0
  %191 = extractvalue %dx.types.CBufRet.f32 %189, 1
  %192 = extractvalue %dx.types.CBufRet.f32 %189, 2
  %193 = fsub fast float %152, %182
  %194 = fsub fast float %153, %183
  %195 = fsub fast float %154, %184
  %196 = call float @dx.op.dot3.f32(i32 55, float %193, float %194, float %195, float %193, float %194, float %195)  ; Dot3(ax,ay,az,bx,by,bz)
  %197 = call float @dx.op.unary.f32(i32 25, float %196)  ; Rsqrt(value)
  %198 = fmul fast float %197, %194
  %199 = fmul fast float %197, %195
  %200 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %201 = extractvalue %dx.types.CBufRet.f32 %200, 0
  %202 = extractvalue %dx.types.CBufRet.f32 %200, 1
  %203 = extractvalue %dx.types.CBufRet.f32 %200, 2
  %204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %205 = extractvalue %dx.types.CBufRet.f32 %204, 0
  %206 = extractvalue %dx.types.CBufRet.f32 %204, 1
  %207 = extractvalue %dx.types.CBufRet.f32 %204, 2
  %208 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %209 = extractvalue %dx.types.CBufRet.f32 %208, 0
  %210 = extractvalue %dx.types.CBufRet.f32 %208, 1
  %211 = extractvalue %dx.types.CBufRet.f32 %208, 2
  %212 = fsub fast float %152, %201
  %213 = fsub fast float %153, %202
  %214 = fsub fast float %154, %203
  %215 = call float @dx.op.dot3.f32(i32 55, float %212, float %213, float %214, float %212, float %213, float %214)  ; Dot3(ax,ay,az,bx,by,bz)
  %216 = call float @dx.op.unary.f32(i32 25, float %215)  ; Rsqrt(value)
  %217 = fmul fast float %216, %213
  %218 = fmul fast float %216, %214
  %219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %220 = extractvalue %dx.types.CBufRet.f32 %219, 0
  %221 = extractvalue %dx.types.CBufRet.f32 %219, 1
  %222 = extractvalue %dx.types.CBufRet.f32 %219, 2
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 2
  %227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %228 = extractvalue %dx.types.CBufRet.f32 %227, 0
  %229 = extractvalue %dx.types.CBufRet.f32 %227, 1
  %230 = extractvalue %dx.types.CBufRet.f32 %227, 2
  %231 = fsub fast float %152, %220
  %232 = fsub fast float %153, %221
  %233 = fsub fast float %154, %222
  %234 = call float @dx.op.dot3.f32(i32 55, float %231, float %232, float %233, float %231, float %232, float %233)  ; Dot3(ax,ay,az,bx,by,bz)
  %235 = call float @dx.op.unary.f32(i32 25, float %234)  ; Rsqrt(value)
  %236 = fmul fast float %235, %232
  %237 = fmul fast float %235, %233
  %238 = fsub fast float -0.000000e+00, %183
  %239 = fsub fast float -0.000000e+00, %184
  %240 = fsub fast float -0.000000e+00, %202
  %241 = fsub fast float -0.000000e+00, %203
  %242 = fsub fast float -0.000000e+00, %221
  %243 = fsub fast float -0.000000e+00, %222
  %244 = fmul fast float %178, %182
  %245 = fsub fast float -0.000000e+00, %244
  %246 = call float @dx.op.tertiary.f32(i32 46, float %238, float %179, float %245)  ; FMad(a,b,c)
  %247 = call float @dx.op.tertiary.f32(i32 46, float %239, float %180, float %246)  ; FMad(a,b,c)
  %248 = fmul fast float %178, %201
  %249 = fsub fast float -0.000000e+00, %248
  %250 = call float @dx.op.tertiary.f32(i32 46, float %240, float %179, float %249)  ; FMad(a,b,c)
  %251 = call float @dx.op.tertiary.f32(i32 46, float %241, float %180, float %250)  ; FMad(a,b,c)
  %252 = fmul fast float %178, %220
  %253 = fsub fast float -0.000000e+00, %252
  %254 = call float @dx.op.tertiary.f32(i32 46, float %242, float %179, float %253)  ; FMad(a,b,c)
  %255 = call float @dx.op.tertiary.f32(i32 46, float %243, float %180, float %254)  ; FMad(a,b,c)
  %256 = fmul fast float %193, %178
  %257 = fmul fast float %256, %197
  %258 = call float @dx.op.tertiary.f32(i32 46, float %198, float %179, float %257)  ; FMad(a,b,c)
  %259 = call float @dx.op.tertiary.f32(i32 46, float %199, float %180, float %258)  ; FMad(a,b,c)
  %260 = fmul fast float %212, %178
  %261 = fmul fast float %260, %216
  %262 = call float @dx.op.tertiary.f32(i32 46, float %217, float %179, float %261)  ; FMad(a,b,c)
  %263 = call float @dx.op.tertiary.f32(i32 46, float %218, float %180, float %262)  ; FMad(a,b,c)
  %264 = fmul fast float %231, %178
  %265 = fmul fast float %264, %235
  %266 = call float @dx.op.tertiary.f32(i32 46, float %236, float %179, float %265)  ; FMad(a,b,c)
  %267 = call float @dx.op.tertiary.f32(i32 46, float %237, float %180, float %266)  ; FMad(a,b,c)
  %268 = fcmp fast olt float %247, 0.000000e+00
  %269 = fcmp fast olt float %251, 0.000000e+00
  %270 = fcmp fast olt float %255, 0.000000e+00
  %271 = select i1 %268, float 0.000000e+00, float 1.000000e+00
  %272 = select i1 %269, float 0.000000e+00, float 1.000000e+00
  %273 = select i1 %270, float 0.000000e+00, float 1.000000e+00
  %274 = fmul fast float %271, %247
  %275 = fmul fast float %272, %251
  %276 = fmul fast float %273, %255
  %277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %278 = extractvalue %dx.types.CBufRet.f32 %277, 3
  %279 = call float @dx.op.binary.f32(i32 35, float %259, float 0.000000e+00)  ; FMax(a,b)
  %280 = call float @dx.op.binary.f32(i32 35, float %263, float 0.000000e+00)  ; FMax(a,b)
  %281 = call float @dx.op.binary.f32(i32 35, float %267, float 0.000000e+00)  ; FMax(a,b)
  %282 = fmul fast float %279, %271
  %283 = fmul fast float %280, %272
  %284 = fmul fast float %281, %273
  %285 = call float @dx.op.unary.f32(i32 23, float %282)  ; Log(value)
  %286 = call float @dx.op.unary.f32(i32 23, float %283)  ; Log(value)
  %287 = call float @dx.op.unary.f32(i32 23, float %284)  ; Log(value)
  %288 = fmul fast float %285, %278
  %289 = fmul fast float %286, %278
  %290 = fmul fast float %287, %278
  %291 = call float @dx.op.unary.f32(i32 21, float %288)  ; Exp(value)
  %292 = call float @dx.op.unary.f32(i32 21, float %289)  ; Exp(value)
  %293 = call float @dx.op.unary.f32(i32 21, float %290)  ; Exp(value)
  %294 = fmul fast float %291, %247
  %295 = fmul fast float %292, %251
  %296 = fmul fast float %293, %255
  %297 = fmul fast float %274, %186
  %298 = call float @dx.op.tertiary.f32(i32 46, float %275, float %205, float %297)  ; FMad(a,b,c)
  %299 = call float @dx.op.tertiary.f32(i32 46, float %276, float %224, float %298)  ; FMad(a,b,c)
  %300 = fmul fast float %274, %187
  %301 = call float @dx.op.tertiary.f32(i32 46, float %275, float %206, float %300)  ; FMad(a,b,c)
  %302 = call float @dx.op.tertiary.f32(i32 46, float %276, float %225, float %301)  ; FMad(a,b,c)
  %303 = fmul fast float %274, %188
  %304 = call float @dx.op.tertiary.f32(i32 46, float %275, float %207, float %303)  ; FMad(a,b,c)
  %305 = call float @dx.op.tertiary.f32(i32 46, float %276, float %226, float %304)  ; FMad(a,b,c)
  %306 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %307 = extractvalue %dx.types.CBufRet.f32 %306, 0
  %308 = extractvalue %dx.types.CBufRet.f32 %306, 1
  %309 = extractvalue %dx.types.CBufRet.f32 %306, 2
  %310 = fmul fast float %307, %299
  %311 = fmul fast float %308, %302
  %312 = fmul fast float %309, %305
  %313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %314 = extractvalue %dx.types.CBufRet.f32 %313, 0
  %315 = extractvalue %dx.types.CBufRet.f32 %313, 1
  %316 = extractvalue %dx.types.CBufRet.f32 %313, 2
  %317 = fadd fast float %310, %314
  %318 = fadd fast float %311, %315
  %319 = fadd fast float %312, %316
  %320 = fmul fast float %294, %190
  %321 = call float @dx.op.tertiary.f32(i32 46, float %295, float %209, float %320)  ; FMad(a,b,c)
  %322 = call float @dx.op.tertiary.f32(i32 46, float %296, float %228, float %321)  ; FMad(a,b,c)
  %323 = fmul fast float %294, %191
  %324 = call float @dx.op.tertiary.f32(i32 46, float %295, float %210, float %323)  ; FMad(a,b,c)
  %325 = call float @dx.op.tertiary.f32(i32 46, float %296, float %229, float %324)  ; FMad(a,b,c)
  %326 = fmul fast float %294, %192
  %327 = call float @dx.op.tertiary.f32(i32 46, float %295, float %211, float %326)  ; FMad(a,b,c)
  %328 = call float @dx.op.tertiary.f32(i32 46, float %296, float %230, float %327)  ; FMad(a,b,c)
  %329 = extractvalue %dx.types.CBufRet.f32 %277, 0
  %330 = extractvalue %dx.types.CBufRet.f32 %277, 1
  %331 = extractvalue %dx.types.CBufRet.f32 %277, 2
  %332 = fmul fast float %329, %322
  %333 = fmul fast float %330, %325
  %334 = fmul fast float %331, %328
  %335 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %336 = extractvalue %dx.types.CBufRet.f32 %335, 0
  %337 = extractvalue %dx.types.CBufRet.f32 %335, 1
  %338 = extractvalue %dx.types.CBufRet.f32 %335, 2
  %339 = extractvalue %dx.types.CBufRet.f32 %335, 3
  %340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.f32 %340, 0
  %342 = extractvalue %dx.types.CBufRet.f32 %340, 1
  %343 = extractvalue %dx.types.CBufRet.f32 %340, 2
  %344 = extractvalue %dx.types.CBufRet.f32 %340, 3
  %345 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %346 = extractvalue %dx.types.CBufRet.f32 %345, 0
  %347 = extractvalue %dx.types.CBufRet.f32 %345, 1
  %348 = extractvalue %dx.types.CBufRet.f32 %345, 2
  %349 = extractvalue %dx.types.CBufRet.f32 %345, 3
  %350 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %351 = extractvalue %dx.types.CBufRet.f32 %350, 0
  %352 = extractvalue %dx.types.CBufRet.f32 %350, 1
  %353 = extractvalue %dx.types.CBufRet.f32 %350, 2
  %354 = extractvalue %dx.types.CBufRet.f32 %350, 3
  %355 = fmul fast float %336, %98
  %356 = call float @dx.op.tertiary.f32(i32 46, float %102, float %337, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %106, float %338, float %356)  ; FMad(a,b,c)
  %358 = call float @dx.op.tertiary.f32(i32 46, float %14, float %339, float %357)  ; FMad(a,b,c)
  %359 = fmul fast float %341, %98
  %360 = call float @dx.op.tertiary.f32(i32 46, float %102, float %342, float %359)  ; FMad(a,b,c)
  %361 = call float @dx.op.tertiary.f32(i32 46, float %106, float %343, float %360)  ; FMad(a,b,c)
  %362 = call float @dx.op.tertiary.f32(i32 46, float %14, float %344, float %361)  ; FMad(a,b,c)
  %363 = fmul fast float %346, %98
  %364 = call float @dx.op.tertiary.f32(i32 46, float %102, float %347, float %363)  ; FMad(a,b,c)
  %365 = call float @dx.op.tertiary.f32(i32 46, float %106, float %348, float %364)  ; FMad(a,b,c)
  %366 = call float @dx.op.tertiary.f32(i32 46, float %14, float %349, float %365)  ; FMad(a,b,c)
  %367 = fmul fast float %351, %98
  %368 = call float @dx.op.tertiary.f32(i32 46, float %102, float %352, float %367)  ; FMad(a,b,c)
  %369 = call float @dx.op.tertiary.f32(i32 46, float %106, float %353, float %368)  ; FMad(a,b,c)
  %370 = call float @dx.op.tertiary.f32(i32 46, float %14, float %354, float %369)  ; FMad(a,b,c)
  %371 = extractvalue %dx.types.CBufRet.f32 %306, 3
  %372 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %373 = extractvalue %dx.types.CBufRet.f32 %372, 0
  %374 = extractvalue %dx.types.CBufRet.f32 %372, 1
  %375 = extractvalue %dx.types.CBufRet.f32 %372, 2
  %376 = extractvalue %dx.types.CBufRet.f32 %372, 3
  %377 = call float @dx.op.dot4.f32(i32 56, float %98, float %102, float %106, float %14, float %373, float %374, float %375, float %376)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %378 = call float @dx.op.unary.f32(i32 7, float %377)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %358)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %362)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %366)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %370)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %317)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %318)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %319)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %371)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %332)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %333)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %334)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %378)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %dx.alignment.legacy.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 3872, null}
!7 = !{[22 x i32] [i32 20, i32 16, i32 61680, i32 61680, i32 61680, i32 61680, i32 119, i32 119, i32 119, i32 0, i32 256, i32 512, i32 0, i32 0, i32 61687, i32 61687, i32 0, i32 0, i32 61687, i32 61687, i32 0, i32 0]}
!8 = !{void ()* @VSSkinnedVertexLightingTwoBonesBn, !"VSSkinnedVertexLightingTwoBonesBn", !9, !4, null}
!9 = !{!10, !20, null}
!10 = !{!11, !14, !16, !18, !19}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !12, i8 0, i32 1, i8 4, i32 3, i8 0, !17}
!19 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 4, i8 0, !17}
!20 = !{!21, !22, !24, !25}
!21 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!22 = !{i32 1, !"COLOR", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!23 = !{i32 1}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 2, i8 0, !17}
!25 = !{i32 3, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 3, i8 0, !13}

#endif

const unsigned char SkinnedEffect_VSSkinnedVertexLightingTwoBonesBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x27, 0xf7, 0x7f, 0x81, 0x61, 0x06, 0xf1, 0x44,
  0x75, 0x66, 0x03, 0xce, 0xc6, 0x60, 0xb0, 0xde, 0x01, 0x00, 0x00, 0x00,
  0x62, 0x17, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00,
  0x6e, 0x03, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x4a, 0x04, 0x00, 0x00,
  0x66, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xdd, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e,
  0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x4f, 0x53, 0x47,
  0x31, 0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73,
  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0x80, 0x01,
  0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x05, 0x04,
  0x00, 0x05, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x53,
  0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e,
  0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49,
  0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49,
  0x47, 0x48, 0x54, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
  0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x42, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0,
  0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x77, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xf0,
  0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x53,
  0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
  0x5f, 0x56, 0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x56, 0x65,
  0x72, 0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
  0x54, 0x77, 0x6f, 0x42, 0x6f, 0x6e, 0x65, 0x73, 0x42, 0x6e, 0x2e, 0x70,
  0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xfa, 0x9c, 0xd4, 0x29, 0x4a,
  0x24, 0x42, 0x76, 0x90, 0xa6, 0x69, 0xaf, 0xeb, 0xdd, 0xb5, 0x44, 0x58,
  0x49, 0x4c, 0xf4, 0x12, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0xbd, 0x04,
  0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0xdc, 0x12, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c,
  0x00, 0x00, 0xb4, 0x04, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8,
  0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05,
  0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92,
  0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32,
  0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19,
  0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51,
  0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff,
  0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff,
  0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09,
  0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82,
  0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20,
  0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64,
  0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1,
  0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xa0,
  0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60,
  0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x82,
  0x20, 0x88, 0x82, 0x20, 0xa4, 0x18, 0x00, 0x41, 0x10, 0xc5, 0x40, 0x4a,
  0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x88, 0x29, 0xc3, 0x40, 0x0c,
  0xe4, 0x14, 0x62, 0x20, 0x86, 0x81, 0xa0, 0xa2, 0x0c, 0xc4, 0x30, 0x0c,
  0xc3, 0x30, 0x0c, 0x03, 0x49, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21,
  0xf9, 0xdc, 0x46, 0x15, 0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18,
  0x86, 0x81, 0x8a, 0x7b, 0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10,
  0x68, 0x86, 0x85, 0x40, 0x41, 0x55, 0x08, 0x8a, 0xb0, 0x08, 0xba, 0x4a,
  0x31, 0x10, 0xc3, 0x30, 0x50, 0x36, 0x47, 0x10, 0x14, 0xc3, 0x22, 0x0a,
  0x82, 0xd8, 0x88, 0x1b, 0x08, 0x18, 0x46, 0x20, 0x86, 0x61, 0x84, 0x61,
  0xc8, 0x01, 0x30, 0x09, 0xbe, 0x1c, 0xf8, 0x12, 0x69, 0x3c, 0x6f, 0xb8,
  0x7c, 0x60, 0x41, 0x8c, 0x86, 0x21, 0x9a, 0xc9, 0x5f, 0x08, 0x03, 0x10,
  0x30, 0x3f, 0x05, 0x22, 0x80, 0x21, 0x26, 0x22, 0x92, 0x90, 0xf3, 0x81,
  0xe0, 0x10, 0x86, 0x21, 0x08, 0x7e, 0x62, 0x28, 0x92, 0x54, 0xa6, 0x05,
  0x01, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68,
  0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d,
  0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d,
  0x90, 0x0e, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76,
  0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x6d, 0xe0, 0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06,
  0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79,
  0x10, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0xf2, 0x28, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xe4, 0x61, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x60, 0xc8, 0xe3, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x90, 0x07, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x21, 0x8f, 0x04, 0x04, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x19, 0x10, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x38, 0x20, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00,
  0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11,
  0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60,
  0x04, 0xa0, 0x14, 0x8a, 0xa1, 0x80, 0x79, 0xca, 0xa0, 0x3c, 0xca, 0xa1,
  0x08, 0x0a, 0x81, 0x8a, 0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x82,
  0x52, 0x20, 0x73, 0x06, 0x80, 0xce, 0xb1, 0x2c, 0x0a, 0x82, 0x4f, 0x3e,
  0x80, 0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0xb8, 0x87, 0x7b,
  0xb8, 0x07, 0x00, 0x44, 0x40, 0x08, 0x00, 0xee, 0x93, 0x0f, 0xee, 0x93,
  0x0f, 0x00, 0xe0, 0x3e, 0xf9, 0xe0, 0x3e, 0xf9, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x1a, 0x03,
  0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b,
  0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9,
  0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a,
  0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63,
  0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x62, 0x99, 0x20, 0x10, 0xcc, 0x06,
  0x61, 0x20, 0x26, 0x08, 0x44, 0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73,
  0x13, 0x04, 0xc2, 0xd9, 0x30, 0x20, 0x09, 0x31, 0x41, 0x30, 0x83, 0x8d,
  0xc0, 0x04, 0x81, 0x78, 0x36, 0x20, 0xc4, 0xc2, 0x10, 0xc4, 0xd0, 0x00,
  0x1b, 0x02, 0x67, 0x03, 0x01, 0x00, 0x0f, 0x30, 0x41, 0x38, 0x03, 0x6e,
  0x43, 0x10, 0x4d, 0x10, 0x04, 0x80, 0x61, 0x60, 0x35, 0x35, 0xb5, 0x96,
  0xe6, 0xe6, 0x56, 0x46, 0x66, 0x55, 0x26, 0x47, 0x57, 0x86, 0xc7, 0x94,
  0x76, 0x86, 0x46, 0x97, 0xe6, 0x76, 0x46, 0x75, 0xf7, 0x26, 0xf4, 0xe6,
  0x56, 0x36, 0x27, 0xe4, 0xc6, 0x65, 0xca, 0xea, 0x0b, 0xea, 0x6d, 0x2e,
  0x8d, 0x2e, 0xed, 0xcd, 0x6d, 0x82, 0x50, 0x54, 0x13, 0x84, 0xc2, 0xda,
  0x10, 0x10, 0x13, 0x84, 0xe2, 0x9a, 0x20, 0x10, 0xd0, 0x04, 0x81, 0x88,
  0x36, 0x08, 0xda, 0xb6, 0x61, 0x21, 0x2a, 0xeb, 0xc2, 0xae, 0x21, 0x23,
  0x2e, 0x8e, 0x86, 0xd3, 0x93, 0x54, 0x53, 0x10, 0xd3, 0x04, 0xa1, 0xc0,
  0x26, 0x08, 0x84, 0xb4, 0x41, 0xd0, 0xc0, 0x60, 0xc3, 0x32, 0x78, 0xd6,
  0x85, 0x5d, 0xc3, 0x37, 0x5c, 0x61, 0x30, 0x41, 0x20, 0x26, 0x22, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x13, 0x84, 0x22, 0xdb, 0x20,
  0x68, 0xda, 0x86, 0x65, 0x0c, 0xc8, 0xc0, 0xba, 0xb0, 0x6b, 0x28, 0x83,
  0x31, 0xb8, 0xcc, 0x80, 0x8c, 0x10, 0x53, 0x91, 0x13, 0x51, 0x92, 0x13,
  0x51, 0xd2, 0x50, 0xd1, 0xd4, 0x04, 0xa1, 0xd0, 0x36, 0x2c, 0x1a, 0x1a,
  0xa4, 0xc1, 0x85, 0x5d, 0x43, 0xa6, 0x5d, 0x66, 0x30, 0x41, 0x20, 0x28,
  0x2e, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54,
  0x1b, 0x96, 0x35, 0x60, 0x03, 0xeb, 0xc2, 0xae, 0x21, 0x5b, 0x83, 0xcb,
  0x0c, 0x36, 0x14, 0x9d, 0x18, 0x9c, 0x81, 0x1a, 0xb4, 0x01, 0x8b, 0xa1,
  0x27, 0xa6, 0x27, 0xa9, 0x0d, 0x0b, 0xf1, 0x06, 0xd6, 0x85, 0x95, 0xc1,
  0x90, 0x11, 0x17, 0xb7, 0x21, 0x18, 0x36, 0x2c, 0xc3, 0x1b, 0x58, 0x57,
  0x1c, 0x94, 0xc1, 0x90, 0x0d, 0x17, 0xb7, 0x61, 0x19, 0x03, 0x32, 0xb0,
  0x2e, 0xac, 0x0c, 0x86, 0x32, 0x18, 0x83, 0xcb, 0x0c, 0x36, 0x2c, 0x5a,
  0x65, 0x7d, 0x58, 0x36, 0x64, 0xda, 0xc5, 0x6d, 0x20, 0xe0, 0x40, 0x0e,
  0xe6, 0x80, 0x0e, 0x36, 0x0c, 0x6e, 0x50, 0x07, 0xc0, 0x86, 0x62, 0xa2,
  0xec, 0x00, 0x02, 0xaa, 0xb0, 0xb1, 0xd9, 0xb5, 0xb9, 0xa4, 0x91, 0x95,
  0xb9, 0xd1, 0x4d, 0x09, 0x82, 0x2a, 0x64, 0x78, 0x2e, 0x76, 0x65, 0x72,
  0x73, 0x69, 0x6f, 0x6e, 0x53, 0x02, 0xa2, 0x09, 0x19, 0x9e, 0x8b, 0x5d,
  0x18, 0x9b, 0x5d, 0x99, 0xdc, 0x94, 0xc0, 0xa8, 0x43, 0x86, 0xe7, 0x32,
  0x87, 0x16, 0x46, 0x56, 0x26, 0xd7, 0xf4, 0x46, 0x56, 0xc6, 0x36, 0x25,
  0x48, 0xca, 0x90, 0xe1, 0xb9, 0xc8, 0x95, 0xcd, 0xbd, 0xd5, 0xc9, 0x8d,
  0x95, 0xcd, 0x4d, 0x09, 0x9e, 0x3a, 0x64, 0x78, 0x2e, 0x76, 0x69, 0x65,
  0x77, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x82, 0xa8, 0x0e,
  0x19, 0x9e, 0x4b, 0x99, 0x1b, 0x9d, 0x5c, 0x1e, 0xd4, 0x5b, 0x9a, 0x1b,
  0xdd, 0xdc, 0x94, 0xc0, 0x0e, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00,
  0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01,
  0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78,
  0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4,
  0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c,
  0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03,
  0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70,
  0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70,
  0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec,
  0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0,
  0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d,
  0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43,
  0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0,
  0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68,
  0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28,
  0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08,
  0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee,
  0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62,
  0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06,
  0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3,
  0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3,
  0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80,
  0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec,
  0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d,
  0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d,
  0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20,
  0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x06, 0x10, 0x06, 0x2f, 0xcb, 0x2a,
  0x48, 0xd3, 0x10, 0xc3, 0x4b, 0x44, 0x13, 0x71, 0x95, 0x88, 0x71, 0x4c,
  0x48, 0x63, 0xb4, 0x96, 0xb3, 0x39, 0x0d, 0x21, 0x6d, 0x8d, 0x19, 0x40,
  0xc3, 0xe5, 0x3b, 0x8f, 0x1f, 0x20, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb,
  0x86, 0xb0, 0x0d, 0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44,
  0xa5, 0x03, 0x0c, 0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x0a,
  0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34,
  0xc3, 0x42, 0x18, 0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd,
  0x7e, 0x71, 0xdb, 0x76, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0, 0x4c,
  0xb8, 0x5f, 0xdc, 0xb6, 0x05, 0x4c, 0xc3, 0xe5, 0x3b, 0x8f, 0xbf, 0x38,
  0xc0, 0x20, 0x36, 0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0x9b, 0xc0, 0x34, 0x5c,
  0xbe, 0xf3, 0xf8, 0x8b, 0x03, 0x0c, 0x62, 0xf3, 0x50, 0x93, 0x8f, 0xdc,
  0xb6, 0x0d, 0x54, 0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0,
  0xd4, 0xf4, 0x50, 0x93, 0x5f, 0xdc, 0xb6, 0x25, 0x48, 0xc3, 0xe5, 0x3b,
  0x8f, 0x3f, 0x11, 0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x05,
  0xcf, 0x70, 0xf9, 0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb,
  0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x00, 0x13, 0x04,
  0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xb4, 0x8d,
  0x00, 0x50, 0x51, 0x02, 0x44, 0x14, 0x5c, 0x71, 0x14, 0x4c, 0x71, 0x95,
  0xdd, 0x0c, 0x40, 0xc9, 0x94, 0x5b, 0xa9, 0x94, 0x4b, 0x19, 0x15, 0x4d,
  0xd9, 0x14, 0x4e, 0xc9, 0x15, 0x48, 0x89, 0x14, 0x46, 0x99, 0x14, 0x4a,
  0x49, 0x14, 0x45, 0x41, 0x94, 0x45, 0xb1, 0xd0, 0x30, 0x46, 0x00, 0x82,
  0x20, 0x88, 0x7f, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f, 0x8c, 0x11,
  0x80, 0x20, 0x08, 0x82, 0x60, 0x30, 0x02, 0x30, 0x46, 0x00, 0x82, 0x20,
  0x08, 0x82, 0x02, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0xc0, 0xcd, 0x01, 0x44, 0x06, 0x71, 0x10, 0x07, 0x60, 0x30, 0x62, 0x90,
  0x00, 0x20, 0x08, 0x06, 0x46, 0x1f, 0xa8, 0x81, 0x1a, 0xc8, 0x01, 0x1a,
  0x68, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf8, 0xc1, 0x1a, 0xac,
  0xc1, 0x1c, 0x84, 0xc1, 0x36, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x88,
  0x1f, 0xb0, 0x01, 0x1c, 0xd0, 0x81, 0x1a, 0x70, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x80, 0xfc, 0x41, 0x1b, 0xc4, 0x41, 0x1d, 0x8c, 0x41, 0x37,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x28, 0xb8, 0xc1, 0x1b, 0xd8,
  0x01, 0x1b, 0x78, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x88, 0xc2,
  0x1b, 0xc0, 0xc1, 0x1d, 0x94, 0xc1, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08,
  0x06, 0xc6, 0x28, 0xc0, 0x41, 0x1e, 0xe0, 0x81, 0x1b, 0x80, 0xc1, 0x88,
  0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa4, 0x10, 0x07, 0x7a, 0x90, 0x07,
  0x67, 0x10, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x94, 0x82,
  0x1c, 0xec, 0x81, 0x1e, 0xb4, 0x81, 0x18, 0x8c, 0x18, 0x24, 0x00, 0x08,
  0x82, 0x81, 0x61, 0x0a, 0x73, 0xb0, 0x07, 0x7b, 0x10, 0x07, 0x63, 0x30,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x29, 0xd0, 0x01, 0x1f, 0xf0,
  0x81, 0x1a, 0x90, 0xc1, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0xa8,
  0x50, 0x07, 0x7d, 0xd0, 0x07, 0x70, 0x50, 0x06, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0xa4, 0x82, 0x1d, 0xf8, 0x81, 0x1f, 0xc8, 0x81, 0x19,
  0xd8, 0x11, 0xc9, 0xc7, 0x0e, 0x49, 0x3e, 0x76, 0x4c, 0xf2, 0xb1, 0xa1,
  0x82, 0x8f, 0x0d, 0x16, 0x7c, 0x6c, 0xb8, 0xe0, 0x53, 0x51, 0x28, 0x48,
  0x05, 0x68, 0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0xad, 0x02,
  0x1c, 0x58, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x26, 0x10, 0x43, 0x1d, 0x6d, 0x00, 0x23, 0x06, 0x07, 0x00,
  0x82, 0x60, 0x70, 0xc5, 0x82, 0x1d, 0x70, 0xc1, 0x68, 0x42, 0x00, 0x8c,
  0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x43, 0x35, 0x72,
  0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0xdd, 0x02, 0x1f, 0x88,
  0x41, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0xa3, 0x09, 0xc4, 0x60, 0x90, 0x19, 0xc8, 0xc7, 0x96, 0x33, 0x90, 0x8f,
  0x19, 0x68, 0x20, 0x1f, 0x93, 0xd2, 0x40, 0x3e, 0xd6, 0xa8, 0x81, 0x7c,
  0x0c, 0x59, 0x03, 0xf9, 0x18, 0xc5, 0x06, 0xf2, 0xb1, 0xa7, 0x0d, 0xe4,
  0x63, 0x8a, 0x1b, 0xc8, 0xc7, 0xac, 0x37, 0x90, 0x8f, 0x45, 0x70, 0x20,
  0x1f, 0x63, 0xe2, 0x40, 0x3e, 0xf5, 0x06, 0xe0, 0x20, 0x15, 0x9c, 0x02,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0xa5, 0x0e, 0xaf, 0x50, 0x07,
  0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c,
  0x26, 0x10, 0x43, 0x1d, 0xac, 0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x70, 0xc1, 0x43, 0x2d, 0xec, 0x41, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09,
  0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50, 0x4d, 0x2c, 0xc0,
  0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0xf6, 0xb0, 0x0b, 0xa1, 0x10,
  0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68,
  0x02, 0x31, 0x18, 0x44, 0x0a, 0xf2, 0xb1, 0xa5, 0x14, 0xe4, 0x63, 0x86,
  0x29, 0xc8, 0xc7, 0xa4, 0x53, 0x90, 0x8f, 0x35, 0xa8, 0x20, 0x1f, 0x43,
  0x52, 0x41, 0x3e, 0x46, 0xa9, 0x82, 0x7c, 0xec, 0x59, 0x05, 0xf9, 0x98,
  0xc2, 0x0a, 0xf2, 0x31, 0xab, 0x15, 0xe4, 0x63, 0x91, 0x2b, 0xc8, 0xc7,
  0x98, 0x57, 0x90, 0x8f, 0x31, 0x6b, 0x00, 0x1f, 0x63, 0xd6, 0x00, 0x3e,
  0xc6, 0xac, 0x01, 0x7c, 0x8c, 0x59, 0x03, 0xf8, 0x18, 0xb3, 0x06, 0xf0,
  0x31, 0x66, 0x0d, 0xe0, 0x63, 0xcc, 0x1a, 0xc0, 0xc7, 0x98, 0x35, 0x80,
  0x8f, 0x31, 0x6b, 0x00, 0x1f, 0x63, 0xd6, 0x00, 0x3e, 0xc6, 0xac, 0x01,
  0x7c, 0x8c, 0x59, 0x03, 0xf8, 0x18, 0x43, 0x0b, 0xf2, 0x19, 0x31, 0x40,
  0x00, 0x10, 0x04, 0x83, 0x6c, 0x26, 0xf4, 0x81, 0x16, 0x94, 0x60, 0xc4,
  0x00, 0x01, 0x40, 0x10, 0x0c, 0x32, 0x9a, 0xd8, 0x07, 0x5a, 0x40, 0x82,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x6a, 0x82, 0x1f, 0x68, 0xc1,
  0x08, 0xec, 0xc1, 0x05, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0x76, 0x13, 0xfe, 0x80, 0x0b, 0x4d, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x19, 0x4e, 0xfc, 0x03, 0x2e, 0x2c, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x64, 0x39, 0x01, 0x12, 0xb8, 0x90, 0x04, 0x26, 0xf1, 0x82,
  0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xdb, 0x09, 0x91, 0xe0,
  0x05, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x8c, 0x27, 0x46,
  0x82, 0x17, 0x9c, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2, 0x9e,
  0x20, 0x09, 0x5e, 0x60, 0x02, 0xc3, 0x72, 0x41, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x90, 0xfd, 0x84, 0x49, 0xe4, 0x82, 0x15, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0x06, 0x16, 0x27, 0x91, 0x0b, 0x54, 0x60,
  0x1a, 0x2f, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x32, 0xb1,
  0x48, 0x09, 0x5e, 0xc0, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8,
  0xc6, 0x42, 0x25, 0x78, 0xc1, 0x0a, 0x8c, 0xfb, 0x05, 0xf9, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0x56, 0x16, 0x2c, 0xf1, 0x0b, 0x5a, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99, 0x59, 0xb4, 0xc4, 0x2f, 0x60,
  0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0x68, 0xd1, 0x12, 0xf3,
  0xf0, 0x13, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83,
  0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0xb5,
  0x85, 0x4c, 0xe0, 0xc3, 0x49, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10,
  0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0xc1, 0x25, 0x17, 0x37, 0xd1, 0x0f, 0x2b, 0x31, 0x9a, 0x10, 0x00,
  0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60, 0x4e,
  0x18, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2, 0xbb, 0xf0,
  0x09, 0xcf, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xc3, 0x8b,
  0x9f, 0xd8, 0x9c, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2, 0xbc,
  0x00, 0x0b, 0x7c, 0x70, 0x02, 0x6b, 0xca, 0x40, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x90, 0xed, 0x85, 0x58, 0x88, 0x41, 0x13, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0xc6, 0x17, 0x63, 0xf1, 0x35, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x7d, 0x41, 0x16, 0xfc, 0xd0, 0x04,
  0xc6, 0xa4, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xfb,
  0x0b, 0xb3, 0x30, 0x03, 0x26, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0x0c, 0x34, 0xce, 0x62, 0x0c, 0x98, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb2, 0xd0, 0x40, 0x0b, 0x90, 0x60, 0x82, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xb8, 0x46, 0x03, 0x2d, 0x5c, 0x62, 0x27, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86, 0x26, 0x3e, 0x36,
  0x28, 0xf1, 0xb1, 0xe1, 0x88, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0x30, 0xae, 0xc1, 0x16, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x8e, 0x6b, 0xb8, 0x45, 0x60, 0x45, 0x20, 0x1f, 0x2b,
  0x04, 0xf9, 0x58, 0x31, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0xae, 0xd7, 0xa0, 0x0b, 0x9d, 0x30, 0x8b, 0xd1, 0x84, 0x00, 0x18, 0x4d,
  0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83,
  0x6b, 0x36, 0xf0, 0xc2, 0x27, 0xd2, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0,
  0xba, 0x0d, 0xbe, 0x10, 0x0b, 0xbc, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04,
  0x21, 0x18, 0x4d, 0x18, 0x04, 0x5b, 0xf4, 0x40, 0x3e, 0x23, 0x06, 0x08,
  0x00, 0x82, 0x60, 0x90, 0xed, 0x86, 0x68, 0xe0, 0xc1, 0x12, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0xc6, 0x1b, 0xa3, 0x61, 0x07, 0x4b, 0x60,
  0x4a, 0x1f, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x32, 0xdf,
  0x28, 0x8d, 0x3d, 0x50, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8,
  0x7e, 0xc3, 0x34, 0xf2, 0x40, 0x09, 0x2c, 0x01, 0x05, 0xf9, 0x8c, 0x18,
  0x20, 0x00, 0x08, 0x82, 0x41, 0x16, 0x1e, 0xa8, 0xe1, 0x07, 0x49, 0x30,
  0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99, 0x78, 0xa4, 0x06, 0x1f, 0x24,
  0xc1, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x30, 0xe8, 0x61, 0x1a, 0x07,
  0x11, 0x1c, 0x44, 0x30, 0x62, 0x60, 0x00, 0x20, 0x08, 0x06, 0x0e, 0x7a,
  0xa0, 0x46, 0x60, 0x41, 0x22, 0x1f, 0x13, 0x0e, 0xf9, 0xd8, 0x50, 0xc8,
  0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0xf4, 0x70, 0x0d, 0xba,
  0x08, 0x8f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41,
  0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xab, 0x3d, 0x64, 0x03, 0x2f,
  0xce, 0x63, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10,
  0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x8a, 0x0f, 0xdb, 0xe0, 0x0b,
  0xd3, 0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04,
  0x4b, 0x83, 0x25, 0x3e, 0x96, 0x06, 0x4b, 0x7c, 0x2c, 0x0d, 0x96, 0xf8,
  0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82, 0x01, 0xc3, 0x1f, 0xba, 0x31, 0x08,
  0xc1, 0x20, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0xf0, 0x07,
  0x6f, 0x04, 0x16, 0x10, 0xf2, 0x31, 0x81, 0x90, 0xcf, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x5c, 0xfc, 0x11, 0x1e, 0xa7, 0x01, 0x1f, 0xa3, 0x09,
  0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x62, 0x70, 0x00,
  0x20, 0x08, 0x06, 0x17, 0x88, 0x94, 0xc7, 0x6a, 0xd8, 0xc7, 0x68, 0x42,
  0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x18, 0x1c, 0x00,
  0x08, 0x82, 0xc1, 0x45, 0x22, 0xe9, 0xf1, 0x1a, 0xb8, 0x31, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xc6, 0x07, 0x4b, 0x7c,
  0x8c, 0x0f, 0x96, 0xf8, 0x18, 0x1f, 0x2c, 0xf1, 0x19, 0x31, 0x58, 0x00,
  0x10, 0x04, 0x03, 0xe6, 0x45, 0xda, 0x63, 0x10, 0x82, 0x41, 0x08, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x79, 0x91, 0xf7, 0x08, 0x2c, 0x20,
  0xe4, 0x63, 0x02, 0x21, 0x9f, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0xb8,
  0x5e, 0x84, 0x3e, 0x74, 0x43, 0x45, 0x46, 0x13, 0x02, 0x60, 0x34, 0x41,
  0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae,
  0x19, 0xc1, 0x0f, 0xdf, 0x30, 0x8f, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xeb,
  0x46, 0xf8, 0x43, 0x3c, 0xd2, 0x63, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0xec, 0x15, 0x96, 0xf8, 0xd8, 0x2b, 0x2c, 0xf1,
  0xb1, 0x57, 0x58, 0xe2, 0x33, 0x62, 0xb0, 0x00, 0x20, 0x08, 0x06, 0x8c,
  0x98, 0x80, 0xc8, 0x20, 0x04, 0x83, 0x10, 0x8c, 0x18, 0x18, 0x00, 0x08,
  0x82, 0x81, 0x23, 0x26, 0x22, 0x12, 0x58, 0x40, 0xc8, 0xc7, 0x04, 0x42,
  0x3e, 0xe6, 0x1e, 0x77, 0x10, 0x1f, 0x7b, 0x8f, 0x3b, 0x88, 0x8f, 0xc1,
  0x87, 0x19, 0xc4, 0xc7, 0xe2, 0xc3, 0x0c, 0xe2, 0x63, 0xf2, 0x51, 0xc5,
  0xc7, 0xe6, 0xa3, 0x8a, 0x8f, 0x89, 0x82, 0x1f, 0xc8, 0xc7, 0xea, 0x23,
  0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x69, 0x02, 0x23,
  0xc8, 0x28, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xa9, 0x49,
  0x8c, 0x20, 0xa3, 0x10, 0x98, 0x29, 0xbc, 0x81, 0x7c, 0x2c, 0x3f, 0x82,
  0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xd6, 0x26, 0x34, 0xa2,
  0x9c, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x99, 0x9b, 0xd4,
  0x88, 0x72, 0x0a, 0x81, 0xa9, 0x02, 0x18, 0xc8, 0xc7, 0xfa, 0x23, 0x88,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x71, 0x82, 0x23, 0xcc,
  0x2a, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xc9, 0x49, 0x8e,
  0x30, 0xab, 0x10, 0xd8, 0x1f, 0xb8, 0x82, 0x7c, 0x2c, 0xe0, 0x03, 0xf9,
  0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x56, 0x27, 0x3c, 0xc2, 0x07,
  0xaf, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x66, 0x27, 0x3d,
  0xc2, 0x07, 0xaf, 0x10, 0x18, 0x1c, 0xc8, 0x82, 0x7c, 0x2c, 0x68, 0x03,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x96, 0x27, 0x60, 0xd2,
  0x06, 0xb3, 0x10, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0xa6, 0x27,
  0x61, 0xd2, 0x06, 0xb3, 0x10, 0x58, 0x18, 0xd8, 0x82, 0x7c, 0x2c, 0xf0,
  0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x59, 0x9f, 0x90, 0x89,
  0x77, 0x0b, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x7e, 0x52,
  0x26, 0xde, 0x2d, 0x04, 0xc3, 0x11, 0x55, 0x8b, 0x10, 0xdf, 0x70, 0x84,
  0xe4, 0x22, 0xc4, 0x37, 0x1c, 0xf1, 0xbc, 0x08, 0xf1, 0x4d, 0x37, 0xc0,
  0xc8, 0x8c, 0x0c, 0xd3, 0x0d, 0x31, 0x42, 0x23, 0xc3, 0x74, 0x83, 0x8c,
  0xd4, 0xc8, 0x60, 0xc3, 0x26, 0x1f, 0x1b, 0x30, 0xf9, 0xd8, 0x50, 0xc9,
  0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0x54, 0x71, 0x13, 0x1a,
  0xf1, 0x93, 0xd1, 0x84, 0x60, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03,
  0xa8, 0x55, 0xd4, 0x84, 0xc2, 0x91, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30,
  0x80, 0x5c, 0x65, 0x4d, 0xa2, 0x1c, 0x19, 0x31, 0x38, 0x00, 0x10, 0x04,
  0x03, 0xe8, 0x55, 0xd8, 0xc4, 0xd1, 0x11, 0x1b, 0x16, 0xf9, 0xd8, 0xb0,
  0xc8, 0xc7, 0x86, 0x45, 0x3e, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0,
  0xd0, 0x4a, 0x9c, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0xd4,
  0x8a, 0x9c, 0x0c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0xd8, 0xca,
  0x9c, 0x0c, 0x36, 0x28, 0xf2, 0xb1, 0x61, 0x91, 0x8f, 0x0d, 0x8c, 0x7c,
  0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0xd1, 0x15, 0x3c, 0x19, 0x46,
  0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0xd9, 0x95, 0x3c, 0x19, 0x46, 0x0c,
  0x0c, 0x00, 0x04, 0xc1, 0xc0, 0xe1, 0x15, 0x3d, 0x19, 0x6c, 0x78, 0x03,
  0xf9, 0xd8, 0xc0, 0x06, 0xf2, 0xb1, 0x21, 0x0d, 0xe4, 0x63, 0xd7, 0x3b,
  0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2, 0x5e, 0x21, 0x95,
  0xab, 0x17, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x7c, 0xa5,
  0x54, 0xae, 0x55, 0x08, 0x4c, 0x8b, 0x07, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x06, 0x2e, 0xa7, 0xa2, 0xfd, 0x42, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x59, 0xb8, 0xa0, 0x8a, 0xd6, 0x0a, 0x81, 0x75,
  0xf3, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xc6, 0x45,
  0x55, 0xba, 0x70, 0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0x23,
  0x97, 0x55, 0xe9, 0x5e, 0x21, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83,
  0xcb, 0x5c, 0x56, 0x25, 0x4e, 0xc4, 0x65, 0x34, 0x21, 0x00, 0x46, 0x13,
  0x84, 0x60, 0x34, 0x61, 0x10, 0x6c, 0x58, 0xe4, 0x63, 0x43, 0x22, 0x1f,
  0x1b, 0x0e, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0xd5, 0x2e,
  0xb2, 0x82, 0x27, 0xea, 0x32, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0x76, 0x0c, 0xf0, 0xb1, 0x63, 0x80, 0x8f, 0x1d, 0x03,
  0x7c, 0x4c, 0x13, 0x09, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41,
  0x46, 0x2f, 0xbb, 0xa2, 0xc1, 0x43, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08,
  0x06, 0x59, 0xbd, 0xf0, 0x8a, 0xe6, 0x0b, 0x81, 0x75, 0x24, 0x21, 0x9f,
  0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xee, 0xc5, 0x57, 0x3a, 0x79,
  0x08, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xc3, 0x97, 0x5f, 0xe9,
  0xc0, 0x21, 0x30, 0x30, 0x30, 0x09, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x41, 0xa6, 0x2f, 0xe1, 0x02, 0x06, 0xf4, 0x10, 0x8c, 0x18, 0x20,
  0x00, 0x08, 0x82, 0x41, 0xb6, 0x2f, 0xe2, 0x02, 0x06, 0xe2, 0x10, 0x8c,
  0x26, 0xd0, 0x01, 0x30, 0x9a, 0x50, 0x07, 0xc1, 0x68, 0x82, 0x1d, 0x08,
  0x36, 0x28, 0xf2, 0xb1, 0x01, 0x91, 0x8f, 0x0d, 0x86, 0x7c, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x1a, 0x19, 0x74, 0x71, 0x15, 0x5a, 0x19,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04,
  0x62, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x0b, 0x65, 0xda, 0x65,
  0x56, 0xd0, 0x65, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae,
  0x96, 0x91, 0x17, 0x5c, 0xa1, 0x97, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0xb8, 0x64, 0xe6, 0x5e, 0x7a, 0xa5, 0x5e, 0x46, 0x13, 0x02,
  0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x6c,
  0x0a, 0x11, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x76, 0x33,
  0xfe, 0xe2, 0x1f, 0x53, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x19,
  0xce, 0xfc, 0xcb, 0x7e, 0x4c, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x64, 0x39, 0x03, 0x32, 0xb8, 0x32, 0x05, 0x26, 0x95, 0x88, 0x7c, 0x46,
  0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xdb, 0x19, 0x91, 0x11, 0x11, 0x29,
  0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x8c, 0x67, 0x46, 0xe6, 0x3f,
  0xa4, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2, 0x9e, 0x21, 0x19,
  0x5e, 0x91, 0x02, 0x8b, 0x52, 0x44, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x90, 0xfd, 0x8c, 0xc9, 0x98, 0x48, 0x14, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x06, 0x36, 0x27, 0x33, 0x22, 0x51, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x59, 0xd8, 0xa0, 0x0c, 0xb8, 0x44, 0x81, 0x41,
  0x2d, 0x22, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xc6, 0x46,
  0x65, 0x54, 0x04, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0x23,
  0x9b, 0x95, 0x39, 0x11, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0xac, 0x6c, 0x58, 0x86, 0x5c, 0xa0, 0x60, 0x34, 0x21, 0x14, 0x86, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0xd0, 0xa6, 0x65, 0xe6, 0x05, 0x66,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34,
  0x81, 0x18, 0x46, 0x0c, 0x1a, 0x00, 0x04, 0xc1, 0x40, 0x72, 0x1b, 0x9b,
  0xb9, 0x91, 0x19, 0x79, 0x91, 0x75, 0x21, 0x06, 0x21, 0x18, 0x31, 0x30,
  0x00, 0x10, 0x04, 0x03, 0x27, 0x6e, 0xc8, 0x26, 0x18, 0x31, 0x48, 0x00,
  0x10, 0x04, 0x03, 0x85, 0x6e, 0xd4, 0xe6, 0x6c, 0xd6, 0x26, 0x6c, 0xaa,
  0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0xe8, 0x46, 0x6d, 0xce, 0x66,
  0x6d, 0x72, 0x26, 0x1a, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x6e,
  0xd4, 0xe6, 0x6c, 0xd6, 0xc6, 0x67, 0x9a, 0x11, 0x83, 0x04, 0x00, 0x41,
  0x30, 0x50, 0xe8, 0x46, 0x6d, 0xce, 0x66, 0x6d, 0x7e, 0x26, 0x19, 0x31,
  0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x6e, 0xd4, 0x66, 0x6d, 0xd6, 0x26,
  0x6c, 0xfc, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14, 0xba, 0x51,
  0x9b, 0xb5, 0x59, 0x9b, 0x9c, 0xe9, 0x83, 0x11, 0x83, 0x04, 0x00, 0x41,
  0x30, 0x50, 0xe8, 0x46, 0x6d, 0xd6, 0x66, 0x6d, 0x7c, 0x86, 0x0f, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0xa1, 0x1b, 0xb5, 0x59, 0x9b, 0xb5,
  0xf9, 0x19, 0x64, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14, 0xba, 0x51,
  0x1b, 0xb6, 0x59, 0x9b, 0xb0, 0x79, 0x83, 0x11, 0x83, 0x04, 0x00, 0x41,
  0x30, 0x50, 0xe8, 0x46, 0x6d, 0xd8, 0x66, 0x6d, 0x72, 0xc6, 0x0d, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0xa1, 0x1b, 0xb5, 0x61, 0x9b, 0xb5,
  0xf1, 0x99, 0x36, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x6e,
  0xd4, 0x86, 0x6d, 0xd6, 0xe6, 0x67, 0x82, 0x11, 0x83, 0x04, 0x00, 0x41,
  0x30, 0x50, 0xe8, 0x46, 0x6d, 0xc8, 0x66, 0x6d, 0xc2, 0xa6, 0x5e, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0xa1, 0x1b, 0xb5, 0x21, 0x9b, 0xb5,
  0xc9, 0x19, 0x7a, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
