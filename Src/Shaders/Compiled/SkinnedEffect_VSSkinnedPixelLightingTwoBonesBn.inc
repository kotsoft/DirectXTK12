#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; BLENDINDICES             0   xyzw        3     NONE    uint   xy  
; BLENDWEIGHT              0   xyzw        4     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; TEXCOORD                 1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 2   xyz         2     NONE   float   xyz 
; COLOR                    0   xyzw        3     NONE   float   xyzw
; SV_Position              0   xyzw        4      POS   float   xyzw
;
; shader debug name: Compiled\SkinnedEffect_VSSkinnedPixelLightingTwoBonesBn.pdb
; shader hash: 93b86bdcf76df42b1c2001a8d874456f
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1                 linear       
; TEXCOORD                 2                 linear       
; COLOR                    0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [3872 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 20, outputs: 20
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 8 }
;   output 1 depends on inputs: { 9 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 7 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 8 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 9 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 10 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 16 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 17 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 18 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 19 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.alignment.legacy.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [72 x [3 x <4 x float>]] }

define void @VSSkinnedPixelLightingTwoBonesBn() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = fmul fast float %8, 2.000000e+00
  %16 = fmul fast float %9, 2.000000e+00
  %17 = fmul fast float %10, 2.000000e+00
  %18 = fadd fast float %15, -1.000000e+00
  %19 = fadd fast float %16, -1.000000e+00
  %20 = fadd fast float %17, -1.000000e+00
  %21 = mul i32 %4, 3
  %22 = add i32 %21, 26
  %23 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %22)  ; CBufferLoadLegacy(handle,regIndex)
  %24 = extractvalue %dx.types.CBufRet.f32 %23, 0
  %25 = extractvalue %dx.types.CBufRet.f32 %23, 1
  %26 = extractvalue %dx.types.CBufRet.f32 %23, 2
  %27 = extractvalue %dx.types.CBufRet.f32 %23, 3
  %28 = add i32 %21, 27
  %29 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %28)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.f32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.f32 %29, 1
  %32 = extractvalue %dx.types.CBufRet.f32 %29, 2
  %33 = extractvalue %dx.types.CBufRet.f32 %29, 3
  %34 = add i32 %21, 28
  %35 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %34)  ; CBufferLoadLegacy(handle,regIndex)
  %36 = extractvalue %dx.types.CBufRet.f32 %35, 0
  %37 = extractvalue %dx.types.CBufRet.f32 %35, 1
  %38 = extractvalue %dx.types.CBufRet.f32 %35, 2
  %39 = extractvalue %dx.types.CBufRet.f32 %35, 3
  %40 = fmul fast float %24, %2
  %41 = fmul fast float %30, %2
  %42 = fmul fast float %36, %2
  %43 = fmul fast float %25, %2
  %44 = fmul fast float %31, %2
  %45 = fmul fast float %37, %2
  %46 = fmul fast float %26, %2
  %47 = fmul fast float %32, %2
  %48 = fmul fast float %38, %2
  %49 = fmul fast float %27, %2
  %50 = fmul fast float %33, %2
  %51 = fmul fast float %39, %2
  %52 = mul i32 %5, 3
  %53 = add i32 %52, 26
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %53)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = extractvalue %dx.types.CBufRet.f32 %54, 3
  %59 = add i32 %52, 27
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %59)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %65 = add i32 %52, 28
  %66 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %65)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.f32 %66, 0
  %68 = extractvalue %dx.types.CBufRet.f32 %66, 1
  %69 = extractvalue %dx.types.CBufRet.f32 %66, 2
  %70 = extractvalue %dx.types.CBufRet.f32 %66, 3
  %71 = fmul fast float %55, %3
  %72 = fmul fast float %61, %3
  %73 = fmul fast float %67, %3
  %74 = fmul fast float %56, %3
  %75 = fmul fast float %62, %3
  %76 = fmul fast float %68, %3
  %77 = fmul fast float %57, %3
  %78 = fmul fast float %63, %3
  %79 = fmul fast float %69, %3
  %80 = fmul fast float %58, %3
  %81 = fmul fast float %64, %3
  %82 = fmul fast float %70, %3
  %83 = fadd fast float %71, %40
  %84 = fadd fast float %72, %41
  %85 = fadd fast float %73, %42
  %86 = fadd fast float %74, %43
  %87 = fadd fast float %75, %44
  %88 = fadd fast float %76, %45
  %89 = fadd fast float %77, %46
  %90 = fadd fast float %78, %47
  %91 = fadd fast float %79, %48
  %92 = fadd fast float %80, %49
  %93 = fadd fast float %81, %50
  %94 = fadd fast float %82, %51
  %95 = fmul fast float %83, %11
  %96 = call float @dx.op.tertiary.f32(i32 46, float %12, float %86, float %95)  ; FMad(a,b,c)
  %97 = call float @dx.op.tertiary.f32(i32 46, float %13, float %89, float %96)  ; FMad(a,b,c)
  %98 = call float @dx.op.tertiary.f32(i32 46, float %14, float %92, float %97)  ; FMad(a,b,c)
  %99 = fmul fast float %84, %11
  %100 = call float @dx.op.tertiary.f32(i32 46, float %12, float %87, float %99)  ; FMad(a,b,c)
  %101 = call float @dx.op.tertiary.f32(i32 46, float %13, float %90, float %100)  ; FMad(a,b,c)
  %102 = call float @dx.op.tertiary.f32(i32 46, float %14, float %93, float %101)  ; FMad(a,b,c)
  %103 = fmul fast float %85, %11
  %104 = call float @dx.op.tertiary.f32(i32 46, float %12, float %88, float %103)  ; FMad(a,b,c)
  %105 = call float @dx.op.tertiary.f32(i32 46, float %13, float %91, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %14, float %94, float %105)  ; FMad(a,b,c)
  %107 = fmul fast float %83, %18
  %108 = call float @dx.op.tertiary.f32(i32 46, float %19, float %86, float %107)  ; FMad(a,b,c)
  %109 = call float @dx.op.tertiary.f32(i32 46, float %20, float %89, float %108)  ; FMad(a,b,c)
  %110 = fmul fast float %84, %18
  %111 = call float @dx.op.tertiary.f32(i32 46, float %19, float %87, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %20, float %90, float %111)  ; FMad(a,b,c)
  %113 = fmul fast float %85, %18
  %114 = call float @dx.op.tertiary.f32(i32 46, float %19, float %88, float %113)  ; FMad(a,b,c)
  %115 = call float @dx.op.tertiary.f32(i32 46, float %20, float %91, float %114)  ; FMad(a,b,c)
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = extractvalue %dx.types.CBufRet.f32 %116, 3
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = extractvalue %dx.types.CBufRet.f32 %121, 3
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 0
  %128 = extractvalue %dx.types.CBufRet.f32 %126, 1
  %129 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %130 = extractvalue %dx.types.CBufRet.f32 %126, 3
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 0
  %133 = extractvalue %dx.types.CBufRet.f32 %131, 1
  %134 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %135 = extractvalue %dx.types.CBufRet.f32 %131, 3
  %136 = fmul fast float %117, %98
  %137 = call float @dx.op.tertiary.f32(i32 46, float %102, float %118, float %136)  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %106, float %119, float %137)  ; FMad(a,b,c)
  %139 = call float @dx.op.tertiary.f32(i32 46, float %14, float %120, float %138)  ; FMad(a,b,c)
  %140 = fmul fast float %122, %98
  %141 = call float @dx.op.tertiary.f32(i32 46, float %102, float %123, float %140)  ; FMad(a,b,c)
  %142 = call float @dx.op.tertiary.f32(i32 46, float %106, float %124, float %141)  ; FMad(a,b,c)
  %143 = call float @dx.op.tertiary.f32(i32 46, float %14, float %125, float %142)  ; FMad(a,b,c)
  %144 = fmul fast float %127, %98
  %145 = call float @dx.op.tertiary.f32(i32 46, float %102, float %128, float %144)  ; FMad(a,b,c)
  %146 = call float @dx.op.tertiary.f32(i32 46, float %106, float %129, float %145)  ; FMad(a,b,c)
  %147 = call float @dx.op.tertiary.f32(i32 46, float %14, float %130, float %146)  ; FMad(a,b,c)
  %148 = fmul fast float %132, %98
  %149 = call float @dx.op.tertiary.f32(i32 46, float %102, float %133, float %148)  ; FMad(a,b,c)
  %150 = call float @dx.op.tertiary.f32(i32 46, float %106, float %134, float %149)  ; FMad(a,b,c)
  %151 = call float @dx.op.tertiary.f32(i32 46, float %14, float %135, float %150)  ; FMad(a,b,c)
  %152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.f32 %152, 0
  %154 = extractvalue %dx.types.CBufRet.f32 %152, 1
  %155 = extractvalue %dx.types.CBufRet.f32 %152, 2
  %156 = extractvalue %dx.types.CBufRet.f32 %152, 3
  %157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %158 = extractvalue %dx.types.CBufRet.f32 %157, 0
  %159 = extractvalue %dx.types.CBufRet.f32 %157, 1
  %160 = extractvalue %dx.types.CBufRet.f32 %157, 2
  %161 = extractvalue %dx.types.CBufRet.f32 %157, 3
  %162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %163 = extractvalue %dx.types.CBufRet.f32 %162, 0
  %164 = extractvalue %dx.types.CBufRet.f32 %162, 1
  %165 = extractvalue %dx.types.CBufRet.f32 %162, 2
  %166 = extractvalue %dx.types.CBufRet.f32 %162, 3
  %167 = fmul fast float %153, %98
  %168 = call float @dx.op.tertiary.f32(i32 46, float %102, float %154, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %106, float %155, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.tertiary.f32(i32 46, float %14, float %156, float %169)  ; FMad(a,b,c)
  %171 = fmul fast float %158, %98
  %172 = call float @dx.op.tertiary.f32(i32 46, float %102, float %159, float %171)  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float %106, float %160, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %14, float %161, float %173)  ; FMad(a,b,c)
  %175 = fmul fast float %163, %98
  %176 = call float @dx.op.tertiary.f32(i32 46, float %102, float %164, float %175)  ; FMad(a,b,c)
  %177 = call float @dx.op.tertiary.f32(i32 46, float %106, float %165, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %14, float %166, float %177)  ; FMad(a,b,c)
  %179 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %180 = extractvalue %dx.types.CBufRet.f32 %179, 0
  %181 = extractvalue %dx.types.CBufRet.f32 %179, 1
  %182 = extractvalue %dx.types.CBufRet.f32 %179, 2
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 0
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 1
  %186 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.f32 %187, 0
  %189 = extractvalue %dx.types.CBufRet.f32 %187, 1
  %190 = extractvalue %dx.types.CBufRet.f32 %187, 2
  %191 = fmul fast float %180, %109
  %192 = call float @dx.op.tertiary.f32(i32 46, float %112, float %181, float %191)  ; FMad(a,b,c)
  %193 = call float @dx.op.tertiary.f32(i32 46, float %115, float %182, float %192)  ; FMad(a,b,c)
  %194 = fmul fast float %184, %109
  %195 = call float @dx.op.tertiary.f32(i32 46, float %112, float %185, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %115, float %186, float %195)  ; FMad(a,b,c)
  %197 = fmul fast float %188, %109
  %198 = call float @dx.op.tertiary.f32(i32 46, float %112, float %189, float %197)  ; FMad(a,b,c)
  %199 = call float @dx.op.tertiary.f32(i32 46, float %115, float %190, float %198)  ; FMad(a,b,c)
  %200 = call float @dx.op.dot3.f32(i32 55, float %193, float %196, float %199, float %193, float %196, float %199)  ; Dot3(ax,ay,az,bx,by,bz)
  %201 = call float @dx.op.unary.f32(i32 25, float %200)  ; Rsqrt(value)
  %202 = fmul fast float %201, %193
  %203 = fmul fast float %201, %196
  %204 = fmul fast float %201, %199
  %205 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %206 = extractvalue %dx.types.CBufRet.f32 %205, 0
  %207 = extractvalue %dx.types.CBufRet.f32 %205, 1
  %208 = extractvalue %dx.types.CBufRet.f32 %205, 2
  %209 = extractvalue %dx.types.CBufRet.f32 %205, 3
  %210 = call float @dx.op.dot4.f32(i32 56, float %98, float %102, float %106, float %14, float %206, float %207, float %208, float %209)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %211 = call float @dx.op.unary.f32(i32 7, float %210)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %139)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %143)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %147)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %151)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %170)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %174)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %178)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %211)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %202)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %203)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %204)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  %212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.f32 %212, 3
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float 1.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %213)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %dx.alignment.legacy.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 3872, null}
!7 = !{[22 x i32] [i32 20, i32 20, i32 983280, i32 983280, i32 983280, i32 983280, i32 1792, i32 1792, i32 1792, i32 0, i32 1, i32 2, i32 0, i32 0, i32 985072, i32 985072, i32 0, i32 0, i32 985072, i32 985072, i32 0, i32 0]}
!8 = !{void ()* @VSSkinnedPixelLightingTwoBonesBn, !"VSSkinnedPixelLightingTwoBonesBn", !9, !4, null}
!9 = !{!10, !20, null}
!10 = !{!11, !14, !16, !18, !19}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !12, i8 0, i32 1, i8 4, i32 3, i8 0, !17}
!19 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 4, i8 0, !17}
!20 = !{!21, !22, !24, !26, !27}
!21 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 0, i8 0, !17}
!22 = !{i32 1, !"TEXCOORD", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!23 = !{i32 1}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !25, i8 2, i32 1, i8 3, i32 2, i8 0, !15}
!25 = !{i32 2}
!26 = !{i32 3, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 3, i8 0, !13}
!27 = !{i32 4, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 4, i8 0, !13}

#endif

const unsigned char SkinnedEffect_VSSkinnedPixelLightingTwoBonesBn[] = {
  0x44, 0x58, 0x42, 0x43, 0x52, 0x2d, 0xcb, 0xd9, 0x83, 0x7c, 0x6e, 0xdc,
  0x69, 0x34, 0x96, 0x52, 0x08, 0x9e, 0x36, 0x47, 0x01, 0x00, 0x00, 0x00,
  0x4e, 0x13, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00,
  0xba, 0x03, 0x00, 0x00, 0x4a, 0x04, 0x00, 0x00, 0x92, 0x04, 0x00, 0x00,
  0xae, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xdd, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e,
  0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x4f, 0x53, 0x47,
  0x31, 0xd5, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52,
  0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
  0x52, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
  0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0xa0, 0x01, 0x00, 0x00, 0x24, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x05, 0x05, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f,
  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
  0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42,
  0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00,
  0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00,
  0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
  0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x42, 0x00, 0x03, 0x02, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x48, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x43, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x04, 0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0xf0, 0x00,
  0x0f, 0x00, 0xf0, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0x0f, 0x00, 0xf0, 0x00,
  0x0f, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x07,
  0x0f, 0x00, 0xf0, 0x07, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0x07, 0x0f, 0x00, 0xf0, 0x07, 0x0f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x88, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1d, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
  0x65, 0x64, 0x5c, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x66,
  0x66, 0x65, 0x63, 0x74, 0x5f, 0x56, 0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e,
  0x65, 0x64, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74,
  0x69, 0x6e, 0x67, 0x54, 0x77, 0x6f, 0x42, 0x6f, 0x6e, 0x65, 0x73, 0x42,
  0x6e, 0x2e, 0x70, 0x64, 0x62, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0xb8, 0x6b, 0xdc, 0xf7, 0x6d,
  0xf4, 0x2b, 0x1c, 0x20, 0x01, 0xa8, 0xd8, 0x74, 0x45, 0x6f, 0x44, 0x58,
  0x49, 0x4c, 0x98, 0x0e, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0xa6, 0x03,
  0x00, 0x00, 0x44, 0x58, 0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x80, 0x0e, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c,
  0x00, 0x00, 0x9d, 0x03, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8,
  0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05,
  0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92,
  0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32,
  0x62, 0x88, 0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19,
  0x32, 0x42, 0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51,
  0x81, 0x8c, 0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff,
  0xff, 0x07, 0x40, 0x02, 0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff,
  0x03, 0x20, 0x6d, 0x30, 0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09,
  0xa8, 0x00, 0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82,
  0x60, 0x42, 0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20,
  0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64,
  0x85, 0x04, 0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1,
  0x90, 0x14, 0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x98,
  0xc1, 0x08, 0x40, 0x09, 0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60,
  0x8e, 0x00, 0x29, 0xc6, 0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x82,
  0x20, 0x88, 0x82, 0x20, 0xa4, 0x18, 0x00, 0x41, 0x10, 0xc5, 0x40, 0x4a,
  0x41, 0x06, 0x62, 0x18, 0x86, 0x61, 0x18, 0x88, 0x29, 0xc3, 0x40, 0x0c,
  0xe4, 0x14, 0x65, 0x20, 0x86, 0x61, 0x18, 0x86, 0x61, 0x18, 0x08, 0x3a,
  0x6a, 0xb8, 0xfc, 0x09, 0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58, 0x89,
  0xc9, 0x2f, 0x6e, 0x1b, 0x11, 0xc3, 0x30, 0x0c, 0x54, 0xdc, 0x33, 0x5c,
  0xfe, 0x84, 0x3d, 0x84, 0xe4, 0x87, 0x40, 0x33, 0x2c, 0x04, 0x0a, 0xa6,
  0x42, 0x48, 0x04, 0x45, 0x50, 0x55, 0x8a, 0x81, 0x18, 0x86, 0x81, 0xae,
  0x39, 0x82, 0xa0, 0x18, 0x14, 0x51, 0x10, 0x44, 0x46, 0xda, 0x40, 0xc0,
  0x30, 0x02, 0x31, 0x0c, 0x23, 0x0c, 0x43, 0x0e, 0x78, 0x49, 0xd0, 0xe5,
  0x40, 0x97, 0x48, 0xe1, 0x79, 0xc3, 0xe5, 0x03, 0x0b, 0x62, 0x34, 0x0c,
  0xd1, 0x4c, 0xfe, 0x42, 0x18, 0x80, 0x80, 0xf9, 0x29, 0x10, 0x01, 0x0c,
  0x31, 0x11, 0x91, 0x84, 0x9c, 0xce, 0xf3, 0x86, 0xef, 0xfb, 0x3c, 0xaf,
  0x03, 0x3f, 0x50, 0xa4, 0x31, 0x2d, 0x08, 0x00, 0x00, 0x00, 0x13, 0x14,
  0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03,
  0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50,
  0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0,
  0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x07, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x4f, 0x05, 0x04, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x1a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x64, 0x81, 0x00, 0x17, 0x00, 0x00, 0x00, 0x32, 0x1e,
  0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04,
  0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x14, 0x8a, 0xa1, 0x80, 0x79, 0xca,
  0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a, 0x81, 0x8a, 0x92, 0x18, 0x01, 0x28,
  0x84, 0x32, 0x28, 0x82, 0x52, 0x20, 0x72, 0x06, 0x80, 0xca, 0xb1, 0x2c,
  0x8a, 0x82, 0x4f, 0xd0, 0x83, 0x4f, 0xd0, 0x83, 0x4f, 0xd0, 0x83, 0x4f,
  0xd0, 0x03, 0xf1, 0x00, 0xc4, 0x03, 0x10, 0x0f, 0x80, 0x40, 0x00, 0x00,
  0xf8, 0x0f, 0x3d, 0xf8, 0x0f, 0x3d, 0x00, 0x80, 0xff, 0xd0, 0x83, 0xff,
  0xd0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x85, 0x00,
  0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18,
  0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73,
  0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91,
  0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31,
  0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x04, 0x42, 0x99,
  0x20, 0x10, 0xcb, 0x06, 0x61, 0x20, 0x26, 0x08, 0x04, 0xb3, 0x41, 0x18,
  0x0c, 0x0a, 0x76, 0x73, 0x13, 0x04, 0xa2, 0xd9, 0x30, 0x20, 0x09, 0x31,
  0x41, 0x20, 0x03, 0x8d, 0xc0, 0x04, 0x81, 0x70, 0x36, 0x20, 0xc4, 0xc2,
  0x10, 0xc4, 0xd0, 0x00, 0x1b, 0x02, 0x67, 0x03, 0x01, 0x00, 0x0f, 0x30,
  0x41, 0x28, 0x83, 0x6d, 0x43, 0x10, 0x4d, 0x10, 0x04, 0x80, 0x60, 0x60,
  0x35, 0x35, 0xb5, 0x96, 0xe6, 0xe6, 0x56, 0x46, 0x06, 0x95, 0x86, 0x57,
  0xc6, 0xc6, 0x94, 0x76, 0x86, 0x46, 0x97, 0xe6, 0x76, 0x46, 0x75, 0xf7,
  0x26, 0xf4, 0xe6, 0x56, 0x36, 0x27, 0xe4, 0xc6, 0x65, 0xca, 0xea, 0x0b,
  0xea, 0x6d, 0x2e, 0x8d, 0x2e, 0xed, 0xcd, 0x6d, 0x82, 0x50, 0x50, 0x13,
  0x84, 0xa2, 0xda, 0x10, 0x10, 0x13, 0x84, 0xc2, 0x9a, 0x20, 0x10, 0xcf,
  0x04, 0x81, 0x80, 0x36, 0x08, 0xda, 0xb6, 0x61, 0x21, 0x2a, 0xeb, 0xc2,
  0xae, 0x21, 0x23, 0x2e, 0x8e, 0x86, 0xd3, 0x93, 0x54, 0x53, 0x10, 0xd3,
  0x04, 0xa1, 0xb8, 0x26, 0x08, 0x44, 0xb4, 0x41, 0xd0, 0xc0, 0x60, 0xc3,
  0x32, 0x78, 0xd6, 0x85, 0x5d, 0xc3, 0x37, 0x5c, 0x61, 0x30, 0x41, 0x20,
  0x24, 0x22, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x13, 0x84,
  0x02, 0xdb, 0x20, 0x68, 0xda, 0x86, 0x65, 0x0c, 0xc8, 0xc0, 0xba, 0xb0,
  0x6b, 0x28, 0x83, 0x31, 0xb8, 0xcc, 0x80, 0x8c, 0x10, 0x53, 0x91, 0x13,
  0x51, 0x92, 0x13, 0x51, 0xd2, 0x50, 0xd1, 0xd4, 0x04, 0xa1, 0xc8, 0x36,
  0x2c, 0x1a, 0x1a, 0xa4, 0xc1, 0x85, 0x5d, 0x43, 0xa6, 0x5d, 0x66, 0x30,
  0x41, 0x20, 0x26, 0x2e, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49,
  0x47, 0x48, 0x54, 0x1b, 0x96, 0x35, 0x60, 0x03, 0xeb, 0xc2, 0xae, 0x21,
  0x5b, 0x83, 0xcb, 0x0c, 0x36, 0x14, 0x9d, 0x18, 0x9c, 0x81, 0x1a, 0xb4,
  0xc1, 0x86, 0x85, 0x20, 0x03, 0xeb, 0xc2, 0xca, 0x60, 0x28, 0x03, 0xe2,
  0x32, 0x83, 0x0d, 0xc1, 0xb0, 0x61, 0x19, 0xc8, 0xc0, 0xba, 0xe0, 0xa0,
  0x0c, 0x86, 0x6c, 0xb8, 0xb8, 0x0d, 0xc1, 0x18, 0x6c, 0x58, 0xc6, 0x80,
  0x0c, 0xac, 0x4b, 0x0e, 0xca, 0x60, 0xf8, 0xc6, 0xe0, 0x0a, 0x03, 0x16,
  0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x1b, 0x16, 0x8d, 0x0e, 0xac, 0x0b, 0x2b,
  0x83, 0x21, 0xd3, 0x2e, 0x6e, 0xc3, 0xb2, 0x06, 0x95, 0xf5, 0x61, 0xd9,
  0x90, 0xad, 0xc1, 0xc5, 0x6d, 0x28, 0xde, 0x20, 0x0e, 0xe6, 0xa0, 0x0e,
  0xec, 0x60, 0xc3, 0xe0, 0x06, 0x77, 0x00, 0x6c, 0x28, 0x26, 0x0a, 0x0f,
  0x20, 0xa0, 0x0a, 0x1b, 0x9b, 0x5d, 0x9b, 0x4b, 0x1a, 0x59, 0x99, 0x1b,
  0xdd, 0x94, 0x20, 0xa8, 0x42, 0x86, 0xe7, 0x62, 0x57, 0x26, 0x37, 0x97,
  0xf6, 0xe6, 0x36, 0x25, 0x20, 0x9a, 0x90, 0xe1, 0xb9, 0xd8, 0x85, 0xb1,
  0xd9, 0x95, 0xc9, 0x4d, 0x09, 0x8c, 0x3a, 0x64, 0x78, 0x2e, 0x73, 0x68,
  0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x82, 0xa4,
  0x0c, 0x19, 0x9e, 0x8b, 0x5c, 0xd9, 0xdc, 0x5b, 0x9d, 0xdc, 0x58, 0xd9,
  0xdc, 0x94, 0xe0, 0xa9, 0x43, 0x86, 0xe7, 0x62, 0x97, 0x56, 0x76, 0x97,
  0x44, 0x36, 0x45, 0x17, 0x46, 0x57, 0x36, 0x25, 0x88, 0xea, 0x90, 0xe1,
  0xb9, 0x94, 0xb9, 0xd1, 0xc9, 0xe5, 0x41, 0xbd, 0xa5, 0xb9, 0xd1, 0xcd,
  0x4d, 0x09, 0xf0, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00,
  0x00, 0x00, 0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01,
  0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78,
  0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4,
  0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c,
  0x66, 0x30, 0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03,
  0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70,
  0x07, 0x7b, 0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70,
  0x03, 0x76, 0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec,
  0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0,
  0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d,
  0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43,
  0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0,
  0x14, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68,
  0x07, 0x37, 0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28,
  0x07, 0x76, 0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08,
  0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee,
  0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62,
  0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06,
  0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3,
  0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3,
  0x0c, 0xc4, 0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80,
  0x87, 0x19, 0xca, 0xc3, 0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec,
  0xf0, 0x0e, 0xef, 0x00, 0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d,
  0xc8, 0x41, 0x1c, 0xce, 0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d,
  0xc2, 0x21, 0x1f, 0xde, 0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20,
  0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x2f, 0xcb, 0x2a,
  0x48, 0xd3, 0x10, 0x43, 0x8a, 0x5c, 0xc4, 0x52, 0x22, 0xc6, 0x31, 0x21,
  0x8d, 0xd1, 0x5a, 0xce, 0xe6, 0x34, 0x84, 0xb4, 0x35, 0x76, 0xb0, 0x0d,
  0x97, 0xef, 0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c,
  0x25, 0x61, 0x00, 0x02, 0xe6, 0x17, 0xb7, 0x6d, 0x09, 0xd2, 0x70, 0xf9,
  0xce, 0xe3, 0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0x18,
  0x81, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x83, 0x33, 0xdd, 0x7e, 0x71, 0xdb,
  0x66, 0xe0, 0x0c, 0x97, 0xef, 0x3c, 0xfe, 0xe0, 0x4c, 0xb8, 0x5f, 0xdc,
  0xb6, 0x05, 0x4c, 0xc3, 0xe5, 0x3b, 0x8f, 0xbf, 0x38, 0xc0, 0x20, 0x36,
  0x0f, 0x35, 0xf9, 0xc5, 0x6d, 0x9b, 0xc0, 0x34, 0x5c, 0xbe, 0xf3, 0xf8,
  0x8b, 0x03, 0x0c, 0x62, 0xf3, 0x50, 0x93, 0x8f, 0xdc, 0xb6, 0x0d, 0x54,
  0xc3, 0xe5, 0x3b, 0x8f, 0x2f, 0x4d, 0x4e, 0x44, 0xa0, 0xd4, 0xf4, 0x50,
  0x93, 0x5f, 0xdc, 0xb6, 0x21, 0x48, 0xc3, 0xe5, 0x3b, 0x8f, 0x3f, 0x11,
  0xd1, 0x84, 0x00, 0x11, 0xe6, 0x17, 0xb7, 0x6d, 0x05, 0xcf, 0x70, 0xf9,
  0xce, 0xe3, 0x53, 0x0d, 0x10, 0x61, 0x7e, 0x71, 0xdb, 0x00, 0x61, 0x20,
  0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00,
  0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x94, 0x8d, 0x00, 0x50, 0x51, 0x02,
  0x44, 0x14, 0x5c, 0x71, 0x95, 0xdd, 0x0c, 0x40, 0xd1, 0x94, 0x4d, 0xe1,
  0x94, 0x4c, 0xc9, 0x15, 0x4b, 0xb9, 0x14, 0x4c, 0x81, 0x94, 0x48, 0x99,
  0x14, 0x4a, 0xa9, 0x94, 0x5b, 0x71, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20,
  0x88, 0x7f, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x2f, 0x8c, 0x11, 0x80,
  0x20, 0x08, 0x82, 0x60, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60,
  0xa0, 0xad, 0x81, 0xc3, 0xa5, 0x41, 0x1a, 0x60, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x60, 0xd0, 0x81, 0x18, 0x88, 0x81, 0x1a, 0x80, 0x01, 0x35,
  0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1d, 0x8c, 0xc1, 0x18, 0xac,
  0x41, 0x56, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x01, 0x52, 0x07, 0x64,
  0x80, 0x06, 0x6c, 0x20, 0x06, 0xd6, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18,
  0x20, 0x76, 0x50, 0x06, 0x69, 0xd0, 0x06, 0xdb, 0x35, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x06, 0x1e, 0x98, 0xc1, 0x19, 0xb8, 0x01, 0x19, 0x60,
  0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xe4, 0xc1, 0x19, 0xa0, 0xc1,
  0x1b, 0x74, 0xd9, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7a, 0x80,
  0x06, 0x71, 0x00, 0x07, 0x66, 0xa0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0xb1, 0x07, 0x69, 0x20, 0x07, 0x71, 0xf0, 0x6d, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0xf0, 0x81, 0x1a, 0xcc, 0x81, 0x1c, 0x94, 0x01,
  0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06, 0x46, 0x1f, 0xac, 0xc1, 0x1c,
  0xcc, 0x41, 0x1a, 0x74, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xf8,
  0x01, 0x1b, 0xd0, 0x01, 0x1d, 0x88, 0x81, 0x37, 0x62, 0x90, 0x00, 0x20,
  0x08, 0x06, 0xc6, 0x1f, 0xb4, 0x41, 0x1d, 0xd4, 0x01, 0x1a, 0x7c, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x80, 0x82, 0x1b, 0xd8, 0x81, 0x1d,
  0xa8, 0x01, 0x18, 0xd8, 0xf1, 0xc8, 0xc7, 0x0e, 0x48, 0x3e, 0x76, 0x44,
  0xf2, 0xb1, 0x61, 0x82, 0x8f, 0x0d, 0x14, 0x7c, 0x6c, 0xa8, 0xe0, 0x53,
  0x51, 0x1e, 0x48, 0x05, 0x67, 0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60,
  0x50, 0x8d, 0x82, 0x1a, 0x58, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x43, 0x1d, 0x6c, 0x00, 0x23,
  0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xa5, 0x02, 0x1c, 0x70, 0xc1, 0x68,
  0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10,
  0x43, 0x35, 0x71, 0x00, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x50, 0xbd,
  0x82, 0x1d, 0x88, 0x41, 0x30, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30,
  0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x60, 0x90, 0x19, 0xc8, 0xc7, 0x96,
  0x33, 0x90, 0x8f, 0x19, 0x68, 0x20, 0x1f, 0x93, 0xd2, 0x40, 0x3e, 0xd6,
  0xa8, 0x81, 0x7c, 0x0c, 0x59, 0x03, 0xf9, 0x18, 0xc5, 0x06, 0xf2, 0xb1,
  0xa7, 0x0d, 0xe4, 0x63, 0x8a, 0x1b, 0xc8, 0xc7, 0xac, 0x37, 0x90, 0x8f,
  0x45, 0x70, 0x20, 0x1f, 0x63, 0xe2, 0x40, 0x3e, 0xf5, 0x06, 0xb8, 0x20,
  0x15, 0x98, 0x02, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x25, 0x0e,
  0xa9, 0x50, 0x07, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68,
  0xc2, 0x20, 0x8c, 0x26, 0x10, 0x43, 0x1d, 0xab, 0x00, 0x23, 0x06, 0x07,
  0x00, 0x82, 0x60, 0x50, 0xa1, 0xc3, 0x2b, 0xec, 0x41, 0x30, 0x9a, 0x10,
  0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x50,
  0x0d, 0x2c, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0xee, 0x50,
  0x0b, 0xa1, 0x10, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x68, 0x02, 0x31, 0x18, 0x44, 0x0a, 0xf2, 0xb1, 0xa5, 0x14,
  0xe4, 0x63, 0x86, 0x29, 0xc8, 0xc7, 0xa4, 0x53, 0x90, 0x8f, 0x35, 0xa8,
  0x20, 0x1f, 0x43, 0x52, 0x41, 0x3e, 0x46, 0xa9, 0x82, 0x7c, 0xec, 0x59,
  0x05, 0xf9, 0x98, 0xc2, 0x0a, 0xf2, 0x31, 0xab, 0x15, 0xe4, 0x63, 0x91,
  0x2b, 0xc8, 0xc7, 0x98, 0x57, 0x90, 0x8f, 0x31, 0x6b, 0x00, 0x1f, 0x63,
  0xd6, 0x00, 0x3e, 0xc6, 0xac, 0x01, 0x7c, 0x8c, 0x59, 0x03, 0xf8, 0x18,
  0xb3, 0x06, 0xf0, 0x31, 0x66, 0x0d, 0xe0, 0x63, 0xcc, 0x1a, 0xc0, 0xc7,
  0x98, 0x35, 0x80, 0x8f, 0x31, 0x6b, 0x00, 0x1f, 0x63, 0xd6, 0x00, 0x3e,
  0xc6, 0xac, 0x01, 0x7c, 0x8c, 0x59, 0x03, 0xf8, 0x18, 0x43, 0x0b, 0xf2,
  0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x6b, 0x25, 0xe8, 0x81, 0x16,
  0x94, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0x96, 0xa8, 0x07,
  0x5a, 0x40, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0x5a, 0xc2,
  0x1e, 0x68, 0xc1, 0x08, 0xec, 0xc1, 0x05, 0xf9, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0xc1, 0xf5, 0x12, 0xf8, 0x80, 0x0b, 0x4d, 0x30, 0x62, 0x80,
  0x00, 0x20, 0x08, 0x06, 0x17, 0x4c, 0xe4, 0x03, 0x2e, 0x2c, 0xc1, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x5c, 0x31, 0xa1, 0x0f, 0xb8, 0x90, 0x04,
  0x26, 0xf1, 0x82, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x9a,
  0x09, 0x7e, 0xe0, 0x05, 0x28, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0x8b, 0x26, 0xfa, 0x81, 0x17, 0x9c, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xae, 0x9a, 0xf0, 0x07, 0x5e, 0x60, 0x02, 0xc3, 0x72, 0x41, 0x3e,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xdd, 0x04, 0x48, 0xe4, 0x82,
  0x15, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x85, 0x13, 0x21, 0x91,
  0x0b, 0x54, 0x60, 0x1a, 0x2f, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x2e, 0x9d, 0x18, 0x09, 0x5e, 0xc0, 0x82, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xb8, 0x76, 0x82, 0x24, 0x78, 0xc1, 0x0a, 0x8c, 0xfb, 0x05,
  0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xd5, 0x13, 0x26, 0xf1,
  0x0b, 0x5a, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x4f, 0x9c,
  0xc4, 0x2f, 0x60, 0xc1, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x54, 0x60,
  0x71, 0x12, 0xf3, 0x00, 0x12, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04,
  0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x23, 0x06, 0x07, 0x00, 0x82,
  0x60, 0x50, 0x95, 0x05, 0x4b, 0xe0, 0x03, 0x49, 0x8c, 0x26, 0x04, 0xc0,
  0x68, 0x82, 0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0x8c, 0x18,
  0x1c, 0x00, 0x08, 0x82, 0x41, 0xa5, 0x16, 0x31, 0xd1, 0x0f, 0x28, 0x31,
  0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09,
  0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0xd5, 0x5b, 0xd8, 0x84,
  0x48, 0xc4, 0xc4, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2,
  0x20, 0x8c, 0x26, 0x10, 0x83, 0x4d, 0x66, 0x20, 0x9f, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xe8, 0xa2, 0x27, 0xc6, 0x60, 0x0a, 0x46, 0x0c,
  0x10, 0x00, 0x04, 0xc1, 0xe0, 0xaa, 0x0b, 0x9f, 0x00, 0x83, 0x29, 0x18,
  0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0xcb, 0x2e, 0x7e, 0xa2, 0x1f, 0xa6,
  0xc0, 0x24, 0x35, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x5c,
  0x78, 0x11, 0x16, 0x67, 0x20, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60,
  0x70, 0xe5, 0x85, 0x58, 0x90, 0x81, 0x14, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0xc1, 0xa5, 0x17, 0x63, 0x11, 0x12, 0x52, 0x60, 0x91, 0x1b, 0xc8,
  0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0x2e, 0xbe, 0x28, 0x8b, 0x35,
  0x88, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xb8, 0xfa, 0xc2, 0x2c,
  0xd0, 0x20, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0xf2, 0x8b,
  0xb3, 0x28, 0x89, 0x28, 0x30, 0x48, 0x0e, 0xe4, 0x33, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x17, 0x68, 0xa4, 0xc5, 0x1b, 0x40, 0xc1, 0x88, 0x01,
  0x02, 0x80, 0x20, 0x18, 0x5c, 0xa1, 0xa1, 0x16, 0x6c, 0x00, 0x05, 0x23,
  0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0x89, 0xc6, 0x5a, 0xa4, 0x04, 0x14,
  0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0x41, 0x45, 0x1a, 0x6b, 0x71, 0x13,
  0x7b, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a, 0x30, 0x08,
  0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x55, 0x6a,
  0xc0, 0x05, 0x4f, 0x98, 0xc5, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1,
  0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20,
  0x18, 0x54, 0xae, 0x51, 0x17, 0x61, 0xa1, 0x16, 0xa3, 0x09, 0x01, 0x30,
  0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0xe6, 0x94,
  0x82, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0xe0, 0x9a, 0x0d, 0xbe,
  0x10, 0x05, 0x27, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83, 0x8b, 0x36,
  0xfa, 0xe2, 0x0f, 0x9c, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xae,
  0xda, 0xf0, 0x0b, 0x9e, 0x70, 0x02, 0x6b, 0x52, 0x41, 0x3e, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x70, 0xdd, 0x06, 0x68, 0x98, 0x42, 0x13, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x85, 0x1b, 0xa1, 0x31, 0x0a, 0x4d,
  0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x57, 0x6e, 0x88, 0x06, 0x58,
  0x34, 0x81, 0x31, 0xad, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xb8, 0x76, 0x83, 0x34, 0x54, 0x81, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0xe0, 0xe2, 0x8d, 0xd2, 0x38, 0x05, 0x26, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0xab, 0x37, 0x4c, 0x83, 0x2c, 0x98, 0x60, 0xc4, 0xe0,
  0x00, 0x40, 0x10, 0x0c, 0xaa, 0xdf, 0x30, 0x0d, 0xb9, 0xd0, 0x8b, 0xd1,
  0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0x18, 0x31, 0x38,
  0x00, 0x10, 0x04, 0x83, 0x6a, 0x3c, 0x54, 0xc3, 0x2e, 0xfa, 0x62, 0x34,
  0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c, 0x0e,
  0x00, 0x04, 0xc1, 0xa0, 0x3a, 0x0f, 0xd7, 0xd0, 0x0b, 0xd0, 0x18, 0x4d,
  0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x04, 0x5b, 0x64, 0x41,
  0x3e, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x70, 0xad, 0x07, 0x6d, 0xc0,
  0xc2, 0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0xc5, 0x1e, 0xb5,
  0xe1, 0x0a, 0x4b, 0x60, 0x4a, 0x2d, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40,
  0x10, 0x0c, 0x2e, 0xf7, 0xb8, 0x8d, 0x59, 0x50, 0x82, 0x11, 0x03, 0x04,
  0x00, 0x41, 0x30, 0xb8, 0xde, 0x03, 0x37, 0x62, 0x41, 0x09, 0x2c, 0xc1,
  0x05, 0xf9, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0xc1, 0x15, 0x1f, 0xba,
  0x61, 0x0b, 0x49, 0x30, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0x97, 0x7c,
  0xec, 0x06, 0x2d, 0x24, 0xc1, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18, 0x30,
  0xf7, 0xc1, 0x1a, 0x07, 0x11, 0x1c, 0x44, 0x30, 0x62, 0x60, 0x00, 0x20,
  0x08, 0x06, 0xce, 0x7d, 0xdc, 0x46, 0x60, 0x41, 0x22, 0x1f, 0x13, 0x0e,
  0xf9, 0xd8, 0x50, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xaa,
  0xfc, 0x00, 0x0f, 0xd6, 0x80, 0x8d, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10,
  0x82, 0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x83, 0x06, 0x00,
  0x41, 0x30, 0x80, 0xfe, 0xe3, 0x3c, 0xe0, 0x81, 0x1d, 0xd0, 0x81, 0x34,
  0x88, 0x41, 0x08, 0x46, 0x0c, 0x0c, 0x00, 0x04, 0xc1, 0xc0, 0x09, 0x91,
  0xfa, 0x08, 0x46, 0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x21, 0x91, 0xfd,
  0xa0, 0x0f, 0xfe, 0x90, 0x8f, 0x54, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0x85, 0x44, 0xf6, 0x83, 0x3e, 0xf8, 0x43, 0x3d, 0x4a, 0x61, 0xc4,
  0x20, 0x01, 0x40, 0x10, 0x0c, 0x14, 0x12, 0xd9, 0x0f, 0xfa, 0xe0, 0x8f,
  0xf7, 0x08, 0x85, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x48, 0x64,
  0x3f, 0xe8, 0x83, 0x3f, 0xe0, 0xa3, 0x0f, 0x46, 0x0c, 0x12, 0x00, 0x04,
  0xc1, 0x40, 0x21, 0x91, 0xfd, 0xe8, 0x0f, 0xfe, 0x90, 0x0f, 0x35, 0x18,
  0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x44, 0xf6, 0xa3, 0x3f, 0xf8,
  0x43, 0x3d, 0xcc, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14, 0x12,
  0xd9, 0x8f, 0xfe, 0xe0, 0x8f, 0xf7, 0x10, 0x83, 0x11, 0x83, 0x04, 0x00,
  0x41, 0x30, 0x50, 0x48, 0x64, 0x3f, 0xfa, 0x83, 0x3f, 0xe0, 0x23, 0x18,
  0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x44, 0xf6, 0xa3, 0x3e, 0xf8,
  0x43, 0x3e, 0x94, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0x48, 0x64,
  0x3f, 0xea, 0x83, 0x3f, 0xd4, 0x23, 0x19, 0x31, 0x48, 0x00, 0x10, 0x04,
  0x03, 0x85, 0x44, 0xf6, 0xa3, 0x3e, 0xf8, 0xe3, 0x3d, 0x90, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xa8, 0x40, 0xe4, 0x3c, 0x66, 0x83, 0x3f, 0x46,
  0x13, 0x82, 0x61, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14, 0x13, 0xe9,
  0x0f, 0xfd, 0xf0, 0x0f, 0xfa, 0xc0, 0x8d, 0x11, 0x83, 0x04, 0x00, 0x41,
  0x30, 0x50, 0x4c, 0xa4, 0x3f, 0xf4, 0xc3, 0x3f, 0xd8, 0x03, 0x37, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x31, 0x91, 0xfe, 0xd0, 0x0f, 0xff,
  0x88, 0x0f, 0xdc, 0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0xc5, 0x44,
  0xfa, 0x43, 0x3f, 0xfc, 0x43, 0x3e, 0x82, 0x11, 0x83, 0x04, 0x00, 0x41,
  0x30, 0x50, 0x4c, 0xa4, 0x3f, 0xfc, 0xc3, 0x3f, 0xe8, 0x03, 0x36, 0x46,
  0x0c, 0x12, 0x00, 0x04, 0xc1, 0x40, 0x31, 0x91, 0xfe, 0xf0, 0x0f, 0xff,
  0x60, 0x8f, 0xd7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
