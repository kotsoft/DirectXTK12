#if 0
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0     NONE   float   xyzw
; NORMAL                   0   xyz         1     NONE   float   xyz 
; TEXCOORD                 0   xy          2     NONE   float   xy  
; BLENDINDICES             0   xyzw        3     NONE    uint   xy  
; BLENDWEIGHT              0   xyzw        4     NONE   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; COLOR                    0   xyzw        0     NONE   float   xyzw
; COLOR                    1   xyzw        1     NONE   float   xyzw
; TEXCOORD                 0   xy          2     NONE   float   xy  
; SV_Position              0   xyzw        3      POS   float   xyzw
;
; shader debug name: Compiled\SkinnedEffect_VSSkinnedVertexLightingTwoBones.pdb
; shader hash: fe2d5dc22827bc16a8cc20ed7d5113c6
;
; Pipeline Runtime Information: 
;
; Vertex Shader
; OutputPositionPresent=1
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0                              
; NORMAL                   0                              
; TEXCOORD                 0                              
; BLENDINDICES             0                              
; BLENDWEIGHT              0                              
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; COLOR                    0                 linear       
; COLOR                    1                 linear       
; TEXCOORD                 0                 linear       
; SV_Position              0          noperspective       
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [3872 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;
;
; ViewId state:
;
; Number of inputs: 20, outputs: 16
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 1 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 2 depends on inputs: { 4, 5, 6, 12, 13, 16, 17 }
;   output 4 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 16, 17 }
;   output 5 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 16, 17 }
;   output 6 depends on inputs: { 0, 1, 2, 3, 4, 5, 6, 12, 13, 16, 17 }
;   output 7 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 8 depends on inputs: { 8 }
;   output 9 depends on inputs: { 9 }
;   output 12 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 13 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 14 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;   output 15 depends on inputs: { 0, 1, 2, 3, 12, 13, 16, 17 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.alignment.legacy.Parameters = type { <4 x float>, <3 x float>, <3 x float>, float, [3 x <3 x float>], [3 x <3 x float>], [3 x <3 x float>], <3 x float>, <3 x float>, <4 x float>, [4 x <4 x float>], [3 x <3 x float>], [4 x <4 x float>], [72 x [3 x <4 x float>]] }

define void @VSSkinnedVertexLightingTwoBones() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %3 = call float @dx.op.loadInput.f32(i32 4, i32 4, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 3, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %15 = mul i32 %4, 3
  %16 = add i32 %15, 26
  %17 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %16)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.f32 %17, 0
  %19 = extractvalue %dx.types.CBufRet.f32 %17, 1
  %20 = extractvalue %dx.types.CBufRet.f32 %17, 2
  %21 = extractvalue %dx.types.CBufRet.f32 %17, 3
  %22 = add i32 %15, 27
  %23 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %22)  ; CBufferLoadLegacy(handle,regIndex)
  %24 = extractvalue %dx.types.CBufRet.f32 %23, 0
  %25 = extractvalue %dx.types.CBufRet.f32 %23, 1
  %26 = extractvalue %dx.types.CBufRet.f32 %23, 2
  %27 = extractvalue %dx.types.CBufRet.f32 %23, 3
  %28 = add i32 %15, 28
  %29 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %28)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.f32 %29, 0
  %31 = extractvalue %dx.types.CBufRet.f32 %29, 1
  %32 = extractvalue %dx.types.CBufRet.f32 %29, 2
  %33 = extractvalue %dx.types.CBufRet.f32 %29, 3
  %34 = fmul fast float %18, %2
  %35 = fmul fast float %24, %2
  %36 = fmul fast float %30, %2
  %37 = fmul fast float %19, %2
  %38 = fmul fast float %25, %2
  %39 = fmul fast float %31, %2
  %40 = fmul fast float %20, %2
  %41 = fmul fast float %26, %2
  %42 = fmul fast float %32, %2
  %43 = fmul fast float %21, %2
  %44 = fmul fast float %27, %2
  %45 = fmul fast float %33, %2
  %46 = mul i32 %5, 3
  %47 = add i32 %46, 26
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %47)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = extractvalue %dx.types.CBufRet.f32 %48, 3
  %53 = add i32 %46, 27
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %53)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = extractvalue %dx.types.CBufRet.f32 %54, 3
  %59 = add i32 %46, 28
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 %59)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %63 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %64 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %65 = fmul fast float %49, %3
  %66 = fmul fast float %55, %3
  %67 = fmul fast float %61, %3
  %68 = fmul fast float %50, %3
  %69 = fmul fast float %56, %3
  %70 = fmul fast float %62, %3
  %71 = fmul fast float %51, %3
  %72 = fmul fast float %57, %3
  %73 = fmul fast float %63, %3
  %74 = fmul fast float %52, %3
  %75 = fmul fast float %58, %3
  %76 = fmul fast float %64, %3
  %77 = fadd fast float %65, %34
  %78 = fadd fast float %66, %35
  %79 = fadd fast float %67, %36
  %80 = fadd fast float %68, %37
  %81 = fadd fast float %69, %38
  %82 = fadd fast float %70, %39
  %83 = fadd fast float %71, %40
  %84 = fadd fast float %72, %41
  %85 = fadd fast float %73, %42
  %86 = fadd fast float %74, %43
  %87 = fadd fast float %75, %44
  %88 = fadd fast float %76, %45
  %89 = fmul fast float %77, %11
  %90 = call float @dx.op.tertiary.f32(i32 46, float %12, float %80, float %89)  ; FMad(a,b,c)
  %91 = call float @dx.op.tertiary.f32(i32 46, float %13, float %83, float %90)  ; FMad(a,b,c)
  %92 = call float @dx.op.tertiary.f32(i32 46, float %14, float %86, float %91)  ; FMad(a,b,c)
  %93 = fmul fast float %78, %11
  %94 = call float @dx.op.tertiary.f32(i32 46, float %12, float %81, float %93)  ; FMad(a,b,c)
  %95 = call float @dx.op.tertiary.f32(i32 46, float %13, float %84, float %94)  ; FMad(a,b,c)
  %96 = call float @dx.op.tertiary.f32(i32 46, float %14, float %87, float %95)  ; FMad(a,b,c)
  %97 = fmul fast float %79, %11
  %98 = call float @dx.op.tertiary.f32(i32 46, float %12, float %82, float %97)  ; FMad(a,b,c)
  %99 = call float @dx.op.tertiary.f32(i32 46, float %13, float %85, float %98)  ; FMad(a,b,c)
  %100 = call float @dx.op.tertiary.f32(i32 46, float %14, float %88, float %99)  ; FMad(a,b,c)
  %101 = fmul fast float %77, %8
  %102 = call float @dx.op.tertiary.f32(i32 46, float %9, float %80, float %101)  ; FMad(a,b,c)
  %103 = call float @dx.op.tertiary.f32(i32 46, float %10, float %83, float %102)  ; FMad(a,b,c)
  %104 = fmul fast float %78, %8
  %105 = call float @dx.op.tertiary.f32(i32 46, float %9, float %81, float %104)  ; FMad(a,b,c)
  %106 = call float @dx.op.tertiary.f32(i32 46, float %10, float %84, float %105)  ; FMad(a,b,c)
  %107 = fmul fast float %79, %8
  %108 = call float @dx.op.tertiary.f32(i32 46, float %9, float %82, float %107)  ; FMad(a,b,c)
  %109 = call float @dx.op.tertiary.f32(i32 46, float %10, float %85, float %108)  ; FMad(a,b,c)
  %110 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.f32 %110, 0
  %112 = extractvalue %dx.types.CBufRet.f32 %110, 1
  %113 = extractvalue %dx.types.CBufRet.f32 %110, 2
  %114 = extractvalue %dx.types.CBufRet.f32 %110, 3
  %115 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %116 = extractvalue %dx.types.CBufRet.f32 %115, 0
  %117 = extractvalue %dx.types.CBufRet.f32 %115, 1
  %118 = extractvalue %dx.types.CBufRet.f32 %115, 2
  %119 = extractvalue %dx.types.CBufRet.f32 %115, 3
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = extractvalue %dx.types.CBufRet.f32 %120, 3
  %125 = fmul fast float %111, %92
  %126 = call float @dx.op.tertiary.f32(i32 46, float %96, float %112, float %125)  ; FMad(a,b,c)
  %127 = call float @dx.op.tertiary.f32(i32 46, float %100, float %113, float %126)  ; FMad(a,b,c)
  %128 = call float @dx.op.tertiary.f32(i32 46, float %14, float %114, float %127)  ; FMad(a,b,c)
  %129 = fmul fast float %116, %92
  %130 = call float @dx.op.tertiary.f32(i32 46, float %96, float %117, float %129)  ; FMad(a,b,c)
  %131 = call float @dx.op.tertiary.f32(i32 46, float %100, float %118, float %130)  ; FMad(a,b,c)
  %132 = call float @dx.op.tertiary.f32(i32 46, float %14, float %119, float %131)  ; FMad(a,b,c)
  %133 = fmul fast float %121, %92
  %134 = call float @dx.op.tertiary.f32(i32 46, float %96, float %122, float %133)  ; FMad(a,b,c)
  %135 = call float @dx.op.tertiary.f32(i32 46, float %100, float %123, float %134)  ; FMad(a,b,c)
  %136 = call float @dx.op.tertiary.f32(i32 46, float %14, float %124, float %135)  ; FMad(a,b,c)
  %137 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %138 = extractvalue %dx.types.CBufRet.f32 %137, 0
  %139 = extractvalue %dx.types.CBufRet.f32 %137, 1
  %140 = extractvalue %dx.types.CBufRet.f32 %137, 2
  %141 = fsub fast float %138, %128
  %142 = fsub fast float %139, %132
  %143 = fsub fast float %140, %136
  %144 = call float @dx.op.dot3.f32(i32 55, float %141, float %142, float %143, float %141, float %142, float %143)  ; Dot3(ax,ay,az,bx,by,bz)
  %145 = call float @dx.op.unary.f32(i32 25, float %144)  ; Rsqrt(value)
  %146 = fmul fast float %141, %145
  %147 = fmul fast float %142, %145
  %148 = fmul fast float %143, %145
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = extractvalue %dx.types.CBufRet.f32 %149, 2
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %158 = extractvalue %dx.types.CBufRet.f32 %157, 0
  %159 = extractvalue %dx.types.CBufRet.f32 %157, 1
  %160 = extractvalue %dx.types.CBufRet.f32 %157, 2
  %161 = fmul fast float %150, %103
  %162 = call float @dx.op.tertiary.f32(i32 46, float %106, float %151, float %161)  ; FMad(a,b,c)
  %163 = call float @dx.op.tertiary.f32(i32 46, float %109, float %152, float %162)  ; FMad(a,b,c)
  %164 = fmul fast float %154, %103
  %165 = call float @dx.op.tertiary.f32(i32 46, float %106, float %155, float %164)  ; FMad(a,b,c)
  %166 = call float @dx.op.tertiary.f32(i32 46, float %109, float %156, float %165)  ; FMad(a,b,c)
  %167 = fmul fast float %158, %103
  %168 = call float @dx.op.tertiary.f32(i32 46, float %106, float %159, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %109, float %160, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.dot3.f32(i32 55, float %163, float %166, float %169, float %163, float %166, float %169)  ; Dot3(ax,ay,az,bx,by,bz)
  %171 = call float @dx.op.unary.f32(i32 25, float %170)  ; Rsqrt(value)
  %172 = fmul fast float %171, %163
  %173 = fmul fast float %171, %166
  %174 = fmul fast float %171, %169
  %175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.f32 %175, 0
  %177 = extractvalue %dx.types.CBufRet.f32 %175, 1
  %178 = extractvalue %dx.types.CBufRet.f32 %175, 2
  %179 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %180 = extractvalue %dx.types.CBufRet.f32 %179, 0
  %181 = extractvalue %dx.types.CBufRet.f32 %179, 1
  %182 = extractvalue %dx.types.CBufRet.f32 %179, 2
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 0
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 1
  %186 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %187 = fsub fast float %146, %176
  %188 = fsub fast float %147, %177
  %189 = fsub fast float %148, %178
  %190 = call float @dx.op.dot3.f32(i32 55, float %187, float %188, float %189, float %187, float %188, float %189)  ; Dot3(ax,ay,az,bx,by,bz)
  %191 = call float @dx.op.unary.f32(i32 25, float %190)  ; Rsqrt(value)
  %192 = fmul fast float %191, %188
  %193 = fmul fast float %191, %189
  %194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %195 = extractvalue %dx.types.CBufRet.f32 %194, 0
  %196 = extractvalue %dx.types.CBufRet.f32 %194, 1
  %197 = extractvalue %dx.types.CBufRet.f32 %194, 2
  %198 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %199 = extractvalue %dx.types.CBufRet.f32 %198, 0
  %200 = extractvalue %dx.types.CBufRet.f32 %198, 1
  %201 = extractvalue %dx.types.CBufRet.f32 %198, 2
  %202 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %203 = extractvalue %dx.types.CBufRet.f32 %202, 0
  %204 = extractvalue %dx.types.CBufRet.f32 %202, 1
  %205 = extractvalue %dx.types.CBufRet.f32 %202, 2
  %206 = fsub fast float %146, %195
  %207 = fsub fast float %147, %196
  %208 = fsub fast float %148, %197
  %209 = call float @dx.op.dot3.f32(i32 55, float %206, float %207, float %208, float %206, float %207, float %208)  ; Dot3(ax,ay,az,bx,by,bz)
  %210 = call float @dx.op.unary.f32(i32 25, float %209)  ; Rsqrt(value)
  %211 = fmul fast float %210, %207
  %212 = fmul fast float %210, %208
  %213 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %214 = extractvalue %dx.types.CBufRet.f32 %213, 0
  %215 = extractvalue %dx.types.CBufRet.f32 %213, 1
  %216 = extractvalue %dx.types.CBufRet.f32 %213, 2
  %217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.f32 %217, 0
  %219 = extractvalue %dx.types.CBufRet.f32 %217, 1
  %220 = extractvalue %dx.types.CBufRet.f32 %217, 2
  %221 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %222 = extractvalue %dx.types.CBufRet.f32 %221, 0
  %223 = extractvalue %dx.types.CBufRet.f32 %221, 1
  %224 = extractvalue %dx.types.CBufRet.f32 %221, 2
  %225 = fsub fast float %146, %214
  %226 = fsub fast float %147, %215
  %227 = fsub fast float %148, %216
  %228 = call float @dx.op.dot3.f32(i32 55, float %225, float %226, float %227, float %225, float %226, float %227)  ; Dot3(ax,ay,az,bx,by,bz)
  %229 = call float @dx.op.unary.f32(i32 25, float %228)  ; Rsqrt(value)
  %230 = fmul fast float %229, %226
  %231 = fmul fast float %229, %227
  %232 = fsub fast float -0.000000e+00, %177
  %233 = fsub fast float -0.000000e+00, %178
  %234 = fsub fast float -0.000000e+00, %196
  %235 = fsub fast float -0.000000e+00, %197
  %236 = fsub fast float -0.000000e+00, %215
  %237 = fsub fast float -0.000000e+00, %216
  %238 = fmul fast float %172, %176
  %239 = fsub fast float -0.000000e+00, %238
  %240 = call float @dx.op.tertiary.f32(i32 46, float %232, float %173, float %239)  ; FMad(a,b,c)
  %241 = call float @dx.op.tertiary.f32(i32 46, float %233, float %174, float %240)  ; FMad(a,b,c)
  %242 = fmul fast float %172, %195
  %243 = fsub fast float -0.000000e+00, %242
  %244 = call float @dx.op.tertiary.f32(i32 46, float %234, float %173, float %243)  ; FMad(a,b,c)
  %245 = call float @dx.op.tertiary.f32(i32 46, float %235, float %174, float %244)  ; FMad(a,b,c)
  %246 = fmul fast float %172, %214
  %247 = fsub fast float -0.000000e+00, %246
  %248 = call float @dx.op.tertiary.f32(i32 46, float %236, float %173, float %247)  ; FMad(a,b,c)
  %249 = call float @dx.op.tertiary.f32(i32 46, float %237, float %174, float %248)  ; FMad(a,b,c)
  %250 = fmul fast float %187, %172
  %251 = fmul fast float %250, %191
  %252 = call float @dx.op.tertiary.f32(i32 46, float %192, float %173, float %251)  ; FMad(a,b,c)
  %253 = call float @dx.op.tertiary.f32(i32 46, float %193, float %174, float %252)  ; FMad(a,b,c)
  %254 = fmul fast float %206, %172
  %255 = fmul fast float %254, %210
  %256 = call float @dx.op.tertiary.f32(i32 46, float %211, float %173, float %255)  ; FMad(a,b,c)
  %257 = call float @dx.op.tertiary.f32(i32 46, float %212, float %174, float %256)  ; FMad(a,b,c)
  %258 = fmul fast float %225, %172
  %259 = fmul fast float %258, %229
  %260 = call float @dx.op.tertiary.f32(i32 46, float %230, float %173, float %259)  ; FMad(a,b,c)
  %261 = call float @dx.op.tertiary.f32(i32 46, float %231, float %174, float %260)  ; FMad(a,b,c)
  %262 = fcmp fast olt float %241, 0.000000e+00
  %263 = fcmp fast olt float %245, 0.000000e+00
  %264 = fcmp fast olt float %249, 0.000000e+00
  %265 = select i1 %262, float 0.000000e+00, float 1.000000e+00
  %266 = select i1 %263, float 0.000000e+00, float 1.000000e+00
  %267 = select i1 %264, float 0.000000e+00, float 1.000000e+00
  %268 = fmul fast float %265, %241
  %269 = fmul fast float %266, %245
  %270 = fmul fast float %267, %249
  %271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %272 = extractvalue %dx.types.CBufRet.f32 %271, 3
  %273 = call float @dx.op.binary.f32(i32 35, float %253, float 0.000000e+00)  ; FMax(a,b)
  %274 = call float @dx.op.binary.f32(i32 35, float %257, float 0.000000e+00)  ; FMax(a,b)
  %275 = call float @dx.op.binary.f32(i32 35, float %261, float 0.000000e+00)  ; FMax(a,b)
  %276 = fmul fast float %273, %265
  %277 = fmul fast float %274, %266
  %278 = fmul fast float %275, %267
  %279 = call float @dx.op.unary.f32(i32 23, float %276)  ; Log(value)
  %280 = call float @dx.op.unary.f32(i32 23, float %277)  ; Log(value)
  %281 = call float @dx.op.unary.f32(i32 23, float %278)  ; Log(value)
  %282 = fmul fast float %279, %272
  %283 = fmul fast float %280, %272
  %284 = fmul fast float %281, %272
  %285 = call float @dx.op.unary.f32(i32 21, float %282)  ; Exp(value)
  %286 = call float @dx.op.unary.f32(i32 21, float %283)  ; Exp(value)
  %287 = call float @dx.op.unary.f32(i32 21, float %284)  ; Exp(value)
  %288 = fmul fast float %285, %241
  %289 = fmul fast float %286, %245
  %290 = fmul fast float %287, %249
  %291 = fmul fast float %268, %180
  %292 = call float @dx.op.tertiary.f32(i32 46, float %269, float %199, float %291)  ; FMad(a,b,c)
  %293 = call float @dx.op.tertiary.f32(i32 46, float %270, float %218, float %292)  ; FMad(a,b,c)
  %294 = fmul fast float %268, %181
  %295 = call float @dx.op.tertiary.f32(i32 46, float %269, float %200, float %294)  ; FMad(a,b,c)
  %296 = call float @dx.op.tertiary.f32(i32 46, float %270, float %219, float %295)  ; FMad(a,b,c)
  %297 = fmul fast float %268, %182
  %298 = call float @dx.op.tertiary.f32(i32 46, float %269, float %201, float %297)  ; FMad(a,b,c)
  %299 = call float @dx.op.tertiary.f32(i32 46, float %270, float %220, float %298)  ; FMad(a,b,c)
  %300 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %301 = extractvalue %dx.types.CBufRet.f32 %300, 0
  %302 = extractvalue %dx.types.CBufRet.f32 %300, 1
  %303 = extractvalue %dx.types.CBufRet.f32 %300, 2
  %304 = fmul fast float %301, %293
  %305 = fmul fast float %302, %296
  %306 = fmul fast float %303, %299
  %307 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %308 = extractvalue %dx.types.CBufRet.f32 %307, 0
  %309 = extractvalue %dx.types.CBufRet.f32 %307, 1
  %310 = extractvalue %dx.types.CBufRet.f32 %307, 2
  %311 = fadd fast float %304, %308
  %312 = fadd fast float %305, %309
  %313 = fadd fast float %306, %310
  %314 = fmul fast float %288, %184
  %315 = call float @dx.op.tertiary.f32(i32 46, float %289, float %203, float %314)  ; FMad(a,b,c)
  %316 = call float @dx.op.tertiary.f32(i32 46, float %290, float %222, float %315)  ; FMad(a,b,c)
  %317 = fmul fast float %288, %185
  %318 = call float @dx.op.tertiary.f32(i32 46, float %289, float %204, float %317)  ; FMad(a,b,c)
  %319 = call float @dx.op.tertiary.f32(i32 46, float %290, float %223, float %318)  ; FMad(a,b,c)
  %320 = fmul fast float %288, %186
  %321 = call float @dx.op.tertiary.f32(i32 46, float %289, float %205, float %320)  ; FMad(a,b,c)
  %322 = call float @dx.op.tertiary.f32(i32 46, float %290, float %224, float %321)  ; FMad(a,b,c)
  %323 = extractvalue %dx.types.CBufRet.f32 %271, 0
  %324 = extractvalue %dx.types.CBufRet.f32 %271, 1
  %325 = extractvalue %dx.types.CBufRet.f32 %271, 2
  %326 = fmul fast float %323, %316
  %327 = fmul fast float %324, %319
  %328 = fmul fast float %325, %322
  %329 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %330 = extractvalue %dx.types.CBufRet.f32 %329, 0
  %331 = extractvalue %dx.types.CBufRet.f32 %329, 1
  %332 = extractvalue %dx.types.CBufRet.f32 %329, 2
  %333 = extractvalue %dx.types.CBufRet.f32 %329, 3
  %334 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %335 = extractvalue %dx.types.CBufRet.f32 %334, 0
  %336 = extractvalue %dx.types.CBufRet.f32 %334, 1
  %337 = extractvalue %dx.types.CBufRet.f32 %334, 2
  %338 = extractvalue %dx.types.CBufRet.f32 %334, 3
  %339 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %340 = extractvalue %dx.types.CBufRet.f32 %339, 0
  %341 = extractvalue %dx.types.CBufRet.f32 %339, 1
  %342 = extractvalue %dx.types.CBufRet.f32 %339, 2
  %343 = extractvalue %dx.types.CBufRet.f32 %339, 3
  %344 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %345 = extractvalue %dx.types.CBufRet.f32 %344, 0
  %346 = extractvalue %dx.types.CBufRet.f32 %344, 1
  %347 = extractvalue %dx.types.CBufRet.f32 %344, 2
  %348 = extractvalue %dx.types.CBufRet.f32 %344, 3
  %349 = fmul fast float %330, %92
  %350 = call float @dx.op.tertiary.f32(i32 46, float %96, float %331, float %349)  ; FMad(a,b,c)
  %351 = call float @dx.op.tertiary.f32(i32 46, float %100, float %332, float %350)  ; FMad(a,b,c)
  %352 = call float @dx.op.tertiary.f32(i32 46, float %14, float %333, float %351)  ; FMad(a,b,c)
  %353 = fmul fast float %335, %92
  %354 = call float @dx.op.tertiary.f32(i32 46, float %96, float %336, float %353)  ; FMad(a,b,c)
  %355 = call float @dx.op.tertiary.f32(i32 46, float %100, float %337, float %354)  ; FMad(a,b,c)
  %356 = call float @dx.op.tertiary.f32(i32 46, float %14, float %338, float %355)  ; FMad(a,b,c)
  %357 = fmul fast float %340, %92
  %358 = call float @dx.op.tertiary.f32(i32 46, float %96, float %341, float %357)  ; FMad(a,b,c)
  %359 = call float @dx.op.tertiary.f32(i32 46, float %100, float %342, float %358)  ; FMad(a,b,c)
  %360 = call float @dx.op.tertiary.f32(i32 46, float %14, float %343, float %359)  ; FMad(a,b,c)
  %361 = fmul fast float %345, %92
  %362 = call float @dx.op.tertiary.f32(i32 46, float %96, float %346, float %361)  ; FMad(a,b,c)
  %363 = call float @dx.op.tertiary.f32(i32 46, float %100, float %347, float %362)  ; FMad(a,b,c)
  %364 = call float @dx.op.tertiary.f32(i32 46, float %14, float %348, float %363)  ; FMad(a,b,c)
  %365 = extractvalue %dx.types.CBufRet.f32 %300, 3
  %366 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %1, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %367 = extractvalue %dx.types.CBufRet.f32 %366, 0
  %368 = extractvalue %dx.types.CBufRet.f32 %366, 1
  %369 = extractvalue %dx.types.CBufRet.f32 %366, 2
  %370 = extractvalue %dx.types.CBufRet.f32 %366, 3
  %371 = call float @dx.op.dot4.f32(i32 56, float %92, float %96, float %100, float %14, float %367, float %368, float %369, float %370)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %372 = call float @dx.op.unary.f32(i32 7, float %371)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %352)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %356)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %360)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %364)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %311)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %312)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %313)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %365)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %326)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %327)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %328)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %372)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %6)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %7)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #2

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!7}
!dx.entryPoints = !{!8}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 0}
!2 = !{i32 1, i32 5}
!3 = !{!"vs", i32 6, i32 0}
!4 = !{null, null, !5, null}
!5 = !{!6}
!6 = !{i32 0, %dx.alignment.legacy.Parameters* undef, !"", i32 0, i32 0, i32 1, i32 3872, null}
!7 = !{[22 x i32] [i32 20, i32 16, i32 61680, i32 61680, i32 61680, i32 61680, i32 119, i32 119, i32 119, i32 0, i32 256, i32 512, i32 0, i32 0, i32 61687, i32 61687, i32 0, i32 0, i32 61687, i32 61687, i32 0, i32 0]}
!8 = !{void ()* @VSSkinnedVertexLightingTwoBones, !"VSSkinnedVertexLightingTwoBones", !9, !4, null}
!9 = !{!10, !20, null}
!10 = !{!11, !14, !16, !18, !19}
!11 = !{i32 0, !"SV_Position", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 0, i8 0, !13}
!12 = !{i32 0}
!13 = !{i32 3, i32 15}
!14 = !{i32 1, !"NORMAL", i8 9, i8 0, !12, i8 0, i32 1, i8 3, i32 1, i8 0, !15}
!15 = !{i32 3, i32 7}
!16 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 0, i32 1, i8 2, i32 2, i8 0, !17}
!17 = !{i32 3, i32 3}
!18 = !{i32 3, !"BLENDINDICES", i8 5, i8 0, !12, i8 0, i32 1, i8 4, i32 3, i8 0, !17}
!19 = !{i32 4, !"BLENDWEIGHT", i8 9, i8 0, !12, i8 0, i32 1, i8 4, i32 4, i8 0, !17}
!20 = !{!21, !22, !24, !25}
!21 = !{i32 0, !"COLOR", i8 9, i8 0, !12, i8 2, i32 1, i8 4, i32 0, i8 0, !13}
!22 = !{i32 1, !"COLOR", i8 9, i8 0, !23, i8 2, i32 1, i8 4, i32 1, i8 0, !13}
!23 = !{i32 1}
!24 = !{i32 2, !"TEXCOORD", i8 9, i8 0, !12, i8 2, i32 1, i8 2, i32 2, i8 0, !17}
!25 = !{i32 3, !"SV_Position", i8 9, i8 3, !12, i8 4, i32 1, i8 4, i32 3, i8 0, !13}

#endif

const unsigned char SkinnedEffect_VSSkinnedVertexLightingTwoBones[] = {
  0x44, 0x58, 0x42, 0x43, 0xaf, 0x8a, 0x41, 0xe5, 0x29, 0x73, 0x41, 0xec,
  0x0f, 0x61, 0x29, 0xb8, 0xc7, 0xa3, 0x9d, 0xc2, 0x01, 0x00, 0x00, 0x00,
  0x36, 0x17, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00,
  0x6e, 0x03, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x46, 0x04, 0x00, 0x00,
  0x62, 0x04, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x31,
  0xdd, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x00, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54,
  0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e,
  0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45,
  0x4e, 0x44, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x00, 0x4f, 0x53, 0x47,
  0x31, 0xa9, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4f, 0x4c,
  0x4f, 0x52, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58,
  0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73,
  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x50, 0x53, 0x56, 0x30, 0x80, 0x01,
  0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x05, 0x04,
  0x00, 0x05, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x53,
  0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x4e,
  0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
  0x52, 0x44, 0x00, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49,
  0x43, 0x45, 0x53, 0x00, 0x42, 0x4c, 0x45, 0x4e, 0x44, 0x57, 0x45, 0x49,
  0x47, 0x48, 0x54, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x43, 0x4f,
  0x4c, 0x4f, 0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x43, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
  0x42, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x03, 0x44, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x44, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x01, 0x44, 0x00, 0x03, 0x02, 0x00, 0x00, 0x42, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x42, 0x00, 0x03, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x44, 0x03, 0x03, 0x04, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0,
  0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0x77, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xf7, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xf0,
  0x00, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x52, 0x54, 0x53, 0x30, 0x88, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x70, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
  0xff, 0xff, 0x49, 0x4c, 0x44, 0x4e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3a, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5c, 0x53,
  0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
  0x5f, 0x56, 0x53, 0x53, 0x6b, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x56, 0x65,
  0x72, 0x74, 0x65, 0x78, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
  0x54, 0x77, 0x6f, 0x42, 0x6f, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x64, 0x62,
  0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xfe, 0x2d, 0x5d, 0xc2, 0x28, 0x27, 0xbc, 0x16, 0xa8, 0xcc,
  0x20, 0xed, 0x7d, 0x51, 0x13, 0xc6, 0x44, 0x58, 0x49, 0x4c, 0xcc, 0x12,
  0x00, 0x00, 0x60, 0x00, 0x01, 0x00, 0xb3, 0x04, 0x00, 0x00, 0x44, 0x58,
  0x49, 0x4c, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xb4, 0x12,
  0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0xaa, 0x04,
  0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00,
  0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49, 0x06, 0x10,
  0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19, 0x1e, 0x04,
  0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10,
  0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88, 0x48, 0x90,
  0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42, 0xe4, 0x48,
  0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c, 0xe1, 0x83,
  0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x40, 0x02,
  0xa8, 0x0d, 0x84, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20, 0x6d, 0x30,
  0x86, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x09, 0xa8, 0x00, 0x49, 0x18,
  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42, 0x20, 0x4c,
  0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00, 0x35, 0x00,
  0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04, 0x13, 0x23,
  0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14, 0x12, 0x4c,
  0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xa0, 0xc1, 0x08, 0x40, 0x09,
  0x00, 0x0a, 0x66, 0x00, 0xe6, 0x08, 0xc0, 0x60, 0x8e, 0x00, 0x29, 0xc6,
  0x40, 0x10, 0x44, 0x41, 0x90, 0x51, 0x0c, 0x82, 0x20, 0x88, 0x82, 0x20,
  0xa4, 0x18, 0x00, 0x41, 0x10, 0xc5, 0x40, 0x4a, 0x41, 0x06, 0x62, 0x18,
  0x86, 0x61, 0x18, 0x88, 0x29, 0xc3, 0x40, 0x0c, 0xe4, 0x14, 0x62, 0x20,
  0x86, 0x81, 0xa0, 0xa2, 0x0c, 0xc4, 0x30, 0x0c, 0xc3, 0x30, 0x0c, 0x03,
  0x49, 0x47, 0x0d, 0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0xdc, 0x46, 0x15,
  0x2b, 0x31, 0xf9, 0xc5, 0x6d, 0x23, 0x62, 0x18, 0x86, 0x81, 0x8a, 0x7b,
  0x86, 0xcb, 0x9f, 0xb0, 0x87, 0x90, 0xfc, 0x10, 0x68, 0x86, 0x85, 0x40,
  0x41, 0x55, 0x08, 0x8a, 0xb0, 0x08, 0xba, 0x4a, 0x31, 0x10, 0xc3, 0x30,
  0x50, 0x36, 0x47, 0x10, 0x14, 0xc3, 0x22, 0x0a, 0x82, 0xd8, 0x88, 0x1b,
  0x08, 0x18, 0x46, 0x20, 0x86, 0x61, 0x84, 0x61, 0xc8, 0x01, 0x30, 0x09,
  0xbe, 0x1c, 0xf8, 0x12, 0x69, 0x3c, 0x6f, 0xb8, 0x7c, 0x60, 0x41, 0x8c,
  0x86, 0x21, 0x9a, 0xc9, 0x5f, 0x08, 0x03, 0x10, 0x30, 0x3f, 0x05, 0x22,
  0x80, 0x21, 0x26, 0x22, 0x92, 0x90, 0xf3, 0x81, 0xe0, 0x10, 0x86, 0x21,
  0x08, 0x7e, 0x62, 0x28, 0x92, 0x54, 0xa6, 0x05, 0x01, 0x00, 0x13, 0x14,
  0x72, 0xc0, 0x87, 0x74, 0x60, 0x87, 0x36, 0x68, 0x87, 0x79, 0x68, 0x03,
  0x72, 0xc0, 0x87, 0x0d, 0xaf, 0x50, 0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50,
  0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90,
  0x0e, 0x78, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xe6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x73, 0x20,
  0x07, 0x6d, 0x60, 0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0,
  0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0xe0,
  0x0e, 0x78, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x76, 0x40, 0x07, 0x43, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x3c, 0x06, 0x10, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x79, 0x10, 0x20, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x28, 0x40, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe4, 0x61, 0x80,
  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0xe3,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0x07, 0x02, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x8f, 0x04, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x9e, 0x0b, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x19, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x38, 0x20, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00,
  0x00, 0x00, 0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09,
  0x26, 0x47, 0xc6, 0x04, 0x43, 0x22, 0x4a, 0x60, 0x04, 0xa0, 0x14, 0x8a,
  0xa1, 0x80, 0x79, 0xca, 0xa0, 0x3c, 0xca, 0xa1, 0x08, 0x0a, 0x81, 0x8a,
  0x92, 0x18, 0x01, 0x28, 0x84, 0x32, 0x28, 0x82, 0x52, 0x20, 0x73, 0x06,
  0x80, 0xce, 0xb1, 0x2c, 0x0a, 0x82, 0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0x80,
  0x4f, 0x3e, 0x80, 0x4f, 0x3e, 0xb8, 0x87, 0x7b, 0xb8, 0x07, 0x00, 0x44,
  0x40, 0x08, 0x00, 0xee, 0x93, 0x0f, 0xee, 0x93, 0x0f, 0x00, 0xe0, 0x3e,
  0xf9, 0xe0, 0x3e, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x18,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02,
  0x13, 0x44, 0x35, 0x18, 0x63, 0x0b, 0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93,
  0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99, 0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b,
  0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62, 0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a,
  0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73, 0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04,
  0x13, 0x04, 0x62, 0x99, 0x20, 0x10, 0xcc, 0x06, 0x61, 0x20, 0x26, 0x08,
  0x44, 0xb3, 0x41, 0x18, 0x0c, 0x0a, 0x76, 0x73, 0x13, 0x04, 0xc2, 0xd9,
  0x30, 0x20, 0x09, 0x31, 0x41, 0x30, 0x83, 0x8d, 0xc0, 0x04, 0x81, 0x78,
  0x36, 0x20, 0xc4, 0xc2, 0x10, 0xc4, 0xd0, 0x00, 0x1b, 0x02, 0x67, 0x03,
  0x01, 0x00, 0x0f, 0x30, 0x41, 0x38, 0x03, 0x6e, 0x43, 0x10, 0x4d, 0x10,
  0x04, 0x80, 0x9f, 0xd5, 0xd4, 0xd4, 0x5a, 0x9a, 0x9b, 0x5b, 0x19, 0x99,
  0x55, 0x99, 0x1c, 0x5d, 0x19, 0x1e, 0x53, 0xda, 0x19, 0x1a, 0x5d, 0x9a,
  0xdb, 0x19, 0xd5, 0xdd, 0x9b, 0xd0, 0x9b, 0x5b, 0xd9, 0x1c, 0x97, 0x29,
  0xab, 0x2f, 0xa8, 0xb7, 0xb9, 0x34, 0xba, 0xb4, 0x37, 0xb7, 0x09, 0x42,
  0x51, 0x4d, 0x10, 0x0a, 0x6b, 0x43, 0x40, 0x4c, 0x10, 0x8a, 0x6b, 0x82,
  0x40, 0x40, 0x13, 0x04, 0x22, 0xda, 0x20, 0x68, 0xdb, 0x86, 0x85, 0xa8,
  0xac, 0x0b, 0xbb, 0x86, 0x8c, 0xb8, 0x38, 0x1a, 0x4e, 0x4f, 0x52, 0x4d,
  0x41, 0x4c, 0x13, 0x84, 0x02, 0x9b, 0x20, 0x10, 0xd2, 0x06, 0x41, 0x03,
  0x83, 0x0d, 0xcb, 0xe0, 0x59, 0x17, 0x76, 0x0d, 0xdf, 0x70, 0x85, 0xc1,
  0x04, 0x81, 0x98, 0x88, 0x50, 0x15, 0x61, 0x0d, 0x3d, 0x3d, 0x49, 0x11,
  0x4d, 0x10, 0x8a, 0x6c, 0x83, 0xa0, 0x69, 0x1b, 0x96, 0x31, 0x20, 0x03,
  0xeb, 0xc2, 0xae, 0xa1, 0x0c, 0xc6, 0xe0, 0x32, 0x03, 0x32, 0x42, 0x4c,
  0x45, 0x4e, 0x44, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x13, 0x84,
  0x42, 0xdb, 0xb0, 0x68, 0x68, 0x90, 0x06, 0x17, 0x76, 0x0d, 0x99, 0x76,
  0x99, 0xc1, 0x04, 0x81, 0xa0, 0xb8, 0x08, 0x31, 0x15, 0x39, 0x11, 0x5d,
  0x15, 0x25, 0x1d, 0x21, 0x51, 0x6d, 0x58, 0xd6, 0x80, 0x0d, 0xac, 0x0b,
  0xbb, 0x86, 0x6c, 0x0d, 0x2e, 0x33, 0xd8, 0x50, 0x74, 0x62, 0x70, 0x06,
  0x6a, 0xd0, 0x06, 0x2c, 0x86, 0x9e, 0x98, 0x9e, 0xa4, 0x36, 0x2c, 0xc4,
  0x1b, 0x58, 0x17, 0x56, 0x06, 0x43, 0x46, 0x5c, 0xdc, 0x86, 0x60, 0xd8,
  0xb0, 0x0c, 0x6f, 0x60, 0x5d, 0x71, 0x50, 0x06, 0x43, 0x36, 0x5c, 0xdc,
  0x86, 0x65, 0x0c, 0xc8, 0xc0, 0xba, 0xb0, 0x32, 0x18, 0xca, 0x60, 0x0c,
  0x2e, 0x33, 0xd8, 0xb0, 0x68, 0x95, 0xf5, 0x61, 0xd9, 0x90, 0x69, 0x17,
  0xb7, 0x81, 0x80, 0x03, 0x39, 0x98, 0x03, 0x3a, 0xd8, 0x30, 0xb8, 0x41,
  0x1d, 0x00, 0x1b, 0x8a, 0x89, 0xb2, 0x03, 0x08, 0xa8, 0xc2, 0xc6, 0x66,
  0xd7, 0xe6, 0x92, 0x46, 0x56, 0xe6, 0x46, 0x37, 0x25, 0x08, 0xaa, 0x90,
  0xe1, 0xb9, 0xd8, 0x95, 0xc9, 0xcd, 0xa5, 0xbd, 0xb9, 0x4d, 0x09, 0x88,
  0x26, 0x64, 0x78, 0x2e, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x02,
  0xa3, 0x0e, 0x19, 0x9e, 0xcb, 0x1c, 0x5a, 0x18, 0x59, 0x99, 0x5c, 0xd3,
  0x1b, 0x59, 0x19, 0xdb, 0x94, 0x20, 0x29, 0x43, 0x86, 0xe7, 0x22, 0x57,
  0x36, 0xf7, 0x56, 0x27, 0x37, 0x56, 0x36, 0x37, 0x25, 0x78, 0xea, 0x90,
  0xe1, 0xb9, 0xd8, 0xa5, 0x95, 0xdd, 0x25, 0x91, 0x4d, 0xd1, 0x85, 0xd1,
  0x95, 0x4d, 0x09, 0xa2, 0x3a, 0x64, 0x78, 0x2e, 0x65, 0x6e, 0x74, 0x72,
  0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x02, 0x3b, 0x00, 0x00,
  0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x33, 0x08,
  0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38,
  0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71,
  0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c,
  0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d,
  0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d,
  0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07,
  0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87,
  0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30,
  0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10,
  0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66,
  0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c,
  0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07,
  0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87,
  0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05,
  0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87,
  0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0,
  0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4,
  0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca,
  0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39,
  0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38,
  0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c,
  0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4, 0x21, 0x07,
  0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19, 0xca, 0xc3,
  0x0e, 0xec, 0x60, 0x0f, 0xed, 0xe0, 0x06, 0xec, 0xf0, 0x0e, 0xef, 0x00,
  0x0f, 0x33, 0x22, 0x88, 0x1c, 0xf0, 0xc1, 0x0d, 0xc8, 0x41, 0x1c, 0xce,
  0xc1, 0x0d, 0xec, 0x21, 0x1c, 0xe4, 0x81, 0x1d, 0xc2, 0x21, 0x1f, 0xde,
  0xa1, 0x1e, 0xe8, 0x01, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00, 0x2f, 0x00,
  0x00, 0x00, 0x06, 0xf0, 0xbd, 0x2c, 0xab, 0x20, 0x4d, 0x43, 0x0c, 0x2f,
  0x11, 0x4d, 0xc4, 0x55, 0x22, 0xc6, 0x31, 0x21, 0x8d, 0xd1, 0x5a, 0xce,
  0xe6, 0x34, 0x84, 0x64, 0x06, 0xd0, 0x70, 0xf9, 0xce, 0xe3, 0x07, 0x48,
  0x03, 0x44, 0x98, 0x5f, 0xdc, 0xb6, 0x21, 0x6c, 0xc3, 0xe5, 0x3b, 0x8f,
  0x2f, 0x04, 0x54, 0x51, 0x10, 0x51, 0xe9, 0x00, 0x43, 0x49, 0x18, 0x80,
  0x80, 0xf9, 0xc5, 0x6d, 0x9b, 0x82, 0x34, 0x5c, 0xbe, 0xf3, 0xf8, 0x42,
  0x44, 0x00, 0x13, 0x11, 0x02, 0xcd, 0xb0, 0x10, 0x46, 0xe0, 0x0c, 0x97,
  0xef, 0x3c, 0xfe, 0xe0, 0x4c, 0xb7, 0x5f, 0xdc, 0xb6, 0x1d, 0x38, 0xc3,
  0xe5, 0x3b, 0x8f, 0x3f, 0x38, 0x13, 0xee, 0x17, 0xb7, 0x6d, 0x01, 0xd3,
  0x70, 0xf9, 0xce, 0xe3, 0x2f, 0x0e, 0x30, 0x88, 0xcd, 0x43, 0x4d, 0x7e,
  0x71, 0xdb, 0x26, 0x30, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0xe2, 0x00, 0x83,
  0xd8, 0x3c, 0xd4, 0xe4, 0x23, 0xb7, 0x6d, 0x03, 0xd5, 0x70, 0xf9, 0xce,
  0xe3, 0x4b, 0x93, 0x13, 0x11, 0x28, 0x35, 0x3d, 0xd4, 0xe4, 0x17, 0xb7,
  0x6d, 0x09, 0xd2, 0x70, 0xf9, 0xce, 0xe3, 0x4f, 0x44, 0x34, 0x21, 0x40,
  0x84, 0xf9, 0xc5, 0x6d, 0x5b, 0xc1, 0x33, 0x5c, 0xbe, 0xf3, 0xf8, 0x54,
  0x03, 0x44, 0x98, 0x5f, 0xdc, 0x36, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20,
  0x00, 0x00, 0xe6, 0x02, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c, 0x10, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xb4, 0x8d, 0x00, 0x50, 0x51, 0x02,
  0x44, 0x14, 0x5c, 0x71, 0x95, 0xdd, 0x0c, 0x40, 0xc9, 0x94, 0x5b, 0xa9,
  0x94, 0x4b, 0x19, 0x15, 0x4d, 0xd9, 0x14, 0x4e, 0xc9, 0x15, 0x48, 0x89,
  0x14, 0x46, 0x99, 0x14, 0x4a, 0x49, 0x14, 0x45, 0x41, 0x94, 0x45, 0xb1,
  0x14, 0x4c, 0x71, 0xd0, 0x30, 0x46, 0x00, 0x82, 0x20, 0x88, 0x7f, 0x23,
  0x00, 0x63, 0x04, 0x20, 0x08, 0x82, 0x20, 0x28, 0x00, 0x00, 0x23, 0x06,
  0x09, 0x00, 0x82, 0x60, 0xc0, 0xc5, 0x01, 0x24, 0x06, 0x6f, 0xf0, 0x06,
  0xde, 0x88, 0x41, 0x02, 0x80, 0x20, 0x18, 0x18, 0x7b, 0x80, 0x06, 0x68,
  0x00, 0x07, 0x66, 0xa0, 0x8d, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0xc1,
  0x07, 0x69, 0x90, 0x06, 0x71, 0xf0, 0x6d, 0x23, 0x06, 0x09, 0x00, 0x82,
  0x60, 0x80, 0xf0, 0x81, 0x1a, 0xb8, 0x81, 0x1c, 0xa0, 0x01, 0x37, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0x48, 0x1f, 0xac, 0xc1, 0x1b, 0xcc, 0x41,
  0x18, 0x74, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0xfc, 0x01, 0x1b,
  0xb4, 0x01, 0x1d, 0xa8, 0x81, 0x37, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0x06, 0x28, 0xb4, 0x81, 0x1b, 0xd4, 0xc1, 0x18, 0x7c, 0x23, 0x06, 0x09,
  0x00, 0x82, 0x60, 0x60, 0x84, 0x82, 0x1b, 0xdc, 0x81, 0x1d, 0xb0, 0x01,
  0x18, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82, 0x81, 0x21, 0x0a, 0x6f, 0x80,
  0x07, 0x77, 0x50, 0x06, 0x61, 0x30, 0x62, 0x90, 0x00, 0x20, 0x08, 0x06,
  0xc6, 0x28, 0xc0, 0x41, 0x1e, 0xe0, 0xc1, 0x1a, 0x88, 0xc1, 0x88, 0x41,
  0x02, 0x80, 0x20, 0x18, 0x18, 0xa4, 0x10, 0x07, 0x79, 0x90, 0x07, 0x6f,
  0x30, 0x06, 0x23, 0x06, 0x09, 0x00, 0x82, 0x60, 0x60, 0x94, 0x82, 0x1c,
  0xe8, 0x81, 0x1e, 0xa0, 0x01, 0x19, 0x8c, 0x18, 0x24, 0x00, 0x08, 0x82,
  0x81, 0x61, 0x0a, 0x73, 0xb0, 0x07, 0x7b, 0xe0, 0x06, 0x65, 0x30, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0xc6, 0x29, 0xd0, 0x01, 0x1f, 0xf0, 0x01,
  0x1c, 0x98, 0x41, 0x2d, 0x79, 0x20, 0x15, 0x88, 0x01, 0x8c, 0x18, 0x1c,
  0x00, 0x08, 0x82, 0xc1, 0x35, 0x0a, 0x6a, 0x00, 0x05, 0xa3, 0x09, 0x01,
  0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x75,
  0x9c, 0x01, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x95, 0x0a, 0x70,
  0x60, 0x05, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83,
  0x30, 0x9a, 0x40, 0x0c, 0xd5, 0xb0, 0x01, 0x8c, 0x18, 0x1c, 0x00, 0x08,
  0x82, 0xc1, 0xf5, 0x0a, 0x76, 0xc0, 0x05, 0xa3, 0x09, 0x01, 0x30, 0x9a,
  0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a, 0x40, 0x0c, 0x06, 0x81, 0x81,
  0x7c, 0x6c, 0x09, 0x03, 0xf9, 0x98, 0x21, 0x06, 0xf2, 0x31, 0x69, 0x0c,
  0xe4, 0x63, 0x0d, 0x19, 0xc8, 0xc7, 0x90, 0x32, 0x90, 0x8f, 0x51, 0x66,
  0x20, 0x1f, 0x7b, 0xce, 0x40, 0x3e, 0xa6, 0xa0, 0x81, 0x7c, 0xcc, 0x4a,
  0x03, 0xf9, 0x58, 0xa4, 0x06, 0xf2, 0x31, 0x66, 0x0d, 0xe4, 0x53, 0x69,
  0x80, 0x0b, 0x52, 0x41, 0x28, 0xc0, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18,
  0x5c, 0xe2, 0x90, 0x0a, 0x6f, 0x10, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82,
  0x10, 0x8c, 0x26, 0x0c, 0xc2, 0x68, 0x02, 0x31, 0xd4, 0x61, 0x0a, 0x30,
  0x62, 0x70, 0x00, 0x20, 0x08, 0x06, 0x17, 0x3a, 0xbc, 0x42, 0x1d, 0x04,
  0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x30, 0x9a,
  0x40, 0x0c, 0xd5, 0xac, 0x02, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1,
  0xe5, 0x0e, 0xb5, 0xb0, 0x07, 0xc1, 0x68, 0x42, 0x00, 0x8c, 0x26, 0x08,
  0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10, 0x83, 0x41, 0x7e, 0x20, 0x1f,
  0x5b, 0xfe, 0x40, 0x3e, 0x66, 0x80, 0x82, 0x7c, 0x4c, 0x0a, 0x05, 0xf9,
  0x58, 0x23, 0x0a, 0xf2, 0x31, 0x64, 0x14, 0xe4, 0x63, 0x14, 0x29, 0xc8,
  0xc7, 0x9e, 0x52, 0x90, 0x8f, 0x29, 0xa6, 0x20, 0x1f, 0xb3, 0x4e, 0x41,
  0x3e, 0x16, 0xa1, 0x82, 0x7c, 0x8c, 0x49, 0x05, 0xf9, 0x18, 0xb3, 0x06,
  0xf0, 0x31, 0x66, 0x0d, 0xe0, 0x63, 0xcc, 0x1a, 0xc0, 0xc7, 0x98, 0x35,
  0x80, 0x8f, 0x31, 0x6b, 0x00, 0x1f, 0x63, 0xd6, 0x00, 0x3e, 0xc6, 0xac,
  0x01, 0x7c, 0x8c, 0x59, 0x03, 0xf8, 0x18, 0xb3, 0x06, 0xf0, 0x31, 0x66,
  0x0d, 0xe0, 0x63, 0xcc, 0x1a, 0xc0, 0xc7, 0x98, 0x35, 0x80, 0x8f, 0x31,
  0xae, 0x20, 0x9f, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x56, 0x82,
  0x1e, 0x5c, 0x41, 0x09, 0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0x63,
  0x89, 0x7a, 0x70, 0x05, 0x24, 0x18, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0xac, 0x25, 0xec, 0xc1, 0x15, 0x8c, 0xc0, 0x1e, 0x59, 0x90, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x2f, 0x81, 0x0f, 0xb2, 0xd0, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xc1, 0x44, 0x3e, 0xc8, 0xc2,
  0x12, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x16, 0x13, 0xfa, 0x20,
  0x0b, 0x49, 0x60, 0x92, 0x2d, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0xb2, 0x99, 0xe0, 0x07, 0x5b, 0x80, 0x82, 0x11, 0x03, 0x04, 0x00,
  0x41, 0x30, 0xc8, 0x68, 0xa2, 0x1f, 0x6c, 0xc1, 0x09, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x20, 0xab, 0x09, 0x7f, 0xb0, 0x05, 0x26, 0x30, 0xac,
  0x17, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd9, 0x4d, 0x80,
  0x44, 0x2f, 0x58, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x38,
  0x11, 0x12, 0xbd, 0x40, 0x05, 0xa6, 0x81, 0x83, 0x7c, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x20, 0xd3, 0x89, 0x91, 0x00, 0x07, 0x2c, 0x18, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0x6c, 0x27, 0x48, 0x02, 0x1c, 0xac, 0xc0,
  0xb8, 0x71, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x3d,
  0x61, 0x12, 0xe3, 0xa0, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90,
  0xf9, 0xc4, 0x49, 0x8c, 0x03, 0x16, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82,
  0xc1, 0x05, 0x16, 0x27, 0xd1, 0x0e, 0x37, 0x31, 0x9a, 0x10, 0x00, 0xa3,
  0x09, 0x42, 0x30, 0x9a, 0x30, 0x08, 0xa3, 0x09, 0xc4, 0x30, 0x62, 0x70,
  0x00, 0x20, 0x08, 0x06, 0x57, 0x59, 0xb0, 0x84, 0x3c, 0x84, 0xc4, 0x68,
  0x42, 0x00, 0x8c, 0x26, 0x08, 0xc1, 0x68, 0xc2, 0x20, 0x8c, 0x26, 0x10,
  0xc3, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0x6a, 0x11, 0x13, 0xf7,
  0x50, 0x12, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83,
  0x30, 0x9a, 0x40, 0x0c, 0xe6, 0x84, 0x81, 0x7c, 0x46, 0x0c, 0x10, 0x00,
  0x04, 0xc1, 0x20, 0x7b, 0x0b, 0x9c, 0xf0, 0x9c, 0x60, 0xc4, 0x00, 0x01,
  0x40, 0x10, 0x0c, 0x32, 0xb8, 0xc8, 0x89, 0xcd, 0x09, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x20, 0x8b, 0x0b, 0x9d, 0x90, 0x07, 0x27, 0xb0, 0xa6,
  0x0c, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd9, 0x5c, 0xf0,
  0x84, 0x18, 0x34, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x74,
  0xd1, 0x13, 0x5f, 0x13, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x56,
  0x17, 0x3e, 0x61, 0x0f, 0x4d, 0x60, 0x4c, 0x1a, 0xc8, 0x67, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0xb2, 0xbb, 0x00, 0x0b, 0x33, 0x60, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0xf0, 0x22, 0x2c, 0xc6, 0x80, 0x09,
  0x46, 0x0c, 0x10, 0x00, 0x04, 0xc1, 0x20, 0xcb, 0x0b, 0xb1, 0xd0, 0x07,
  0x26, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x6b, 0x2f, 0xc4, 0x02,
  0x25, 0x6a, 0x62, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x6c, 0x68, 0xe2, 0x63, 0x83, 0x12, 0x1f, 0x1b, 0x8e, 0xf8, 0x8c,
  0x18, 0x2c, 0x00, 0x08, 0x82, 0x01, 0x63, 0x1a, 0x66, 0x31, 0x08, 0xc1,
  0x20, 0x04, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0xe0, 0x98, 0x06, 0x5a,
  0x04, 0x56, 0x04, 0xf2, 0xb1, 0x42, 0x90, 0x8f, 0x15, 0x83, 0x7c, 0x46,
  0x0c, 0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x3a, 0x0d, 0xb7, 0xa0, 0x09, 0xb0,
  0x18, 0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0x56, 0x43, 0x2e, 0x70, 0x62, 0x2c,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4,
  0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0xd7, 0xb0, 0x0b, 0x9e, 0x90, 0x8b,
  0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x45,
  0x0f, 0xe4, 0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd9, 0x6c, 0xf0,
  0x05, 0x1e, 0x2c, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xb4,
  0xd1, 0x17, 0x76, 0xb0, 0x04, 0xa6, 0xf4, 0x81, 0x7c, 0x46, 0x0c, 0x10,
  0x00, 0x04, 0xc1, 0x20, 0xb3, 0x8d, 0xbf, 0xd8, 0x03, 0x25, 0x18, 0x31,
  0x40, 0x00, 0x10, 0x04, 0x83, 0xec, 0x36, 0x40, 0x23, 0x0f, 0x94, 0xc0,
  0x12, 0x50, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xb9,
  0x21, 0x1a, 0x7e, 0x90, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90,
  0xe9, 0xc6, 0x68, 0xf0, 0x41, 0x12, 0x8c, 0x18, 0x2c, 0x00, 0x08, 0x82,
  0x01, 0x03, 0x1e, 0xa0, 0x71, 0x10, 0xc1, 0x41, 0x04, 0x23, 0x06, 0x06,
  0x00, 0x82, 0x60, 0xe0, 0x80, 0x87, 0x68, 0x04, 0x16, 0x24, 0xf2, 0x31,
  0xe1, 0x90, 0x8f, 0x0d, 0x85, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0xe0, 0x0a, 0x0f, 0xd4, 0x70, 0x8b, 0xdc, 0x18, 0x4d, 0x08, 0x80, 0xd1,
  0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83, 0x03, 0x00, 0x41, 0x30,
  0xb8, 0xca, 0x83, 0x35, 0xe4, 0xe2, 0x37, 0x46, 0x13, 0x02, 0x60, 0x34,
  0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c,
  0xae, 0xf4, 0x80, 0x0d, 0xbb, 0x00, 0x8d, 0xd1, 0x84, 0x00, 0x18, 0x4d,
  0x10, 0x82, 0xd1, 0x84, 0x41, 0xb0, 0x34, 0x58, 0xe2, 0x63, 0x69, 0xb0,
  0xc4, 0xc7, 0xd2, 0x60, 0x89, 0xcf, 0x88, 0xc1, 0x02, 0x80, 0x20, 0x18,
  0x30, 0xf4, 0x41, 0x1b, 0x83, 0x10, 0x0c, 0x42, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x0e, 0x7d, 0xd8, 0x46, 0x60, 0x01, 0x21, 0x1f, 0x13,
  0x08, 0xf9, 0x8c, 0x18, 0x1c, 0x00, 0x08, 0x82, 0xc1, 0x45, 0x1f, 0xbb,
  0x11, 0x1a, 0xe8, 0x31, 0x9a, 0x10, 0x00, 0xa3, 0x09, 0x42, 0x30, 0x9a,
  0x30, 0x08, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x70, 0xe1, 0xc7, 0x6f,
  0x94, 0x86, 0x7b, 0x8c, 0x26, 0x04, 0xc0, 0x68, 0x82, 0x10, 0x8c, 0x26,
  0x0c, 0xc2, 0x88, 0xc1, 0x01, 0x80, 0x20, 0x18, 0x5c, 0xfc, 0x31, 0x1e,
  0xa9, 0x21, 0x1b, 0xa3, 0x09, 0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09,
  0x83, 0x60, 0x7c, 0xb0, 0xc4, 0xc7, 0xf8, 0x60, 0x89, 0x8f, 0xf1, 0xc1,
  0x12, 0x9f, 0x11, 0x83, 0x05, 0x00, 0x41, 0x30, 0x60, 0x4e, 0xe4, 0x3c,
  0x06, 0x21, 0x18, 0x84, 0x60, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9c,
  0x13, 0x49, 0x8f, 0xc0, 0x02, 0x42, 0x3e, 0x26, 0x10, 0xf2, 0x19, 0x31,
  0x38, 0x00, 0x10, 0x04, 0x83, 0xeb, 0x44, 0xdc, 0x83, 0x36, 0x44, 0x64,
  0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61, 0x10, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x5a, 0x11, 0xf9, 0xc0, 0x0d, 0xf0, 0x18,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0x11, 0x83,
  0x03, 0x00, 0x41, 0x30, 0xb8, 0x5e, 0xc4, 0x3e, 0x78, 0x63, 0x3c, 0x46,
  0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x5e, 0x61,
  0x89, 0x8f, 0xbd, 0xc2, 0x12, 0x1f, 0x7b, 0x85, 0x25, 0x3e, 0x23, 0x06,
  0x0b, 0x00, 0x82, 0x60, 0xc0, 0xe8, 0x88, 0x7e, 0x0c, 0x42, 0x30, 0x08,
  0xc1, 0x88, 0x81, 0x01, 0x80, 0x20, 0x18, 0x38, 0x3a, 0xc2, 0x1f, 0x81,
  0x05, 0x84, 0x7c, 0x4c, 0x20, 0xe4, 0x63, 0xe8, 0x71, 0x07, 0xf1, 0xb1,
  0xf4, 0xb8, 0x83, 0xf8, 0x98, 0x7a, 0x98, 0x41, 0x7c, 0x6c, 0x3d, 0xcc,
  0x20, 0x3e, 0xc6, 0x1e, 0x55, 0x7c, 0xac, 0x3d, 0xaa, 0xf8, 0x98, 0x28,
  0xf8, 0x81, 0x7c, 0xec, 0x3d, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08,
  0x82, 0x41, 0x16, 0x26, 0x2a, 0x82, 0x8c, 0x42, 0x30, 0x62, 0x80, 0x00,
  0x20, 0x08, 0x06, 0x99, 0x98, 0xac, 0x08, 0x32, 0x0a, 0x81, 0x99, 0xc2,
  0x1b, 0xc8, 0xc7, 0xe6, 0x23, 0x88, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x64, 0x65, 0xe2, 0x22, 0xca, 0x29, 0x04, 0x23, 0x06, 0x08, 0x00,
  0x82, 0x60, 0x90, 0x99, 0xc9, 0x8b, 0x28, 0xa7, 0x10, 0x98, 0x2a, 0x80,
  0x81, 0x7c, 0xec, 0x3e, 0x82, 0xf8, 0x8c, 0x18, 0x20, 0x00, 0x08, 0x82,
  0x41, 0x96, 0x26, 0x32, 0xc2, 0xac, 0x42, 0x30, 0x62, 0x80, 0x00, 0x20,
  0x08, 0x06, 0x99, 0x9a, 0xcc, 0x08, 0xb3, 0x0a, 0x81, 0xfd, 0x81, 0x2b,
  0xc8, 0xc7, 0x02, 0x3e, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18,
  0x64, 0x6d, 0x62, 0x23, 0x7c, 0xf0, 0x0a, 0xc1, 0x88, 0x01, 0x02, 0x80,
  0x20, 0x18, 0x64, 0x6e, 0x72, 0x23, 0x7c, 0xf0, 0x0a, 0x81, 0xc1, 0x81,
  0x2c, 0xc8, 0xc7, 0x82, 0x36, 0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20,
  0x18, 0x64, 0x71, 0xa2, 0x23, 0x6d, 0x30, 0x0b, 0xc1, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x64, 0x72, 0xb2, 0x23, 0x6d, 0x30, 0x0b, 0x81, 0x85,
  0x81, 0x2d, 0xc8, 0xc7, 0x02, 0x4f, 0x3e, 0x23, 0x06, 0x08, 0x00, 0x82,
  0x60, 0x90, 0xd5, 0x89, 0x8f, 0x78, 0xb7, 0x10, 0x8c, 0x18, 0x20, 0x00,
  0x08, 0x82, 0x41, 0x66, 0x27, 0x3f, 0xe2, 0xdd, 0x42, 0x30, 0x1c, 0x51,
  0x9d, 0x08, 0xf1, 0x0d, 0x47, 0x48, 0x28, 0x42, 0x7c, 0xc3, 0x11, 0x4f,
  0x8a, 0x10, 0xdf, 0x74, 0x83, 0x8a, 0xac, 0xc8, 0x30, 0xdd, 0xb0, 0x22,
  0x2c, 0x32, 0x4c, 0x37, 0xb0, 0x48, 0x8b, 0x0c, 0x36, 0x6c, 0xf2, 0xb1,
  0x01, 0x93, 0x8f, 0x0d, 0x95, 0x7c, 0x46, 0x0c, 0x0e, 0x00, 0x04, 0xc1,
  0xe0, 0x0a, 0x15, 0x34, 0x71, 0x11, 0x3b, 0x19, 0x4d, 0x08, 0x86, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0x80, 0x4a, 0x85, 0x4c, 0x28, 0x19, 0x19,
  0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0xc8, 0x54, 0xca, 0x24, 0x9a, 0x91,
  0x11, 0x83, 0x03, 0x00, 0x41, 0x30, 0x80, 0x4e, 0xc5, 0x4c, 0x1c, 0x1a,
  0xb1, 0x61, 0x91, 0x8f, 0x0d, 0x8b, 0x7c, 0x6c, 0x58, 0xe4, 0x33, 0x62,
  0x60, 0x00, 0x20, 0x08, 0x06, 0x0e, 0xab, 0xac, 0xc9, 0x30, 0x62, 0x60,
  0x00, 0x20, 0x08, 0x06, 0x4e, 0xab, 0xb0, 0xc9, 0x30, 0x62, 0x60, 0x00,
  0x20, 0x08, 0x06, 0x8e, 0xab, 0xb4, 0xc9, 0x60, 0x83, 0x22, 0x1f, 0x1b,
  0x16, 0xf9, 0xd8, 0xc0, 0xc8, 0x67, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c,
  0x1c, 0x59, 0x91, 0x93, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x9c,
  0x59, 0x99, 0x93, 0x61, 0xc4, 0xc0, 0x00, 0x40, 0x10, 0x0c, 0x1c, 0x5a,
  0xa1, 0x93, 0xc1, 0x86, 0x37, 0x90, 0x8f, 0x0d, 0x6c, 0x20, 0x1f, 0x1b,
  0xd2, 0x40, 0x3e, 0x76, 0xbd, 0x83, 0x7c, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x20, 0xab, 0x15, 0x3f, 0xb9, 0x7a, 0x21, 0x18, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0xcc, 0x56, 0xfe, 0xe4, 0x5a, 0x85, 0xc0, 0xb4, 0x78,
  0x90, 0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xb8, 0x12, 0x2a,
  0xda, 0x2f, 0x04, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xe5, 0x8a,
  0xa8, 0x68, 0xad, 0x10, 0x58, 0x37, 0x0f, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x6c, 0x57, 0x48, 0xa5, 0x0b, 0x87, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x32, 0x5e, 0x29, 0x95, 0xee, 0x15, 0x82, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0xb8, 0x7c, 0xa5, 0x54, 0xd6, 0x44, 0x57,
  0x46, 0x13, 0x02, 0x60, 0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0xc1, 0x86,
  0x45, 0x3e, 0x36, 0x24, 0xf2, 0xb1, 0xe1, 0x90, 0xcf, 0x88, 0xc1, 0x01,
  0x80, 0x20, 0x18, 0x5c, 0xe5, 0xc2, 0x2a, 0x72, 0x22, 0x2e, 0xa3, 0x09,
  0x01, 0x30, 0x9a, 0x20, 0x04, 0xa3, 0x09, 0x83, 0x60, 0xc7, 0x00, 0x1f,
  0x3b, 0x06, 0xf8, 0xd8, 0x31, 0xc0, 0xc7, 0x34, 0x91, 0x90, 0xcf, 0x88,
  0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xec, 0x52, 0x2b, 0x1a, 0x3c, 0x04,
  0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xb5, 0x8b, 0xad, 0x68, 0xbe,
  0x10, 0x58, 0x47, 0x12, 0xf2, 0x19, 0x31, 0x40, 0x00, 0x10, 0x04, 0x83,
  0xec, 0x5d, 0x70, 0xa5, 0x93, 0x87, 0x60, 0xc4, 0x00, 0x01, 0x40, 0x10,
  0x0c, 0x32, 0x78, 0xc9, 0x95, 0x0e, 0x1c, 0x02, 0x03, 0x03, 0x93, 0x90,
  0xcf, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xf2, 0xb2, 0x2b, 0x60,
  0x40, 0x0f, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0xf3, 0xc2,
  0x2b, 0x60, 0x20, 0x0e, 0xc1, 0x68, 0x02, 0x1d, 0x00, 0xa3, 0x09, 0x75,
  0x10, 0x8c, 0x26, 0xd8, 0x81, 0x60, 0x83, 0x22, 0x1f, 0x1b, 0x10, 0xf9,
  0xd8, 0x60, 0xc8, 0x67, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xae, 0x7d,
  0x11, 0x17, 0x54, 0x71, 0x95, 0xd1, 0x84, 0x00, 0x18, 0x4d, 0x10, 0x82,
  0xd1, 0x84, 0x41, 0x18, 0x4d, 0x20, 0x86, 0x11, 0x83, 0x03, 0x00, 0x41,
  0x30, 0xb8, 0x40, 0xe6, 0x5c, 0x5a, 0x45, 0x5c, 0x46, 0x13, 0x02, 0x60,
  0x34, 0x41, 0x08, 0x46, 0x13, 0x06, 0x61, 0x34, 0x81, 0x18, 0x46, 0x0c,
  0x0e, 0x00, 0x04, 0xc1, 0xe0, 0x2a, 0x19, 0x76, 0x91, 0x95, 0x5b, 0x19,
  0x4d, 0x08, 0x80, 0xd1, 0x04, 0x21, 0x18, 0x4d, 0x18, 0x84, 0xd1, 0x04,
  0x62, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x4b, 0x65, 0xe2, 0xe5,
  0x56, 0xde, 0x65, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84, 0x60, 0x34, 0x61,
  0x10, 0x46, 0x13, 0x88, 0xc1, 0xa6, 0x10, 0x91, 0xcf, 0x88, 0x01, 0x02,
  0x80, 0x20, 0x18, 0x64, 0x2f, 0x83, 0x2f, 0xfe, 0x31, 0x05, 0x23, 0x06,
  0x08, 0x00, 0x82, 0x60, 0x90, 0xc1, 0x4c, 0xbe, 0xec, 0xc7, 0x14, 0x8c,
  0x18, 0x20, 0x00, 0x08, 0x82, 0x41, 0x16, 0x33, 0xfa, 0x22, 0x2b, 0x53,
  0x60, 0x52, 0x89, 0xc8, 0x67, 0xc4, 0x00, 0x01, 0x40, 0x10, 0x0c, 0xb2,
  0x99, 0xe1, 0x17, 0x11, 0x91, 0x82, 0x11, 0x03, 0x04, 0x00, 0x41, 0x30,
  0xc8, 0x68, 0xa6, 0x5f, 0xfe, 0x43, 0x0a, 0x46, 0x0c, 0x10, 0x00, 0x04,
  0xc1, 0x20, 0xab, 0x19, 0x7f, 0xb1, 0x15, 0x29, 0xb0, 0x28, 0x45, 0xe4,
  0x33, 0x62, 0x80, 0x00, 0x20, 0x08, 0x06, 0xd9, 0xcd, 0x80, 0x8c, 0x89,
  0x44, 0xc1, 0x88, 0x01, 0x02, 0x80, 0x20, 0x18, 0x64, 0x38, 0x13, 0x32,
  0x23, 0x12, 0x05, 0x23, 0x06, 0x08, 0x00, 0x82, 0x60, 0x90, 0xe5, 0x8c,
  0xc8, 0xe8, 0x4a, 0x14, 0x18, 0xd4, 0x22, 0xf2, 0x19, 0x31, 0x40, 0x00,
  0x10, 0x04, 0x83, 0x6c, 0x67, 0x48, 0x46, 0x45, 0xa0, 0x60, 0xc4, 0x00,
  0x01, 0x40, 0x10, 0x0c, 0x32, 0x9e, 0x29, 0x99, 0x13, 0x81, 0x82, 0x11,
  0x03, 0x04, 0x00, 0x41, 0x30, 0xc8, 0x7a, 0xc6, 0x64, 0x7c, 0x05, 0x0a,
  0x46, 0x13, 0x42, 0x61, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x0b,
  0x6c, 0x4e, 0xa6, 0x5d, 0xe2, 0x65, 0x34, 0x21, 0x00, 0x46, 0x13, 0x84,
  0x60, 0x34, 0x61, 0x10, 0x46, 0x13, 0x88, 0x61, 0xc4, 0xa0, 0x01, 0x40,
  0x10, 0x0c, 0x24, 0xb3, 0x71, 0x99, 0x1b, 0x99, 0x91, 0x17, 0x29, 0x17,
  0x62, 0x10, 0x82, 0x11, 0x03, 0x03, 0x00, 0x41, 0x30, 0x70, 0xd2, 0x86,
  0x67, 0x82, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0xd8, 0x46, 0x6c,
  0x7e, 0x66, 0x6c, 0x72, 0xa6, 0x1a, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03,
  0x85, 0x6d, 0xc4, 0xe6, 0x67, 0xc6, 0x26, 0x66, 0xa2, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x50, 0xd8, 0x46, 0x6c, 0x7e, 0x66, 0x6c, 0x6c, 0xa6,
  0x19, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x6d, 0xc4, 0xe6, 0x67,
  0xc6, 0xe6, 0x66, 0x92, 0x11, 0x83, 0x04, 0x00, 0x41, 0x30, 0x50, 0xd8,
  0x46, 0x6c, 0xc6, 0x66, 0x6c, 0x72, 0xc6, 0x0f, 0x46, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x40, 0x61, 0x1b, 0xb1, 0x19, 0x9b, 0xb1, 0x89, 0x99, 0x3e,
  0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x6d, 0xc4, 0x66, 0x6c,
  0xc6, 0xc6, 0x66, 0xf8, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14,
  0xb6, 0x11, 0x9b, 0xb1, 0x19, 0x9b, 0x9b, 0x41, 0x46, 0x0c, 0x12, 0x00,
  0x04, 0xc1, 0x40, 0x61, 0x1b, 0xb1, 0x21, 0x9b, 0xb1, 0xc9, 0x99, 0x37,
  0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x6d, 0xc4, 0x86, 0x6c,
  0xc6, 0x26, 0x66, 0xdc, 0x60, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14,
  0xb6, 0x11, 0x1b, 0xb2, 0x19, 0x1b, 0x9b, 0x69, 0x83, 0x11, 0x83, 0x04,
  0x00, 0x41, 0x30, 0x50, 0xd8, 0x46, 0x6c, 0xc8, 0x66, 0x6c, 0x6e, 0x26,
  0x18, 0x31, 0x48, 0x00, 0x10, 0x04, 0x03, 0x85, 0x6d, 0xc4, 0x86, 0x67,
  0xc6, 0x26, 0x67, 0xde, 0x65, 0xc4, 0x20, 0x01, 0x40, 0x10, 0x0c, 0x14,
  0xb6, 0x11, 0x1b, 0x9e, 0x19, 0x9b, 0x98, 0x71, 0x17, 0x04, 0x00, 0x00,
  0x00, 0x00
};
